"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2778],{6243:function(e,n,t){t.d(n,{Z:function(){return o}});var a=t(7378),i=t(8944),r="tabItem_lLGn";function o(e){var n=e.children,t=e.hidden,o=e.className;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(r,o),hidden:t},n)}},637:function(e,n,t){t.d(n,{Z:function(){return m}});var a=t(5773),i=t(7378),r=t(6457),o=t(784),l=t(9947),s=t(3457),p=t(8944),u="tabList_lSCs",c="tabItem_WhCL";function d(e){var n,t,r,d=e.lazy,m=e.block,g=e.defaultValue,f=e.values,h=e.groupId,k=e.className,v=i.Children.map(e.children,(function(e){if((0,i.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),b=null!=f?f:v.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),y=(0,o.l)(b,(function(e,n){return e.value===n.value}));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var N=null===g?g:null!=(n=null!=g?g:null==(t=v.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(r=v[0])?void 0:r.props.value;if(null!==N&&!b.some((function(e){return e.value===N})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+N+'" but none of its children has the corresponding value. Available values are: '+b.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var j=(0,l.U)(),w=j.tabGroupChoices,x=j.setTabGroupChoices,E=(0,i.useState)(N),C=E[0],S=E[1],T=[],Z=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=h){var L=w[h];null!=L&&L!==C&&b.some((function(e){return e.value===L}))&&S(L)}var I=function(e){var n=e.currentTarget,t=T.indexOf(n),a=b[t].value;a!==C&&(Z(n),S(a),null!=h&&x(h,a))},D=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a=T.indexOf(e.currentTarget)+1;t=T[a]||T[0];break;case"ArrowLeft":var i=T.indexOf(e.currentTarget)-1;t=T[i]||T[T.length-1]}null==(n=t)||n.focus()};return i.createElement("div",{className:(0,p.Z)("tabs-container",u)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,p.Z)("tabs",{"tabs--block":m},k)},b.map((function(e){var n=e.value,t=e.label,r=e.attributes;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:C===n?0:-1,"aria-selected":C===n,key:n,ref:function(e){return T.push(e)},onKeyDown:D,onFocus:I,onClick:I},r,{className:(0,p.Z)("tabs__item",c,null==r?void 0:r.className,{"tabs__item--active":C===n})}),null!=t?t:n)}))),d?(0,i.cloneElement)(v.filter((function(e){return e.props.value===C}))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},v.map((function(e,n){return(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==C})}))))}function m(e){var n=(0,r.Z)();return i.createElement(d,(0,a.Z)({key:String(n)},e))}},6642:function(e,n,t){t.d(n,{Z:function(){return p}});var a=t(7378),i=t(7518),r=t(6243),o=t(637);function l(e,n,t){var a="yarn add ";return e.dep?a+="--dev ":e.peer&&(a+="--peer "),t&&n&&(a+="-W "),a+=e.dep}function s(e,n){var t="pnpm add ";return e.dep?t+="--save-dev ":e.peer&&(t+="--save-peer "),n&&(t+="-w "),t+=e.dep}function p(e){return a.createElement(o.Z,{groupId:"package-manager",defaultValue:"yarn",values:[{label:"Yarn",value:"yarn"},{label:"Yarn (classic)",value:"yarn1"},{label:"npm",value:"npm"},{label:"pnpm",value:"pnpm"}]},a.createElement(r.Z,{value:"yarn"},a.createElement(i.Z,{language:"shell"},l(e,!1,!1))),a.createElement(r.Z,{value:"yarn1"},a.createElement(i.Z,{language:"shell"},l(e,!1,!0),"\n\n# If using workspaces\n",l(e,!0,!0))),a.createElement(r.Z,{value:"npm"},a.createElement(i.Z,{language:"shell"},function(e){var n="npm install ";return e.dep?n+="--save-dev ":e.peer&&(n+="--save-peer "),n+e.dep}(e))),a.createElement(r.Z,{value:"pnpm"},a.createElement(i.Z,{language:"shell"},s(e,!1),"\n\n# If using workspaces\n",s(e,!0))))}},4496:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return p},default:function(){return g},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return d}});var a=t(5773),i=t(808),r=(t(7378),t(5318)),o=t(6642),l=["components"],s={title:"ESLint example",sidebar_label:"ESLint"},p=void 0,u={unversionedId:"guides/examples/eslint",id:"guides/examples/eslint",title:"ESLint example",description:"In this guide, you'll learn how to integrate ESLint into moon.",source:"@site/docs/guides/examples/eslint.mdx",sourceDirName:"guides/examples",slug:"/guides/examples/eslint",permalink:"/docs/guides/examples/eslint",draft:!1,editUrl:"https://github.com/moonrepo/moon/tree/master/website/docs/guides/examples/eslint.mdx",tags:[],version:"current",frontMatter:{title:"ESLint example",sidebar_label:"ESLint"},sidebar:"docs",previous:{title:"Examples",permalink:"/docs/guides/examples"},next:{title:"Jest",permalink:"/docs/guides/examples/jest"}},c={},d=[{value:"Setup",id:"setup",level:2},{value:"TypeScript integration",id:"typescript-integration",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Root-level",id:"root-level",level:3},{value:"Project-level",id:"project-level",level:3},{value:"Sharing",id:"sharing",level:3},{value:"FAQ",id:"faq",level:2},{value:"How to lint a single file or folder?",id:"how-to-lint-a-single-file-or-folder",level:3},{value:"Should we use <code>overrides</code>?",id:"should-we-use-overrides",level:3}],m={toc:d};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In this guide, you'll learn how to integrate ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/"},"ESLint")," into moon."),(0,r.kt)("p",null,"Begin by installing ",(0,r.kt)("inlineCode",{parentName:"p"},"eslint")," and any plugins in your root. We suggest using the same version across\nthe entire repository."),(0,r.kt)(o.Z,{dep:"eslint eslint-config-beemo",dev:!0,mdxType:"AddDepsTabs"}),(0,r.kt)("h2",{id:"setup"},"Setup"),(0,r.kt)("p",null,"Since linting is a universal workflow, add a ",(0,r.kt)("inlineCode",{parentName:"p"},"lint")," task to\n",(0,r.kt)("a",{parentName:"p",href:"../../config/global-project"},(0,r.kt)("inlineCode",{parentName:"a"},".moon/project.yml"))," with the following parameters."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/project.yml"',title:'".moon/project.yml"'},"tasks:\n    lint:\n        command: 'eslint'\n        args:\n            # Support other extensions\n            - '--ext'\n            - '.js,.jsx,.ts,.tsx'\n            # Always fix and run extra checks\n            - '--fix'\n            - '--report-unused-disable-directives'\n            # Dont fail if a project has nothing to lint\n            - '--no-error-on-unmatched-pattern'\n            # Do fail if we encounter a fatal error\n            - '--exit-on-fatal-error'\n            # Only 1 ignore file is supported, so use the root\n            - '--ignore-path'\n            - '@in(4)'\n            # Run in current dir\n            - '.'\n        inputs:\n            # Source and test files\n            - 'src/**/*'\n            - 'tests/**/*'\n            # Other config files\n            - '*.config.*'\n            # Project configs, any format\n            - '.eslintrc.*'\n            # Root configs, any format\n            - '/.eslintignore'\n            - '/.eslintrc.*'\n")),(0,r.kt)("p",null,"Projects can extend this task and provide additional parameters if need be, for example."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="<project>/project.yml"',title:'"<project>/project.yml"'},"tasks:\n    lint:\n        args:\n            # Enable caching for this project\n            - '--cache'\n")),(0,r.kt)("h3",{id:"typescript-integration"},"TypeScript integration"),(0,r.kt)("p",null,"If you're using the ",(0,r.kt)("a",{parentName:"p",href:"https://typescript-eslint.io"},(0,r.kt)("inlineCode",{parentName:"a"},"@typescript-eslint"))," packages, and want to\nenable type-safety based lint rules, we suggest something similar to the official\n",(0,r.kt)("a",{parentName:"p",href:"https://typescript-eslint.io/docs/linting/monorepo"},"monorepo configuration"),"."),(0,r.kt)("p",null,"Create a ",(0,r.kt)("inlineCode",{parentName:"p"},"tsconfig.eslint.json")," in your repository root, extend your shared compiler options (we use\n",(0,r.kt)("a",{parentName:"p",href:"./typescript"},(0,r.kt)("inlineCode",{parentName:"a"},"tsconfig.options.json")),"), and include all your project files."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="tsconfig.eslint.json"',title:'"tsconfig.eslint.json"'},'{\n    "extends": "./tsconfig.options.json",\n    "compilerOptions": {\n        "emitDeclarationOnly": false,\n        "noEmit": true\n    },\n    "include": [\n        "apps/**/*"\n        "packages/**/*"\n    ]\n}\n')),(0,r.kt)("p",null,"Append the following inputs to your ",(0,r.kt)("inlineCode",{parentName:"p"},"lint")," task."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/project.yml"',title:'".moon/project.yml"'},"tasks:\n    lint:\n        # ...\n        inputs:\n            # TypeScript support\n            - 'types/**/*'\n            - 'tsconfig.json'\n            - '/tsconfig.eslint.json'\n            - '/tsconfig.options.json'\n")),(0,r.kt)("p",null,"And lastly, add ",(0,r.kt)("inlineCode",{parentName:"p"},"parserOptions")," to your ",(0,r.kt)("a",{parentName:"p",href:"#root-level"},"root-level config"),"."),(0,r.kt)("h2",{id:"configuration"},"Configuration"),(0,r.kt)("h3",{id:"root-level"},"Root-level"),(0,r.kt)("p",null,"The root-level ESLint config is ",(0,r.kt)("em",{parentName:"p"},"required"),", as ESLint traverses upwards from each file to find\nconfigurations, and this denotes the stopping point. It's also used to define rules for the ",(0,r.kt)("em",{parentName:"p"},"entire"),"\nrepository."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title=".eslintrc.js"',title:'".eslintrc.js"'},"module.exports = {\n    root: true, // Required!\n    extends: ['beemo'],\n    rules: {\n        'no-console': 'error',\n    },\n\n    // TypeScript support\n    parser: '@typescript-eslint/parser',\n    parserOptions: {\n        project: 'tsconfig.eslint.json',\n        tsconfigRootDir: __dirname,\n    },\n};\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},".eslintignore")," file must also be defined at the root, as\n",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/user-guide/configuring/ignoring-code#the-eslintignore-file"},"only 1 ignore file"),"\ncan exist in a repository. We ensure this ignore file is used by passing ",(0,r.kt)("inlineCode",{parentName:"p"},"--ignore-path")," above."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=".eslintignore"',title:'".eslintignore"'},"node_modules/\n*.min.js\n*.map\n*.snap\n")),(0,r.kt)("h3",{id:"project-level"},"Project-level"),(0,r.kt)("p",null,"A project-level ESLint config can be utilized by creating a ",(0,r.kt)("inlineCode",{parentName:"p"},".eslintrc.<json|js|cjs|yml>")," in the\nproject root. This is optional, but necessary when defining rules and ignore patterns unique to the\nproject."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="<project>/.eslintrc.js"',title:'"<project>/.eslintrc.js"'},"module.exports = {\n    // Patterns to ignore (alongside the root .eslintignore)\n    ignorePatterns: ['build', 'lib'],\n    // Project specific rules\n    rules: {\n        'no-console': 'off',\n    },\n};\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The\n",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/user-guide/configuring/configuration-files#extending-configuration-files"},(0,r.kt)("inlineCode",{parentName:"a"},"extends")),"\nsetting should ",(0,r.kt)("strong",{parentName:"p"},"not")," extend the root-level config, as ESLint will automatically merge configs\nwhile traversing upwards!")),(0,r.kt)("h3",{id:"sharing"},"Sharing"),(0,r.kt)("p",null,"To share configuration across projects, you have 3 options:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Define settings in the ",(0,r.kt)("a",{parentName:"li",href:"#root-level"},"root-level config"),". This only applies to the parent\nrepository."),(0,r.kt)("li",{parentName:"ul"},"Create and publish an\n",(0,r.kt)("a",{parentName:"li",href:"https://eslint.org/docs/developer-guide/shareable-configs#using-a-shareable-config"},(0,r.kt)("inlineCode",{parentName:"a"},"eslint-config")),"\nor ",(0,r.kt)("a",{parentName:"li",href:"https://eslint.org/docs/developer-guide/working-with-plugins"},(0,r.kt)("inlineCode",{parentName:"a"},"eslint-plugin"))," npm package.\nThis can be used in any repository."),(0,r.kt)("li",{parentName:"ul"},"A combination of 1 and 2.")),(0,r.kt)("p",null,"For options 2 and 3, if you're utilizing package workspaces, create a local package with the\nfollowing content."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="packages/eslint-config-company/index.js"',title:'"packages/eslint-config-company/index.js"'},"module.exports = {\n    extends: ['airbnb'],\n};\n")),(0,r.kt)("p",null,"Within your root-level ESLint config, you can extend this package to inherit the settings."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title=".eslintrc.js"',title:'".eslintrc.js"'},"module.exports = {\n    extends: 'eslint-config-company',\n};\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"When using this approach, the package must be built and symlinked into ",(0,r.kt)("inlineCode",{parentName:"p"},"node_modules")," ",(0,r.kt)("em",{parentName:"p"},"before")," the\nlinter will run correctly. Take this into account when going down this path!")),(0,r.kt)("h2",{id:"faq"},"FAQ"),(0,r.kt)("h3",{id:"how-to-lint-a-single-file-or-folder"},"How to lint a single file or folder?"),(0,r.kt)("p",null,"Unfortunately, this isn't currently possible, as the ",(0,r.kt)("inlineCode",{parentName:"p"},"eslint")," binary itself requires a file or\nfolder path to operate on, and in the task above we pass ",(0,r.kt)("inlineCode",{parentName:"p"},".")," (current directory). If this was not\npassed, then nothing would be linted."),(0,r.kt)("p",null,"This has the unintended side-effect of not being able to filter down lintable targets by passing\narbitrary file paths. This is something we hope to resolve in the future."),(0,r.kt)("p",null,"To work around this limitation, you can create another lint task."),(0,r.kt)("h3",{id:"should-we-use-overrides"},"Should we use ",(0,r.kt)("inlineCode",{parentName:"h3"},"overrides"),"?"),(0,r.kt)("p",null,"Projects should define their own rules using an ESLint config in their project root. However, if you\nwant to avoid touching many ESLint configs (think migrations), then\n",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/user-guide/configuring/configuration-files#configuration-based-on-glob-patterns"},"overrides in the root"),"\nare a viable option. Otherwise, we highly encourage project-level configs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title=".eslintrc.js"',title:'".eslintrc.js"'},"module.exports = {\n    // ...\n    overrides: [\n        // Only apply to apps \"foo\" and \"bar\", but not others\n        {\n            files: ['apps/foo/**/*', 'apps/bar/**/*'],\n            rules: {\n                'no-magic-numbers': 'off',\n            },\n        },\n    ],\n};\n")))}g.isMDXComponent=!0}}]);