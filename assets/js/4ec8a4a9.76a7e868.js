"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[818],{35318:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>k});var a=n(27378);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,m=r(e,["components","mdxType","originalType","parentName"]),c=p(n),k=i,u=c["".concat(s,".").concat(k)]||c[k]||d[k]||o;return n?a.createElement(u,l(l({ref:t},m),{},{components:n})):a.createElement(u,l({ref:t},m))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,l=new Array(o);l[0]=c;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:i,l[1]=r;for(var p=2;p<o;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},32189:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(27378),i=n(83469),o=n(31792);function l(e){let{to:t}=e;return a.createElement("a",{href:t,target:"_blank",className:"float-right inline-block",style:{marginTop:"-3em"}},a.createElement(o.Z,{icon:i.dT$}))}},9785:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(27378),i=n(9619);function o(e){let{text:t="Required"}=e;return a.createElement(i.Z,{text:t,variant:"failure",className:"ml-2"})}},79022:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(27378),i=n(9619);function o(e){let{header:t,updated:n,version:o}=e;return a.createElement(i.Z,{text:`v${o}`,variant:n?"success":"info",className:t?"absolute right-0 top-1.5":"ml-2"})}},9619:(e,t,n)=>{n.d(t,{Z:()=>r});var a=n(27378),i=n(38944),o=n(31792);const l={failure:"bg-red-100 text-red-900",info:"bg-pink-100 text-pink-900",success:"bg-green-100 text-green-900",warning:"bg-orange-100 text-orange-900"};function r(e){let{className:t,icon:n,text:r,variant:s}=e;return a.createElement("span",{className:(0,i.Z)("inline-flex items-center px-1 py-0.5 rounded text-xs font-bold uppercase",s?l[s]:"bg-gray-100 text-gray-800",t)},n&&a.createElement(o.Z,{icon:n,className:"mr-1"}),r)}},44501:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>p,default:()=>u,frontMatter:()=>s,metadata:()=>m,toc:()=>c});var a=n(25773),i=(n(27378),n(35318)),o=n(32189),l=n(9785),r=n(79022);const s={title:"moon.yml",toc_max_heading_level:6},p=void 0,m={unversionedId:"config/project",id:"config/project",title:"moon.yml",description:"The moon.yml configuration file is not required but can be used to define additional metadata",source:"@site/docs/config/project.mdx",sourceDirName:"config",slug:"/config/project",permalink:"/docs/config/project",draft:!1,editUrl:"https://github.com/moonrepo/moon/tree/master/website/docs/config/project.mdx",tags:[],version:"current",frontMatter:{title:"moon.yml",toc_max_heading_level:6},sidebar:"docs",previous:{title:".moon/tasks...",permalink:"/docs/config/tasks"},next:{title:"template.yml",permalink:"/docs/config/template"}},d={},c=[{value:"<code>dependsOn</code>",id:"dependson",level:2},{value:"Metadata",id:"metadata",level:2},{value:"<code>language</code>",id:"language",level:2},{value:"<code>project</code>",id:"project",level:2},{value:"<code>channel</code>",id:"channel",level:3},{value:"<code>description</code><RequiredLabel />",id:"description",level:3},{value:"<code>maintainers</code>",id:"maintainers",level:3},{value:"<code>name</code>",id:"name",level:3},{value:"<code>owner</code>",id:"owner",level:3},{value:"<code>tags</code>",id:"tags",level:2},{value:"<code>type</code>",id:"type",level:2},{value:"Tasks",id:"tasks",level:2},{value:"<code>env</code>",id:"env",level:2},{value:"<code>fileGroups</code>",id:"filegroups",level:2},{value:"<code>platform</code>",id:"platform",level:2},{value:"<code>tasks</code>",id:"tasks-1",level:2},{value:"<code>command</code><RequiredLabel />",id:"command",level:3},{value:"Special commands",id:"special-commands",level:4},{value:"<code>args</code>",id:"args",level:3},{value:"<code>deps</code>",id:"deps",level:3},{value:"<code>env</code>",id:"env-1",level:3},{value:"<code>inputs</code>",id:"inputs",level:3},{value:"<code>local</code>",id:"local",level:3},{value:"<code>outputs</code>",id:"outputs",level:3},{value:"<code>platform</code>",id:"platform-1",level:3},{value:"<code>options</code>",id:"options",level:3},{value:"<code>affectedFiles</code>",id:"affectedfiles",level:4},{value:"<code>cache</code>",id:"cache",level:4},{value:"<code>envFile</code>",id:"envfile",level:4},{value:"<code>mergeArgs</code>",id:"mergeargs",level:4},{value:"<code>mergeDeps</code>",id:"mergedeps",level:4},{value:"<code>mergeEnv</code>",id:"mergeenv",level:4},{value:"<code>mergeInputs</code>",id:"mergeinputs",level:4},{value:"<code>mergeOutputs</code>",id:"mergeoutputs",level:4},{value:"<code>outputStyle</code>",id:"outputstyle",level:4},{value:'<code>persistent</code><VersionLabel version="1.6.0" />',id:"persistent",level:4},{value:"<code>retryCount</code>",id:"retrycount",level:4},{value:"<code>runDepsInParallel</code>",id:"rundepsinparallel",level:4},{value:"<code>runInCI</code>",id:"runinci",level:4},{value:"<code>runFromWorkspaceRoot</code>",id:"runfromworkspaceroot",level:4},{value:"<code>shell</code>",id:"shell",level:4},{value:"Overrides",id:"overrides",level:2},{value:"<code>toolchain</code>",id:"toolchain",level:2},{value:"<code>node</code>",id:"node",level:3},{value:"<code>version</code>",id:"version",level:4},{value:"<code>rust</code>",id:"rust",level:3},{value:"<code>version</code>",id:"version-1",level:4},{value:"<code>typescript</code>",id:"typescript",level:3},{value:"<code>disabled</code>",id:"disabled",level:4},{value:"<code>routeOutDirToCache</code>",id:"routeoutdirtocache",level:4},{value:"<code>syncProjectReferences</code>",id:"syncprojectreferences",level:4},{value:"<code>syncProjectReferencesToPaths</code>",id:"syncprojectreferencestopaths",level:4},{value:"<code>workspace</code>",id:"workspace",level:2},{value:"<code>inheritedTasks</code>",id:"inheritedtasks",level:3},{value:"<code>exclude</code>",id:"exclude",level:4},{value:"<code>include</code>",id:"include",level:4},{value:"<code>rename</code>",id:"rename",level:4}],k={toc:c};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"moon.yml")," configuration file ",(0,i.kt)("em",{parentName:"p"},"is not required")," but can be used to define additional metadata\nfor a project, override inherited tasks, and more at the project-level. When used, this file must\nexist in a project's root, as configured in ",(0,i.kt)("a",{parentName:"p",href:"./workspace#projects"},(0,i.kt)("inlineCode",{parentName:"a"},"projects")),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml"',title:'"moon.yml"'},"$schema: 'https://moonrepo.dev/schemas/project.json'\n")),(0,i.kt)("h2",{id:"dependson"},(0,i.kt)("inlineCode",{parentName:"h2"},"dependsOn")),(0,i.kt)(o.Z,{to:"/api/types/interface/ProjectConfig#dependsOn",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Explicitly defines ",(0,i.kt)("em",{parentName:"p"},"other")," projects that ",(0,i.kt)("em",{parentName:"p"},"this")," project depends on, primarily when generating the\nproject and task graphs. The most common use case for this is building those projects ",(0,i.kt)("em",{parentName:"p"},"before"),"\nbuilding this one. When defined, this setting requires an array of project names, which are the keys\nfound in the ",(0,i.kt)("a",{parentName:"p",href:"./workspace#projects"},(0,i.kt)("inlineCode",{parentName:"a"},"projects"))," map."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml"',title:'"moon.yml"'},"dependsOn:\n  - 'apiClients'\n  - 'designSystem'\n")),(0,i.kt)("p",null,"A dependency object can also be defined, where a specific ",(0,i.kt)("inlineCode",{parentName:"p"},"scope"),' can be assigned, which accepts\n"production" (default), "development", or "peer".'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml"',title:'"moon.yml"'},"dependsOn:\n  - id: 'apiClients'\n    scope: 'production'\n  - id: 'designSystem'\n    scope: 'peer'\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Learn more about ",(0,i.kt)("a",{parentName:"p",href:"../concepts/project#dependencies"},"implicit and explicit dependencies"),".")),(0,i.kt)("h2",{id:"metadata"},"Metadata"),(0,i.kt)("h2",{id:"language"},(0,i.kt)("inlineCode",{parentName:"h2"},"language")),(0,i.kt)(o.Z,{to:"/api/types/interface/ProjectConfig#language",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"The primary programming language the project is written in. This setting is required for\n",(0,i.kt)("a",{parentName:"p",href:"./tasks"},"task inheritance"),", editor extensions, and more. Supports the following values:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bash")," - A ",(0,i.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Bash_(Unix_shell)"},"Bash")," based project (Unix only)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"batch")," - A ",(0,i.kt)("a",{parentName:"li",href:"https://en.wikibooks.org/wiki/Windows_Batch_Scripting"},"Batch"),"/PowerShell based\nproject (Windows only)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"go")," - A ",(0,i.kt)("a",{parentName:"li",href:"https://go.dev/"},"Go")," based project."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"javascript")," - A ",(0,i.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript"},"JavaScript")," based\nproject."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"php")," - A ",(0,i.kt)("a",{parentName:"li",href:"https://www.php.net"},"PHP")," based project."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"python")," - A ",(0,i.kt)("a",{parentName:"li",href:"https://www.python.org/"},"Python")," based project."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ruby")," - A ",(0,i.kt)("a",{parentName:"li",href:"https://www.ruby-lang.org/en/"},"Ruby")," based project."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rust")," - A ",(0,i.kt)("a",{parentName:"li",href:"https://www.rust-lang.org/"},"Rust")," based project."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"typescript")," - A ",(0,i.kt)("a",{parentName:"li",href:"https://www.typescriptlang.org/"},"TypeScript")," based project."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"unknown")," (default) - When not configured or inferred."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"*")," - A custom language. Values will be converted to kebab-case.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml"',title:'"moon.yml"'},"language: 'javascript'\n\n# Custom\nlanguage: 'kotlin'\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"For convenience, when this setting is not defined, moon will attempt to detect the language based\non configuration files found in the project root. This only applies to non-custom languages!")),(0,i.kt)("h2",{id:"project"},(0,i.kt)("inlineCode",{parentName:"h2"},"project")),(0,i.kt)(o.Z,{to:"/api/types/interface/ProjectConfig#project",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"project")," setting defines metadata about the project itself."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml"',title:'"moon.yml"'},"project:\n  name: 'moon'\n  description: 'A monorepo management tool.'\n  channel: '#moon'\n  owner: 'infra.platform'\n  maintainers: ['miles.johnson']\n")),(0,i.kt)("p",null,"The information listed within ",(0,i.kt)("inlineCode",{parentName:"p"},"project")," is purely informational and primarily displayed within the\nCLI. However, this setting exists for you, your team, and your company, as a means to identify and\norganize all projects. Feel free to build your own tooling around these settings!"),(0,i.kt)("h3",{id:"channel"},(0,i.kt)("inlineCode",{parentName:"h3"},"channel")),(0,i.kt)(o.Z,{to:"/api/types/interface/ProjectMetadataConfig#channel",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"The Slack, Discord, Teams, IRC, etc channel name (with leading #) in which to discuss the project."),(0,i.kt)("h3",{id:"description"},(0,i.kt)("inlineCode",{parentName:"h3"},"description"),(0,i.kt)(l.Z,{mdxType:"RequiredLabel"})),(0,i.kt)(o.Z,{to:"/api/types/interface/ProjectMetadataConfig#description",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"A description of what the project does and aims to achieve. Be as descriptive as possible, as this\nis the kind of information search engines would index on."),(0,i.kt)("h3",{id:"maintainers"},(0,i.kt)("inlineCode",{parentName:"h3"},"maintainers")),(0,i.kt)(o.Z,{to:"/api/types/interface/ProjectMetadataConfig#maintainers",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"A list of people/developers that maintain the project, review code changes, and can provide support.\nCan be a name, email, LDAP name, GitHub username, etc, the choice is yours."),(0,i.kt)("h3",{id:"name"},(0,i.kt)("inlineCode",{parentName:"h3"},"name")),(0,i.kt)(o.Z,{to:"/api/types/interface/ProjectMetadataConfig#name",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"A human readable name of the project. This is ",(0,i.kt)("em",{parentName:"p"},"different")," from the unique project name configured in\n",(0,i.kt)("a",{parentName:"p",href:"./workspace#projects"},(0,i.kt)("inlineCode",{parentName:"a"},"projects")),"."),(0,i.kt)("h3",{id:"owner"},(0,i.kt)("inlineCode",{parentName:"h3"},"owner")),(0,i.kt)(o.Z,{to:"/api/types/interface/ProjectMetadataConfig#owner",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"The team or organization that owns the project. Can be a title, LDAP name, GitHub team, etc. We\nsuggest ",(0,i.kt)("em",{parentName:"p"},"not")," listing people/developers as the owner, use ",(0,i.kt)("a",{parentName:"p",href:"#maintainers"},"maintainers")," instead."),(0,i.kt)("h2",{id:"tags"},(0,i.kt)("inlineCode",{parentName:"h2"},"tags")),(0,i.kt)(o.Z,{to:"/api/types/interface/ProjectMetadataConfig#tags",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Tags are a simple mechanism for categorizing projects. They can be used to group projects together\nfor ",(0,i.kt)("a",{parentName:"p",href:"../commands/query/projects"},"easier querying"),", enforcing of\n",(0,i.kt)("a",{parentName:"p",href:"./workspace#constraints"},"project boundaries and constraints"),",\n",(0,i.kt)("a",{parentName:"p",href:"../concepts/task#inheritance"},"task inheritance"),", and more."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml"',title:'"moon.yml"'},"tags:\n  - 'react'\n  - 'prisma'\n")),(0,i.kt)("h2",{id:"type"},(0,i.kt)("inlineCode",{parentName:"h2"},"type")),(0,i.kt)(o.Z,{to:"/api/types/interface/ProjectMetadataConfig#type",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"The type of project. Supports the following values:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"application")," - A backend, frontend, or CLI application."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"library")," - A self-contained, shareable, and publishable set of code."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tool")," - An internal tool, one-off script, etc."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"unknown")," (default) - When not configured.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml"',title:'"moon.yml"'},"type: 'application'\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Project type is used in task inheritance, constraints and boundaries, editor extensions, and more!")),(0,i.kt)("h2",{id:"tasks"},"Tasks"),(0,i.kt)("h2",{id:"env"},(0,i.kt)("inlineCode",{parentName:"h2"},"env")),(0,i.kt)(o.Z,{to:"/api/types/interface/ProjectConfig#env",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"env")," field is map of strings that are passed as environment variables to ",(0,i.kt)("em",{parentName:"p"},"all tasks")," within the\ncurrent project. Project-level variables will not override task-level variables of the same name."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {1,2}',title:'"moon.yml"',"{1,2}":!0},"env:\n  NODE_ENV: 'production'\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"View the task ",(0,i.kt)("a",{parentName:"p",href:"#env-1"},(0,i.kt)("inlineCode",{parentName:"a"},"env"))," setting for more usage examples and information.")),(0,i.kt)("h2",{id:"filegroups"},(0,i.kt)("inlineCode",{parentName:"h2"},"fileGroups")),(0,i.kt)(o.Z,{to:"/api/types/interface/ProjectConfig#fileGroups",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Defines ",(0,i.kt)("a",{parentName:"p",href:"../concepts/file-group"},"file groups")," to be used by local tasks. By default, this setting\n",(0,i.kt)("em",{parentName:"p"},"is not required")," for the following reasons:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"File groups are an optional feature, and are designed for advanced use cases."),(0,i.kt)("li",{parentName:"ul"},"File groups defined in ",(0,i.kt)("a",{parentName:"li",href:"./tasks"},(0,i.kt)("inlineCode",{parentName:"a"},".moon/tasks.yml"))," will be inherited by all projects.")),(0,i.kt)("p",null,"When defined this setting requires a map, where the key is the file group name, and the value is a\nlist of ",(0,i.kt)("a",{parentName:"p",href:"../concepts/file-pattern"},"globs or paths"),". Globs and paths are\n",(0,i.kt)("a",{parentName:"p",href:"../concepts/file-pattern#project-relative"},"relative to a project")," (even when defined\n",(0,i.kt)("a",{parentName:"p",href:"./tasks"},"globally"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml"',title:'"moon.yml"'},"fileGroups:\n  configs:\n    - '*.config.{js,cjs,mjs}'\n    - '*.json'\n  sources:\n    - 'src/**/*'\n    - 'types/**/*'\n  tests:\n    - 'tests/**/*'\n    - '**/__tests__/**/*'\n  assets:\n    - 'assets/**/*'\n    - 'images/**/*'\n    - 'static/**/*'\n    - '**/*.{scss,css}'\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"The code snippet above is merely an example of file groups. Feel free to use those groups as-is,\nmodify the glob lists, add and remove groups, or implement completely new groups. The choice is\nyours!")),(0,i.kt)("h2",{id:"platform"},(0,i.kt)("inlineCode",{parentName:"h2"},"platform")),(0,i.kt)(o.Z,{to:"/api/types/interface/ProjectConfig#platform",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"The default ",(0,i.kt)("a",{parentName:"p",href:"#platform-1"},(0,i.kt)("inlineCode",{parentName:"a"},"platform"))," for all task's within the current project. When a task's\n",(0,i.kt)("inlineCode",{parentName:"p"},"platform")," has ",(0,i.kt)("em",{parentName:"p"},"not been")," explicitly configured, the platform will fallback to this configured\nvalue, otherwise the platform will be detected from the project's environment."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml"',title:'"moon.yml"'},"platform: 'node'\n")),(0,i.kt)("h2",{id:"tasks-1"},(0,i.kt)("inlineCode",{parentName:"h2"},"tasks")),(0,i.kt)(o.Z,{to:"/api/types/interface/ProjectConfig#tasks",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Tasks are actions that are ran within the context of a ",(0,i.kt)("a",{parentName:"p",href:"../concepts/project"},"project"),", and commonly\nwrap an npm binary or system command. This setting requires a map, where the key is a unique name\nfor the task, and the value is an object of task parameters."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml"',title:'"moon.yml"'},"tasks:\n  format:\n    command: 'prettier'\n  lint:\n    command: 'eslint'\n  test:\n    command: 'jest'\n  typecheck:\n    command: 'tsc'\n")),(0,i.kt)("h3",{id:"command"},(0,i.kt)("inlineCode",{parentName:"h3"},"command"),(0,i.kt)(l.Z,{mdxType:"RequiredLabel"})),(0,i.kt)(o.Z,{to:"/api/types/interface/TaskConfig#command",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"command")," field is the command line to run for the task, including the command name (must be\nfirst) and any optional ",(0,i.kt)("a",{parentName:"p",href:"#args"},"arguments"),". This field is required when ",(0,i.kt)("em",{parentName:"p"},"not")," inheriting a global\ntask of the same name."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {3}',title:'"moon.yml"',"{3}":!0},"tasks:\n  format:\n    # Using a string\n    command: 'prettier --check .'\n    # Using an array\n    command:\n      - 'prettier'\n      - '--check'\n      - '.'\n")),(0,i.kt)("p",null,"By default a task assumes the command name is an npm binary, and if you'd like to reference a system\ncommand, you'll also need to set the ",(0,i.kt)("a",{parentName:"p",href:"#platform"},(0,i.kt)("inlineCode",{parentName:"a"},"platform")),' to "system". We do our best to\nautomatically detect this, but it\'s not accurate in all scenarios.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml"',title:'"moon.yml"'},"tasks:\n  clean:\n    command: 'rm -rf ./dist'\n    platform: 'system'\n")),(0,i.kt)("h4",{id:"special-commands"},"Special commands"),(0,i.kt)("p",null,"For interoperability reasons, the following command names have special handling."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"noop"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"no-op"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"nop"),' - Marks the task as a "no operation". Will not execute a command in the\naction pipeline but can define dependencies.'),(0,i.kt)("li",{parentName:"ul"},"When ",(0,i.kt)("inlineCode",{parentName:"li"},"platform"),' is "deno":',(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Will execute with ",(0,i.kt)("inlineCode",{parentName:"li"},"deno")," binary."))),(0,i.kt)("li",{parentName:"ul"},"When ",(0,i.kt)("inlineCode",{parentName:"li"},"platform"),' is "node":',(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"node"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"npm"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"pnpm"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"yarn")," - Uses the binaries from the toolchain."))),(0,i.kt)("li",{parentName:"ul"},"When ",(0,i.kt)("inlineCode",{parentName:"li"},"platform"),' is "rust":',(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Will execute with ",(0,i.kt)("inlineCode",{parentName:"li"},"cargo")," binary.")))),(0,i.kt)("h3",{id:"args"},(0,i.kt)("inlineCode",{parentName:"h3"},"args")),(0,i.kt)(o.Z,{to:"/api/types/interface/TaskConfig#args",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"args")," field is a collection of ",(0,i.kt)("em",{parentName:"p"},"additional")," arguments to pass to the command line when\nexecuting the task. This field exists purely to provide arguments for\n",(0,i.kt)("a",{parentName:"p",href:"./tasks#tasks"},"inherited tasks"),"."),(0,i.kt)("p",null,"This setting can be defined using a string, or an array of strings. We suggest using arrays when\ndealing with many args, or the args string cannot be parsed easily."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {4,5}',title:'"moon.yml"',"{4,5}":!0},"tasks:\n  test:\n    command: 'jest'\n    # Using a string\n    args: '--color --maxWorkers 3'\n    # Using an array\n    args:\n      - '--color'\n      - '--maxWorkers'\n      - '3'\n")),(0,i.kt)("p",null,"However, for the array approach to work correctly, each argument ",(0,i.kt)("em",{parentName:"p"},"must")," be its own distinct item,\nincluding argument values. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml"',title:'"moon.yml"'},"tasks:\n  test:\n    command: 'jest'\n    args:\n      # Valid\n      - '--maxWorkers'\n      - '3'\n      # Also valid\n      - '--maxWorkers=3'\n      # Invalid\n      - '--maxWorkers 3'\n")),(0,i.kt)("h3",{id:"deps"},(0,i.kt)("inlineCode",{parentName:"h3"},"deps")),(0,i.kt)(o.Z,{to:"/api/types/interface/TaskConfig#deps",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"deps")," field is a list of other tasks (known as ",(0,i.kt)("a",{parentName:"p",href:"../concepts/target"},"targets"),"), either within\nthis project or found in another project, that will be executed ",(0,i.kt)("em",{parentName:"p"},"before")," this task. It achieves this\nby generating a directed task graph based on the project graph."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {4-6}',title:'"moon.yml"',"{4-6}":!0},"tasks:\n  build:\n    command: 'webpack'\n    deps:\n      - 'apiClients:build'\n      - 'designSystem:build'\n      # A task within the current project\n      - 'codegen'\n")),(0,i.kt)("h3",{id:"env-1"},(0,i.kt)("inlineCode",{parentName:"h3"},"env")),(0,i.kt)(o.Z,{to:"/api/types/interface/TaskConfig#env",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"env")," field is map of strings that are passed as environment variables when running the command.\nVariables defined here will take precedence over those loaded with ",(0,i.kt)("a",{parentName:"p",href:"#envfile"},(0,i.kt)("inlineCode",{parentName:"a"},"envFile")),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {4,5}',title:'"moon.yml"',"{4,5}":!0},"tasks:\n  build:\n    command: 'webpack'\n    env:\n      NODE_ENV: 'production'\n")),(0,i.kt)("p",null,"Variables also support substitution using the syntax ",(0,i.kt)("inlineCode",{parentName:"p"},"${VAR_NAME}"),". When using substitution, only\nvariables in the current process can be referenced, and not those currently defined in ",(0,i.kt)("inlineCode",{parentName:"p"},"env"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {4,5}',title:'"moon.yml"',"{4,5}":!0},"tasks:\n  build:\n    command: 'webpack'\n    env:\n      APP_TARGET: '${REGION}-${ENVIRONMENT}'\n")),(0,i.kt)("h3",{id:"inputs"},(0,i.kt)("inlineCode",{parentName:"h3"},"inputs")),(0,i.kt)(o.Z,{to:"/api/types/interface/TaskConfig#inputs",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"inputs")," field is a list of sources that calculate whether to execute this task based on the\nenvironment and files that have been touched since the last time the task has been ran. If ",(0,i.kt)("em",{parentName:"p"},"not"),"\ndefined or inherited, then all files within a project are considered an input (",(0,i.kt)("inlineCode",{parentName:"p"},"**/*"),")."),(0,i.kt)("p",null,"Inputs support the following source types:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Environment variables (must start with a ",(0,i.kt)("inlineCode",{parentName:"li"},"$"),")"),(0,i.kt)("li",{parentName:"ul"},"Files, folders, globs\n(",(0,i.kt)("a",{parentName:"li",href:"../concepts/file-pattern#project-relative"},"project and workspace relative file patterns"),")")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {4-10}',title:'"moon.yml"',"{4-10}":!0},"tasks:\n  lint:\n    command: 'eslint'\n    inputs:\n      # Config files anywhere within the project\n      - '**/.eslintignore'\n      - '**/.eslintrc.js'\n      # Config files at the workspace root\n      - '/.eslintignore'\n      - '/.eslintrc.js'\n      # Environment variables\n      - '$ESLINT_CACHE'\n")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"When using an environment variable, we assume ",(0,i.kt)("em",{parentName:"p"},"it's not defined")," by default, and will trigger an\naffected state when it ",(0,i.kt)("em",{parentName:"p"},"is")," defined. If the environment variable always exists, then the task will\nalways run and bypass the cache.")),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"When using globs, be aware that files that match the glob, but are ignored via ",(0,i.kt)("inlineCode",{parentName:"p"},".gitignore")," (or\nsimilar), will ",(0,i.kt)("em",{parentName:"p"},"not")," be considered an input. To work around this, use explicit file inputs.")),(0,i.kt)("h3",{id:"local"},(0,i.kt)("inlineCode",{parentName:"h3"},"local")),(0,i.kt)(o.Z,{to:"/api/types/interface/TaskConfig#local",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Marks the task as local only. This should primarily be enabled for long-running or never-ending\ntasks, like development servers and watch mode. Defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),' if the task name is "dev",\n"start", or "serve", and ',(0,i.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,i.kt)("p",null,"This is a convenience setting for local development that sets the following task options:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#cache"},(0,i.kt)("inlineCode",{parentName:"a"},"cache"))," -> Turned off"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#outputstyle"},(0,i.kt)("inlineCode",{parentName:"a"},"outputStyle")),' -> Set to "stream"'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#persistent"},(0,i.kt)("inlineCode",{parentName:"a"},"persistent"))," -> Turned on"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#runinci"},(0,i.kt)("inlineCode",{parentName:"a"},"runInCI"))," -> Turned off")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {5}',title:'"moon.yml"',"{5}":!0},"tasks:\n  dev:\n    command: 'webpack server'\n    local: true\n")),(0,i.kt)("h3",{id:"outputs"},(0,i.kt)("inlineCode",{parentName:"h3"},"outputs")),(0,i.kt)(o.Z,{to:"/api/types/interface/TaskConfig#outputs",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"outputs")," field is a list of files and folders (using\n",(0,i.kt)("a",{parentName:"p",href:"../concepts/file-pattern#project-relative"},"project relative file patterns"),") that are ",(0,i.kt)("em",{parentName:"p"},"created")," as a\nresult of executing this task, typically from a build or compilation related task. Outputs are\nnecessary for ",(0,i.kt)("a",{parentName:"p",href:"../concepts/cache"},"incremental caching and hydration"),". If you'd prefer to avoid that\nfunctionality, omit this field."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {4-6}',title:'"moon.yml"',"{4-6}":!0},"tasks:\n  build:\n    command: 'webpack'\n    outputs:\n      # Relative from project root\n      - 'build/'\n")),(0,i.kt)("p",null,"Globs can also be used if you'd like to restrict which files are cached. For example, when building\na JavaScript project, you may want to include ",(0,i.kt)("inlineCode",{parentName:"p"},".js")," files, but exclude ",(0,i.kt)("inlineCode",{parentName:"p"},".map")," and other files."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {4,5}',title:'"moon.yml"',"{4,5}":!0},"tasks:\n  build:\n    command: 'webpack'\n    outputs:\n      - 'build/**/*.js'\n")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"When using globs and moon hydrates an output (a cache hit), all files not matching the glob will be\n",(0,i.kt)("strong",{parentName:"p"},"deleted"),". Ensure that all files critical for the build to function correctly are included.")),(0,i.kt)("h3",{id:"platform-1"},(0,i.kt)("inlineCode",{parentName:"h3"},"platform")),(0,i.kt)(o.Z,{to:"/api/types/interface/TaskConfig#platform",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"platform")," field defines the platform (language runtime) the command runs on, where to locate\nits executable, and which tool to execute it with. By default moon will set to a value based on the\nproject's ",(0,i.kt)("a",{parentName:"p",href:"#language"},(0,i.kt)("inlineCode",{parentName:"a"},"language"))," or default ",(0,i.kt)("a",{parentName:"p",href:"#platform"},(0,i.kt)("inlineCode",{parentName:"a"},"platform")),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deno")," - Command is executed with Deno, or is a Deno binary located in ",(0,i.kt)("inlineCode",{parentName:"li"},"~/.deno/bin"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"node")," - Command is a binary within ",(0,i.kt)("inlineCode",{parentName:"li"},"node_modules")," and will be executed with Node.js."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rust")," - Command is executed with Cargo, or is a Cargo binary located in ",(0,i.kt)("inlineCode",{parentName:"li"},"~/.cargo/bin"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"system")," - Command is expected to exist within the system's environment / user's shell."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"unknown")," - When not configured or inferred.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {4}',title:'"moon.yml"',"{4}":!0},"tasks:\n  env:\n    command: 'printenv'\n    platform: 'system'\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"This field exists because of our ",(0,i.kt)("a",{parentName:"p",href:"../concepts/toolchain"},"toolchain"),", and moon ensuring the correct\ncommand is ran.")),(0,i.kt)("h3",{id:"options"},(0,i.kt)("inlineCode",{parentName:"h3"},"options")),(0,i.kt)(o.Z,{to:"/api/types/interface/TaskConfig#options",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"options")," field is an object of configurable options that can be used to modify the task and its\nexecution. The following fields can be provided, with merge related fields supporting all\n",(0,i.kt)("a",{parentName:"p",href:"../concepts/task#merge-strategies"},"merge strategies"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {6-8}',title:'"moon.yml"',"{6-8}":!0},"tasks:\n  typecheck:\n    command: 'tsc --noEmit'\n    options:\n      mergeArgs: 'replace'\n      runFromWorkspaceRoot: true\n")),(0,i.kt)("h4",{id:"affectedfiles"},(0,i.kt)("inlineCode",{parentName:"h4"},"affectedFiles")),(0,i.kt)(o.Z,{to:"/api/types/interface/TaskOptionsConfig#affectedFiles",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"When enabled and the ",(0,i.kt)("a",{parentName:"p",href:"../run-task#running-based-on-affected-files-only"},(0,i.kt)("inlineCode",{parentName:"a"},"--affected")," option")," is\nprovided, all affected files that match this task's ",(0,i.kt)("a",{parentName:"p",href:"#inputs"},(0,i.kt)("inlineCode",{parentName:"a"},"inputs"))," will be passed as relative\nfile paths as command line arguments, and as a ",(0,i.kt)("inlineCode",{parentName:"p"},"MOON_AFFECTED_FILES")," environment variable. If there\nare no affected files, ",(0,i.kt)("inlineCode",{parentName:"p"},".")," (current directory) will be passed instead for arguments, and an empty\nvalue for the environment variable."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {6}',title:'"moon.yml"',"{6}":!0},"tasks:\n  lint:\n    command: 'eslint'\n    options:\n      affectedFiles: true\n      # Only pass args\n      affectedFiles: 'args'\n      # Only set env var\n      affectedFiles: 'env'\n")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"When using this option, ensure that explicit files or ",(0,i.kt)("inlineCode",{parentName:"p"},".")," ",(0,i.kt)("em",{parentName:"p"},"are not present")," in the ",(0,i.kt)("a",{parentName:"p",href:"#args"},(0,i.kt)("inlineCode",{parentName:"a"},"args")),"\nlist. Furthermore, this functionality will only work if the task's command supports an arbitrary\nlist of files being passed as arguments.")),(0,i.kt)("h4",{id:"cache"},(0,i.kt)("inlineCode",{parentName:"h4"},"cache")),(0,i.kt)(o.Z,{to:"/api/types/interface/TaskOptionsConfig#cache",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Whether to cache the task's execution result using our ",(0,i.kt)("a",{parentName:"p",href:"../concepts/cache#hashing"},"smart hashing"),"\nsystem. If disabled, ",(0,i.kt)("em",{parentName:"p"},"will not")," create a cache hash, and ",(0,i.kt)("em",{parentName:"p"},"will not")," persist a task's\n",(0,i.kt)("a",{parentName:"p",href:"#outputs"},"outputs"),". Defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("p",null,"We suggest disabling caching when defining cleanup tasks, one-off scripts, or file system heavy\noperations."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {6}',title:'"moon.yml"',"{6}":!0},"tasks:\n  clean:\n    command: 'rm -rf ./temp'\n    options:\n      cache: false\n")),(0,i.kt)("h4",{id:"envfile"},(0,i.kt)("inlineCode",{parentName:"h4"},"envFile")),(0,i.kt)(o.Z,{to:"/api/types/interface/TaskOptionsConfig#envFile",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"A boolean or path to a ",(0,i.kt)("inlineCode",{parentName:"p"},".env")," file (also know as dotenv file) that defines a collection of\n",(0,i.kt)("a",{parentName:"p",href:"#env-1"},"environment variables")," for the current task. Variables will be loaded on project creation,\nbut will ",(0,i.kt)("em",{parentName:"p"},"not")," override those defined in ",(0,i.kt)("a",{parentName:"p",href:"#env-1"},(0,i.kt)("inlineCode",{parentName:"a"},"env")),"."),(0,i.kt)("p",null,"Variables defined in the file support value substitution/expansion by wrapping the variable name in\ncurly brackets, such as ",(0,i.kt)("inlineCode",{parentName:"p"},"${VAR_NAME}"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {6}',title:'"moon.yml"',"{6}":!0},"tasks:\n  build:\n    command: 'webpack'\n    options:\n      # Defaults to .env\n      envFile: true\n      # Or\n      envFile: '.env.production'\n      # Or from the workspace root\n      envFile: '/.env.shared'\n")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"File parsing is done using the Rust ",(0,i.kt)("a",{parentName:"p",href:"https://crates.io/crates/dotenvy"},(0,i.kt)("inlineCode",{parentName:"a"},"dotenvy"))," crate, which is\n",(0,i.kt)("em",{parentName:"p"},"different")," than the Node.js ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/dotenv"},(0,i.kt)("inlineCode",{parentName:"a"},"dotenv"))," package. The biggest\ndifferences are around quote handling and variable substitution, so be aware of this!")),(0,i.kt)("h4",{id:"mergeargs"},(0,i.kt)("inlineCode",{parentName:"h4"},"mergeArgs")),(0,i.kt)(o.Z,{to:"/api/types/interface/TaskOptionsConfig#mergeArgs",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"../concepts/task#merge-strategies"},"strategy")," to use when merging the ",(0,i.kt)("a",{parentName:"p",href:"#args"},(0,i.kt)("inlineCode",{parentName:"a"},"args")),' list with\nan inherited task. Defaults to "append".'),(0,i.kt)("h4",{id:"mergedeps"},(0,i.kt)("inlineCode",{parentName:"h4"},"mergeDeps")),(0,i.kt)(o.Z,{to:"/api/types/interface/TaskOptionsConfig#mergeDeps",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"../concepts/task#merge-strategies"},"strategy")," to use when merging the ",(0,i.kt)("a",{parentName:"p",href:"#deps"},(0,i.kt)("inlineCode",{parentName:"a"},"deps")),' list with\nan inherited task. Defaults to "append".'),(0,i.kt)("h4",{id:"mergeenv"},(0,i.kt)("inlineCode",{parentName:"h4"},"mergeEnv")),(0,i.kt)(o.Z,{to:"/api/types/interface/TaskOptionsConfig#mergeEnv",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"../concepts/task#merge-strategies"},"strategy")," to use when merging the ",(0,i.kt)("a",{parentName:"p",href:"#env-1"},(0,i.kt)("inlineCode",{parentName:"a"},"env")),' map with\nan inherited task. Defaults to "append".'),(0,i.kt)("h4",{id:"mergeinputs"},(0,i.kt)("inlineCode",{parentName:"h4"},"mergeInputs")),(0,i.kt)(o.Z,{to:"/api/types/interface/TaskOptionsConfig#mergeInputs",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"../concepts/task#merge-strategies"},"strategy")," to use when merging the ",(0,i.kt)("a",{parentName:"p",href:"#inputs"},(0,i.kt)("inlineCode",{parentName:"a"},"inputs")),' list\nwith an inherited task. Defaults to "append".'),(0,i.kt)("h4",{id:"mergeoutputs"},(0,i.kt)("inlineCode",{parentName:"h4"},"mergeOutputs")),(0,i.kt)(o.Z,{to:"/api/types/interface/TaskOptionsConfig#mergeOutputs",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"../concepts/task#merge-strategies"},"strategy")," to use when merging the ",(0,i.kt)("a",{parentName:"p",href:"#outputs"},(0,i.kt)("inlineCode",{parentName:"a"},"outputs")),' list\nwith an inherited task. Defaults to "append".'),(0,i.kt)("h4",{id:"outputstyle"},(0,i.kt)("inlineCode",{parentName:"h4"},"outputStyle")),(0,i.kt)(o.Z,{to:"/api/types/interface/TaskOptionsConfig#outputStyle",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Controls how stdout/stderr is displayed when the task is ran as a ",(0,i.kt)("em",{parentName:"p"},"transitive target"),". By default,\nthis setting is not defined and defers to the action pipeline, but can be overridden with one of the\nfollowing values:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"buffer")," - Buffers output and displays after the task has exited (either success or failure)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"buffer-only-failure")," - Like ",(0,i.kt)("inlineCode",{parentName:"li"},"buffer"),", but only displays on failures."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"hash")," - Ignores output and only displays the generated ",(0,i.kt)("a",{parentName:"li",href:"../concepts/cache#hashing"},"hash"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"none")," - Ignores output."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"stream")," - Streams output directly to the terminal. Will prefix each line of output with the\ntarget.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {5}',title:'"moon.yml"',"{5}":!0},"tasks:\n  test:\n    # ...\n    options:\n      outputStyle: 'stream'\n")),(0,i.kt)("h4",{id:"persistent"},(0,i.kt)("inlineCode",{parentName:"h4"},"persistent"),(0,i.kt)(r.Z,{version:"1.6.0",mdxType:"VersionLabel"})),(0,i.kt)(o.Z,{to:"/api/types/interface/TaskOptionsConfig#persistent",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Marks the task as persistent (continuously running). Persistent tasks are a special case that are\nhandled differently than non-persistent tasks in the dependency graph. When running a target, all\npersistent tasks are ",(0,i.kt)("em",{parentName:"p"},"ran last")," and ",(0,i.kt)("em",{parentName:"p"},"in parallel"),", after all their dependencies have completed."),(0,i.kt)("p",null,"This is extremely useful for running a server (or a watcher) in the background while other tasks are\nrunning."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {5}',title:'"moon.yml"',"{5}":!0},"tasks:\n  dev:\n    # ...\n    options:\n      persistent: true\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"We suggest using the ",(0,i.kt)("a",{parentName:"p",href:"#local"},(0,i.kt)("inlineCode",{parentName:"a"},"local"))," setting instead, which enables this setting, amongst other\nuseful settings.")),(0,i.kt)("h4",{id:"retrycount"},(0,i.kt)("inlineCode",{parentName:"h4"},"retryCount")),(0,i.kt)(o.Z,{to:"/api/types/interface/TaskOptionsConfig#retryCount",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"The number of attempts the task will retry execution before returning a failure. This is especially\nuseful for flaky tasks. Defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {5}',title:'"moon.yml"',"{5}":!0},"tasks:\n  test:\n    # ...\n    options:\n      retryCount: 3\n")),(0,i.kt)("h4",{id:"rundepsinparallel"},(0,i.kt)("inlineCode",{parentName:"h4"},"runDepsInParallel")),(0,i.kt)(o.Z,{to:"/api/types/interface/TaskOptionsConfig#runDepsInParallel",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Whether to run the task's direct ",(0,i.kt)("a",{parentName:"p",href:"#deps"},(0,i.kt)("inlineCode",{parentName:"a"},"deps"))," in parallel or serial (in order). Defaults to\n",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("p",null,"When disabled, this ",(0,i.kt)("em",{parentName:"p"},"does not")," run dependencies of dependencies in serial, only direct dependencies."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {8}',title:'"moon.yml"',"{8}":!0},"tasks:\n  start:\n    # ...\n    deps:\n      - '~:clean'\n      - '~:build'\n    options:\n      runDepsInParallel: false\n")),(0,i.kt)("h4",{id:"runinci"},(0,i.kt)("inlineCode",{parentName:"h4"},"runInCI")),(0,i.kt)(o.Z,{to:"/api/types/interface/TaskOptionsConfig#runInCI",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Whether to run the task automatically in a CI (continuous integration) environment when affected by\ntouched files, typically through the ",(0,i.kt)("a",{parentName:"p",href:"../commands/ci"},(0,i.kt)("inlineCode",{parentName:"a"},"moon ci"))," command. Defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," unless\nthe ",(0,i.kt)("a",{parentName:"p",href:"#local"},(0,i.kt)("inlineCode",{parentName:"a"},"local"))," setting is disabled, but is ",(0,i.kt)("em",{parentName:"p"},"always")," true when a task defines\n",(0,i.kt)("a",{parentName:"p",href:"#outputs"},(0,i.kt)("inlineCode",{parentName:"a"},"outputs")),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {5}',title:'"moon.yml"',"{5}":!0},"tasks:\n  build:\n    # ...\n    options:\n      runInCI: false\n")),(0,i.kt)("h4",{id:"runfromworkspaceroot"},(0,i.kt)("inlineCode",{parentName:"h4"},"runFromWorkspaceRoot")),(0,i.kt)(o.Z,{to:"/api/types/interface/TaskOptionsConfig#runFromWorkspaceRoot",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Whether to use the workspace root as the working directory when executing a task. Defaults to\n",(0,i.kt)("inlineCode",{parentName:"p"},"false")," and runs from the task's project root."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {5}',title:'"moon.yml"',"{5}":!0},"tasks:\n  typecheck:\n    # ...\n    options:\n      runFromWorkspaceRoot: true\n")),(0,i.kt)("h4",{id:"shell"},(0,i.kt)("inlineCode",{parentName:"h4"},"shell")),(0,i.kt)(o.Z,{to:"/api/types/interface/TaskOptionsConfig#shell",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"For ",(0,i.kt)("a",{parentName:"p",href:"#platform-1"},"system tasks"),", whether to run the command within a shell or not. Defaults to\n",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"On Unix, will derive the shell from the ",(0,i.kt)("inlineCode",{parentName:"li"},"SHELL")," environment variable, or default to ",(0,i.kt)("inlineCode",{parentName:"li"},"/bin/sh"),". The\nshell will be ran using the ",(0,i.kt)("inlineCode",{parentName:"li"},"-c")," option."),(0,i.kt)("li",{parentName:"ul"},"On Windows, will use ",(0,i.kt)("inlineCode",{parentName:"li"},"pwsh.exe")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"powershell.exe"),". The shell will be ran using the ",(0,i.kt)("inlineCode",{parentName:"li"},"-Command"),"\noption, coupled with ",(0,i.kt)("inlineCode",{parentName:"li"},"-"),", so that args are passed via stdin.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {3-5}',title:'"moon.yml"',"{3-5}":!0},"tasks:\n  native:\n    command: 'echo $SHELL'\n    options:\n      shell: true\n")),(0,i.kt)("p",null,"If you'd like to use a different shell, or customize the shell's arguments, you can set ",(0,i.kt)("inlineCode",{parentName:"p"},"shell")," to\nfalse and configure a fully qualified command."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {3-5}',title:'"moon.yml"',"{3-5}":!0},"tasks:\n  native:\n    command: '/bin/zsh -c \"echo $SHELL\"'\n    options:\n      shell: false\n")),(0,i.kt)("h2",{id:"overrides"},"Overrides"),(0,i.kt)("p",null,"Dictates how a project interacts with settings defined at the top-level."),(0,i.kt)("h2",{id:"toolchain"},(0,i.kt)("inlineCode",{parentName:"h2"},"toolchain")),(0,i.kt)(o.Z,{to:"/api/types/interface/ProjectConfig#toolchain",mdxType:"HeadingApiLink"}),(0,i.kt)("h3",{id:"node"},(0,i.kt)("inlineCode",{parentName:"h3"},"node")),(0,i.kt)(o.Z,{to:"/api/types/interface/ProjectToolchainConfig#node",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Configures Node.js for this project and overrides the top-level ",(0,i.kt)("a",{parentName:"p",href:"./toolchain#node"},(0,i.kt)("inlineCode",{parentName:"a"},"node"))," setting.\nCurrently, only the Node.js version can be overridden per-project, not the package manager."),(0,i.kt)("h4",{id:"version"},(0,i.kt)("inlineCode",{parentName:"h4"},"version")),(0,i.kt)("p",null,"Defines the explicit Node.js version to use when ",(0,i.kt)("em",{parentName:"p"},"running tasks")," for this project."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {2,3}',title:'"moon.yml"',"{2,3}":!0},"toolchain:\n  node:\n    version: '12.12.0'\n")),(0,i.kt)("h3",{id:"rust"},(0,i.kt)("inlineCode",{parentName:"h3"},"rust")),(0,i.kt)(o.Z,{to:"/api/types/interface/ProjectToolchainConfig#rust",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Configures Rust for this project and overrides the top-level ",(0,i.kt)("a",{parentName:"p",href:"./toolchain#rust"},(0,i.kt)("inlineCode",{parentName:"a"},"rust"))," setting."),(0,i.kt)("h4",{id:"version-1"},(0,i.kt)("inlineCode",{parentName:"h4"},"version")),(0,i.kt)("p",null,"Defines the explicit Rust version/channel to use when ",(0,i.kt)("em",{parentName:"p"},"running tasks")," for this project."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {2,3}',title:'"moon.yml"',"{2,3}":!0},"toolchain:\n  rust:\n    version: '1.68.0'\n")),(0,i.kt)("h3",{id:"typescript"},(0,i.kt)("inlineCode",{parentName:"h3"},"typescript")),(0,i.kt)(o.Z,{to:"/api/types/interface/ProjectToolchainConfig#typescript",mdxType:"HeadingApiLink"}),(0,i.kt)("h4",{id:"disabled"},(0,i.kt)("inlineCode",{parentName:"h4"},"disabled")),(0,i.kt)(o.Z,{to:"/api/types/interface/ProjectToolchainTypeScriptConfig#disabled",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Disables ",(0,i.kt)("a",{parentName:"p",href:"./toolchain#typescript"},"TypeScript support")," entirely for this project. Defaults to\n",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {2}',title:'"moon.yml"',"{2}":!0},"toolchain:\n  typescript:\n    disabled: true\n")),(0,i.kt)("h4",{id:"routeoutdirtocache"},(0,i.kt)("inlineCode",{parentName:"h4"},"routeOutDirToCache")),(0,i.kt)(o.Z,{to:"/api/types/interface/ProjectToolchainTypeScriptConfig#routeOutDirToCache",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Overrides the workspace-level ",(0,i.kt)("a",{parentName:"p",href:"./toolchain#routeoutdirtocache"},(0,i.kt)("inlineCode",{parentName:"a"},"routeOutDirToCache"))," setting.\nDefaults to undefined."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {2}',title:'"moon.yml"',"{2}":!0},"toolchain:\n  typescript:\n    routeOutDirToCache: false\n")),(0,i.kt)("h4",{id:"syncprojectreferences"},(0,i.kt)("inlineCode",{parentName:"h4"},"syncProjectReferences")),(0,i.kt)(o.Z,{to:"/api/types/interface/ProjectToolchainTypeScriptConfig#syncProjectReferences",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Overrides the workspace-level ",(0,i.kt)("a",{parentName:"p",href:"./toolchain#syncprojectreferences"},(0,i.kt)("inlineCode",{parentName:"a"},"syncProjectReferences"))," setting.\nDefaults to undefined."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {2}',title:'"moon.yml"',"{2}":!0},"toolchain:\n  typescript:\n    syncProjectReferences: false\n")),(0,i.kt)("h4",{id:"syncprojectreferencestopaths"},(0,i.kt)("inlineCode",{parentName:"h4"},"syncProjectReferencesToPaths")),(0,i.kt)(o.Z,{to:"/api/types/interface/ProjectToolchainTypeScriptConfig#syncProjectReferencesToPaths",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Overrides the workspace-level\n",(0,i.kt)("a",{parentName:"p",href:"./toolchain#syncprojectreferencestopaths"},(0,i.kt)("inlineCode",{parentName:"a"},"syncProjectReferencesToPaths"))," setting. Defaults to\nundefined."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {2}',title:'"moon.yml"',"{2}":!0},"toolchain:\n  typescript:\n    syncProjectReferencesToPaths: false\n")),(0,i.kt)("h2",{id:"workspace"},(0,i.kt)("inlineCode",{parentName:"h2"},"workspace")),(0,i.kt)(o.Z,{to:"/api/types/interface/ProjectConfig#workspace",mdxType:"HeadingApiLink"}),(0,i.kt)("h3",{id:"inheritedtasks"},(0,i.kt)("inlineCode",{parentName:"h3"},"inheritedTasks")),(0,i.kt)(o.Z,{to:"/api/types/interface/ProjectWorkspaceConfig#inheritedTasks",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Provides a layer of control when inheriting tasks from ",(0,i.kt)("a",{parentName:"p",href:"./tasks"},(0,i.kt)("inlineCode",{parentName:"a"},".moon/tasks.yml")),"."),(0,i.kt)("h4",{id:"exclude"},(0,i.kt)("inlineCode",{parentName:"h4"},"exclude")),(0,i.kt)("p",null,"The optional ",(0,i.kt)("inlineCode",{parentName:"p"},"exclude")," setting permits a project to exclude specific tasks from being inherited. It\naccepts a list of strings, where each string is the name of a global task to exclude."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {4}',title:'"moon.yml"',"{4}":!0},"workspace:\n  inheritedTasks:\n    # Exclude the inherited `test` task for this project\n    exclude: ['test']\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Exclusion is applied after inclusion and before renaming.")),(0,i.kt)("h4",{id:"include"},(0,i.kt)("inlineCode",{parentName:"h4"},"include")),(0,i.kt)("p",null,"The optional ",(0,i.kt)("inlineCode",{parentName:"p"},"include")," setting permits a project to ",(0,i.kt)("em",{parentName:"p"},"only")," include specific inherited tasks (works\nlike an allow/white list). It accepts a list of strings, where each string is the name of a global\ntask to include."),(0,i.kt)("p",null,"When this field is not defined, the project will inherit all tasks from the global project config."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {4,7-9}',title:'"moon.yml"',"{4,7-9}":!0},"workspace:\n  inheritedTasks:\n    # Include *no* tasks (works like a full exclude)\n    include: []\n\n    # Only include the `lint` and `test` tasks for this project\n    include:\n      - 'lint'\n      - 'test'\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Inclusion is applied before exclusion and renaming.")),(0,i.kt)("h4",{id:"rename"},(0,i.kt)("inlineCode",{parentName:"h4"},"rename")),(0,i.kt)("p",null,"The optional ",(0,i.kt)("inlineCode",{parentName:"p"},"rename")," setting permits a project to rename the inherited task within the current\nproject. It accepts a map of strings, where the key is the original name (found in the global\nproject config), and the value is the new name to use."),(0,i.kt)("p",null,"For example, say we have 2 tasks in the global project config called ",(0,i.kt)("inlineCode",{parentName:"p"},"buildPackage")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"buildApplication"),", but we only need 1, and since we're an application, we should omit and rename."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml" {4,5}',title:'"moon.yml"',"{4,5}":!0},"workspace:\n  inheritedTasks:\n    exclude: ['buildPackage']\n    rename:\n      buildApplication: 'build'\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Renaming occurs after inclusion and exclusion.")))}u.isMDXComponent=!0}}]);