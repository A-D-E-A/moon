"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7937],{5318:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9511:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return u}});var a=n(5773),r=n(808),o=(n(7378),n(5318)),i=["components"],s={title:"FAQ"},l=void 0,p={unversionedId:"faq",id:"faq",title:"FAQ",description:"General",source:"@site/docs/faq.mdx",sourceDirName:".",slug:"/faq",permalink:"/docs/faq",draft:!1,editUrl:"https://github.com/moonrepo/moon/tree/master/website/docs/faq.mdx",tags:[],version:"current",frontMatter:{title:"FAQ"},sidebar:"docs",previous:{title:"Terminology",permalink:"/docs/terminology"}},c={},u=[{value:"General",id:"general",level:2},{value:"Will moon support other languages besides JavaScript?",id:"will-moon-support-other-languages-besides-javascript",level:3},{value:"What should be considered the &quot;source of truth&quot;?",id:"what-should-be-considered-the-source-of-truth",level:3},{value:"Action runner",id:"action-runner",level:2},{value:"What is <code>SetupToolchain</code>, <code>InstallNodeDeps</code>, <code>RunTarget</code>, etc?",id:"what-is-setuptoolchain-installnodedeps-runtarget-etc",level:3},{value:"Projects &amp; tasks",id:"projects--tasks",level:2},{value:"How to pipe tasks?",id:"how-to-pipe-tasks",level:3},{value:"JavaScript ecosystem",id:"javascript-ecosystem",level:2},{value:"Can we use <code>package.json</code> scripts?",id:"can-we-use-packagejson-scripts",level:3},{value:"Can moon version/publish packages?",id:"can-moon-versionpublish-packages",level:3}],d={toc:u};function m(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"general"},"General"),(0,o.kt)("h3",{id:"will-moon-support-other-languages-besides-javascript"},"Will moon support other languages besides JavaScript?"),(0,o.kt)("p",null,"Yes! Although we're focusing right now on JavaScript (and TypeScript, Node.js), we've designed moon\nto be language agnostic and easily pluggable in the future."),(0,o.kt)("p",null,"If we're to guess which language would be next, it would most likely be Ruby to support React Native\nbased applications."),(0,o.kt)("h3",{id:"what-should-be-considered-the-source-of-truth"},'What should be considered the "source of truth"?'),(0,o.kt)("p",null,"If you're a frontend developer, you'll assume that a ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," is the source of truth for a\nproject, as it defines scripts, dependencies, and repo-local relations. While true, this breaks down\nwith additional tooling, like TypeScript project references, as now you must maintain\n",(0,o.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," as well as ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json"),". The risk of these falling out of sync is high."),(0,o.kt)("p",null,"This problem is further exacerbated by more tooling, or additional programming languages. What if\nyour frontend project is dependent on a backend project? This isn't easily modeled in\n",(0,o.kt)("inlineCode",{parentName:"p"},"package.json"),". What if the backend project needs to be built and ran before running the frontend\nproject? Again, while not impossible, it's quite cumbersome to model in ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," scripts. So\non and so forth."),(0,o.kt)("p",null,"moon aims to solve this with a different approach, by standardizing all projects in the workspace on\n",(0,o.kt)("a",{parentName:"p",href:"./config/project"},(0,o.kt)("inlineCode",{parentName:"a"},"project.yml")),". With this, the ",(0,o.kt)("inlineCode",{parentName:"p"},"project.yml")," is the source of truth for each\nproject, and provides us with the following:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The configuration is language agnostic. All projects are configured in a similar manner."),(0,o.kt)("li",{parentName:"ul"},"Tasks can reference other tasks easily. For example, npm scripts referencing rake tasks, and vice\nverse, is a non-ideal experience."),(0,o.kt)("li",{parentName:"ul"},"Dependencies defined with ",(0,o.kt)("a",{parentName:"li",href:"./config/project#dependson"},(0,o.kt)("inlineCode",{parentName:"a"},"dependsOn"))," use moon project identifiers,\nand not language specific semantics. This field also easily populates the dependency/project\ngraphs."),(0,o.kt)("li",{parentName:"ul"},"For JavaScript projects:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"package.json")," dependencies (via ",(0,o.kt)("inlineCode",{parentName:"li"},"dependsOn"),") are kept in sync when\n",(0,o.kt)("a",{parentName:"li",href:"./config/workspace#syncprojectworkspacedependencies"},(0,o.kt)("inlineCode",{parentName:"a"},"node.syncProjectWorkspaceDependencies")),"\nis enabled."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"tsconfig.json")," project references (via ",(0,o.kt)("inlineCode",{parentName:"li"},"dependsOn"),") are kept in sync when\n",(0,o.kt)("a",{parentName:"li",href:"./config/workspace#syncprojectreferences"},(0,o.kt)("inlineCode",{parentName:"a"},"typescript.syncProjectReferences"))," is enabled.")))),(0,o.kt)("p",null,"By using moon as the source of truth, we can ensure a healthy repository, by accurately keeping\neverything in sync, and modifying project/language configuration to operate effectively."),(0,o.kt)("h2",{id:"action-runner"},"Action runner"),(0,o.kt)("h3",{id:"what-is-setuptoolchain-installnodedeps-runtarget-etc"},"What is ",(0,o.kt)("inlineCode",{parentName:"h3"},"SetupToolchain"),", ",(0,o.kt)("inlineCode",{parentName:"h3"},"InstallNodeDeps"),", ",(0,o.kt)("inlineCode",{parentName:"h3"},"RunTarget"),", etc?"),(0,o.kt)("p",null,"When we run a ",(0,o.kt)("a",{parentName:"p",href:"./concepts/task"},"task"),", we generate a dependency graph of nodes, known as actions.\nThese labels are the actions in the graph, and break down as follows:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"SetupToolchain")," - Sets up the ",(0,o.kt)("a",{parentName:"li",href:"./concepts/toolchain"},"toolchain"),". Required for all other actions,\nso acts as the root node."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"InstallNodeDeps")," - Installs Node.js dependencies (",(0,o.kt)("inlineCode",{parentName:"li"},"node_modules"),") in the workspace root."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"InstallSystemDeps")," - Currently a no operation."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"SyncNodeProject")," - When a project's ",(0,o.kt)("a",{parentName:"li",href:"./config/project#language"},(0,o.kt)("inlineCode",{parentName:"a"},"language")),' is "javascript" or\n"typescript". Will sync ',(0,o.kt)("inlineCode",{parentName:"li"},"package.json")," dependencies and ",(0,o.kt)("inlineCode",{parentName:"li"},"tsconfig.json")," project references."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"SyncSystemProject")," - Currently a no operation. Is created when a project's\n",(0,o.kt)("a",{parentName:"li",href:"./config/project#language"},(0,o.kt)("inlineCode",{parentName:"a"},"language"))," does not require syncing."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"RunTarget")," - The common action. This runs the target task within a project.")),(0,o.kt)("h2",{id:"projects--tasks"},"Projects & tasks"),(0,o.kt)("h3",{id:"how-to-pipe-tasks"},"How to pipe tasks?"),(0,o.kt)("p",null,"Piping the output of a task to another task, whether via stdin or through ",(0,o.kt)("inlineCode",{parentName:"p"},"inputs"),", is currently not\npossible. However, you ",(0,o.kt)("em",{parentName:"p"},"could")," execute a custom bash script that does the piping for you, for\nexample:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="scripts/pipe.sh"',title:'"scripts/pipe.sh"'},"#!/usr/bin/env bash\nmoon project foo --json | jq ...\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="project.yml"',title:'"project.yml"'},"tasks:\n    pipe:\n        command: 'bash'\n        args: './scripts/pipe.sh'\n        type: 'system'\n")),(0,o.kt)("h2",{id:"javascript-ecosystem"},"JavaScript ecosystem"),(0,o.kt)("h3",{id:"can-we-use-packagejson-scripts"},"Can we use ",(0,o.kt)("inlineCode",{parentName:"h3"},"package.json")," scripts?"),(0,o.kt)("p",null,"We encourage everyone to define tasks in a ",(0,o.kt)("a",{parentName:"p",href:"./config/project#tasks"},(0,o.kt)("inlineCode",{parentName:"a"},"project.yml"))," file, as it\nallows for additional metadata like ",(0,o.kt)("inlineCode",{parentName:"p"},"inputs"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"outputs"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"options"),", and more. However, if you'd like\nto keep using ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," scripts, you'll still need to define tasks that run the script, like\nso:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="project.yml"',title:'"project.yml"'},"tasks:\n    lint:\n        command: 'npm'\n        args: 'run lint'\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"We are working on a handful of features that will automate and infer this entire process. Until\nthen, everything will need to be manually defined.")),(0,o.kt)("p",null,"On top of the increased overhead, relying on ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," scripts incurs the following risks and\ndisadvantages unless explicitly configured:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A change to every project relative file will mark the task as affected, even those not necessary\nfor the task, as ",(0,o.kt)("inlineCode",{parentName:"li"},"inputs")," default to ",(0,o.kt)("inlineCode",{parentName:"li"},"**/*"),". Granular input control is lost."),(0,o.kt)("li",{parentName:"ul"},"A change to workspace relative files ",(0,o.kt)("em",{parentName:"li"},"will not")," mark the task as affected. For example, a change\nto ",(0,o.kt)("inlineCode",{parentName:"li"},"/prettier.config.js")," would not be detected for a ",(0,o.kt)("inlineCode",{parentName:"li"},"npm run format")," script."),(0,o.kt)("li",{parentName:"ul"},"Build/bundle outputs will not be cached and persisted via a hash, as ",(0,o.kt)("inlineCode",{parentName:"li"},"outputs")," defaults to an\nempty list."),(0,o.kt)("li",{parentName:"ul"},"All tasks will run in CI by default, even those that are long-running or never complete\n(development servers, etc).")),(0,o.kt)("h3",{id:"can-moon-versionpublish-packages"},"Can moon version/publish packages?"),(0,o.kt)("p",null,"At this time, no, as we're focusing on the build and test aspect of development. With that being\nsaid, this is something we'd like to support first-class in the future, but until then, we suggest\nthe following popular tools:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://yarnpkg.com/features/release-workflow"},"Yarn releases")," (requires >= v2)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/changesets/changesets"},"Changesets")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/lerna/lerna"},"Lerna"))))}m.isMDXComponent=!0}}]);