"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[55649],{38986:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var t=o(24246),s=o(71670);const i={title:"Plugins"},r=void 0,l={id:"proto/plugins",title:"Plugins",description:"proto supports a pluggable architecture as a means for consumers to integrate and manage custom",source:"@site/docs/proto/plugins.mdx",sourceDirName:"proto",slug:"/proto/plugins",permalink:"/docs/proto/plugins",draft:!1,unlisted:!1,editUrl:"https://github.com/moonrepo/moon/tree/master/website/docs/proto/plugins.mdx",tags:[],version:"current",frontMatter:{title:"Plugins"},sidebar:"proto",previous:{title:"Supported tools",permalink:"/docs/proto/tools"},next:{title:"TOML",permalink:"/docs/proto/toml-plugin"}},a={},c=[{value:"Enabling plugins",id:"enabling-plugins",level:2},{value:"<code>source:</code>",id:"source",level:3},{value:"<code>github:</code>",id:"github",level:3},{value:"Creating plugins",id:"creating-plugins",level:2}];function p(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["proto supports a pluggable architecture as a means for consumers to integrate and manage custom\ntools (languages, CLIs, etc) within proto's toolchain. It's not possible for proto to support\n",(0,t.jsx)(n.em,{children:"everything"})," in core directly, so plugins are a way for the community to extend the toolchain to\ntheir needs."]}),"\n",(0,t.jsx)(n.h2,{id:"enabling-plugins",children:"Enabling plugins"}),"\n",(0,t.jsxs)(n.p,{children:["Plugins can be enabled by configuring them in\n",(0,t.jsxs)(n.a,{href:"./config#plugins",children:[(0,t.jsx)(n.code,{children:".prototools"})," or ",(0,t.jsx)(n.code,{children:"~/.proto/config.toml"})]})," files, within the ",(0,t.jsx)(n.code,{children:"[plugins]"})," section.\nThe map key is the plugin name ",(0,t.jsx)(n.em,{children:"in kebab-case"}),", which is used as the binary/tool name in proto, and\nalso the name for configuration and cache purposes. The map value is a plugin locator string that\ndefines a scope and source location."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",metastring:'title=".prototools"',children:'[plugins]\n<id> = "<scope>:<location>"\n'})}),"\n",(0,t.jsx)(n.p,{children:"The following locator patterns are supported:"}),"\n",(0,t.jsx)(n.h3,{id:"source",children:(0,t.jsx)(n.code,{children:"source:"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"source:"})," locator scope supports both secure URLs and file system paths (relative from the\nconfig file). Files will be used as-is, while URLs will be downloaded to ",(0,t.jsx)(n.code,{children:"~/.proto/plugins"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",metastring:'title=".prototools"',children:'[plugins]\nfile-tool = "source:plugins/example.wasm"\nurl-tool = "source:https://domain.com/path/to/plugins/example.wasm"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"github",children:(0,t.jsx)(n.code,{children:"github:"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"github:"})," locator scope can be used to target and download an asset from a specific GitHub\nrelease. The location must be an organization + repository slug (owner/repo), and the release ",(0,t.jsx)(n.em,{children:"must\nhave"})," a ",(0,t.jsx)(n.code,{children:".wasm"})," asset available to download."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",metastring:'title=".prototools"',children:'[plugins]\ngithub-tool = "github:moonrepo/example-repo"\n'})}),"\n",(0,t.jsx)(n.p,{children:"By default, the latest release will be used and cached for 7 days. If you'd prefer to target a\nspecific release, append the release tag to the end of the location."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",metastring:'title=".prototools"',children:'[plugins]\ngithub-tool = "github:moonrepo/example-repo@v1.2.3"\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This strategy is powered by the ",(0,t.jsx)(n.a,{href:"https://api.github.com/",children:"GitHub API"})," and is subject to rate\nlimiting. If running in a CI environment, we suggesting setting a ",(0,t.jsx)(n.code,{children:"GITHUB_TOKEN"})," environment\nvariable to authorize API requests with. If using GitHub Actions, it's as simple as:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# In some job or step...\nenv:\n  GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'\n"})}),"\n",(0,t.jsx)(n.h2,{id:"creating-plugins",children:"Creating plugins"}),"\n",(0,t.jsxs)(n.p,{children:["To ease the plugin development process, proto supports 2 types of plugins, a\n",(0,t.jsx)(n.a,{href:"./toml-plugin",children:"TOML based plugin"})," for basic use cases, and a ",(0,t.jsx)(n.a,{href:"./wasm-plugin",children:"WASM based plugin"})," for\nadvanced use cases."]})]})}function d(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},71670:(e,n,o)=>{o.d(n,{Z:()=>l,a:()=>r});var t=o(27378);const s={},i=t.createContext(s);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);