"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6154],{35318:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var l=n(27378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,l,a=function(e,t){if(null==e)return{};var n,l,a={},o=Object.keys(e);for(l=0;l<o.length;l++)n=o[l],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(l=0;l<o.length;l++)n=o[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=l.createContext({}),p=function(e){var t=l.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=p(e.components);return l.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},g=l.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),g=p(n),c=a,d=g["".concat(s,".").concat(c)]||g[c]||m[c]||o;return n?l.createElement(d,r(r({ref:t},u),{},{components:n})):l.createElement(d,r({ref:t},u))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=g;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,r[1]=i;for(var p=2;p<o;p++)r[p]=n[p];return l.createElement.apply(null,r)}return l.createElement.apply(null,n)}g.displayName="MDXCreateElement"},62265:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var l=n(25773),a=(n(27378),n(35318));const o={slug:"proto-v0.15",title:"proto v0.15 - Install and uninstall globals",authors:["milesj"],tags:["proto","wasm","plugin","global"]},r=void 0,i={permalink:"/blog/proto-v0.15",editUrl:"https://github.com/moonrepo/moon/tree/master/website/blog/2023-08-23_proto-v0.15.mdx",source:"@site/blog/2023-08-23_proto-v0.15.mdx",title:"proto v0.15 - Install and uninstall globals",description:"This is a small release that adds support for uninstalling globals, and improves our WASM APIs.",date:"2023-08-23T00:00:00.000Z",formattedDate:"August 23, 2023",tags:[{label:"proto",permalink:"/blog/tags/proto"},{label:"wasm",permalink:"/blog/tags/wasm"},{label:"plugin",permalink:"/blog/tags/plugin"},{label:"global",permalink:"/blog/tags/global"}],readingTime:1.48,hasTruncateMarker:!0,authors:[{name:"Miles Johnson",title:"Founder, developer",url:"https://github.com/milesj",imageURL:"/img/authors/miles.jpg",key:"milesj"}],frontMatter:{slug:"proto-v0.15",title:"proto v0.15 - Install and uninstall globals",authors:["milesj"],tags:["proto","wasm","plugin","global"]},nextItem:{title:"moon v1.12 - Task improvements: extending, interactive, and more",permalink:"/blog/moon-v1.12"}},s={authorsImageUrls:[void 0]},p=[{value:"Uninstall global dependencies",id:"uninstall-global-dependencies",level:2},{value:"WASM functions",id:"wasm-functions",level:3},{value:"TOML setting",id:"toml-setting",level:3},{value:"Improved WASM documentation",id:"improved-wasm-documentation",level:2},{value:"Other changes",id:"other-changes",level:2}],u={toc:p};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,l.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This is a small release that adds support for uninstalling globals, and improves our WASM APIs."),(0,a.kt)("h2",{id:"uninstall-global-dependencies"},"Uninstall global dependencies"),(0,a.kt)("p",null,"proto has supported ",(0,a.kt)("a",{parentName:"p",href:"./proto-v0.5"},"installing globals since v0.5"),", but there's been no way to\nuninstall an existing global, until now! In this release, we're introducing the\n",(0,a.kt)("a",{parentName:"p",href:"/docs/proto/commands/uninstall-global"},(0,a.kt)("inlineCode",{parentName:"a"},"proto uninstall-global"))," command, which will do just that!\nThe API is exactly the same as its installation counter-part."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"proto install-global node prettier\n\n# On second thought, nevermind...\nproto uninstall-global node prettier\n")),(0,a.kt)("h3",{id:"wasm-functions"},"WASM functions"),(0,a.kt)("p",null,"Implementing this command was rather straight forward, but most of the work went into supporting\n",(0,a.kt)("a",{parentName:"p",href:"/docs/proto/wasm-plugin#installing-and-uninstalling-globals"},(0,a.kt)("inlineCode",{parentName:"a"},"install_global")," and ",(0,a.kt)("inlineCode",{parentName:"a"},"uninstall_global")),"\nfunctions for WASM plugins, and then updating all existing plugins! For those of you writing your\nown plugins, here's an example of what the Rust code looks like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'#[plugin_fn]\npub fn install_global(\n    Json(input): Json<InstallGlobalInput>,\n) -> FnResult<Json<InstallGlobalOutput>> {\n    let result = exec_command!(inherit, "npm", ["install", "--global", &input.dependency]);\n\n    Ok(Json(InstallGlobalOutput::from_exec_command(result)))\n}\n')),(0,a.kt)("h3",{id:"toml-setting"},"TOML setting"),(0,a.kt)("p",null,"We've also updated our TOML plugins to support uninstalling globals through the new\n",(0,a.kt)("a",{parentName:"p",href:"/docs/proto/toml-plugin#global-packages"},(0,a.kt)("inlineCode",{parentName:"a"},"globals.uninstall-args"))," setting. Hopefully the name is\nself explanatory, but it's a list of arguments passed to the tool's binary, that'll uninstall the\nglobal."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml"},'# ...\n\n[globals]\ninstall-args = ["install", "--global", "{dependency}"]\nuninstall-args = ["uninstall", "--global", "{dependency}"]\n')),(0,a.kt)("h2",{id:"improved-wasm-documentation"},"Improved WASM documentation"),(0,a.kt)("p",null,"With each release we're slowly stabilizing the WASM and TOML APIs for an official v1 release (which\nis soon), and with this, it requires more documentation. As part of this release, we've done a giant\npolish pass on our WASM documentation, and have included the following sections:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/proto/wasm-plugin#virtual-paths"},"Virtual paths")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/proto/wasm-plugin#host-environment"},"Host environment")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/proto/wasm-plugin#host-functions"},"Host functions")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/proto/wasm-plugin#tool-id-and-context"},"Tool ID and context")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/proto/wasm-plugin#installing-and-uninstalling-globals"},"Installing and uninstalling globals"))),(0,a.kt)("h2",{id:"other-changes"},"Other changes"),(0,a.kt)("p",null,"View the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/moonrepo/proto/releases/tag/v0.15.0"},"official release")," for a full list\nof changes."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Major WASM API improvements, including backwards incompatible changes.")))}m.isMDXComponent=!0}}]);