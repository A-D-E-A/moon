"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[26],{35318:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var a=n(27378);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,m=r(e,["components","mdxType","originalType","parentName"]),d=p(n),u=i,h=d["".concat(s,".").concat(u)]||d[u]||c[u]||o;return n?a.createElement(h,l(l({ref:t},m),{},{components:n})):a.createElement(h,l({ref:t},m))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,l=new Array(o);l[0]=d;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:i,l[1]=r;for(var p=2;p<o;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},26648:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>r,toc:()=>p});var a=n(25773),i=(n(27378),n(35318));const o={title:"TOML plugin",sidebar_label:"TOML",toc_max_heading_level:5},l=void 0,r={unversionedId:"proto/toml-plugin",id:"proto/toml-plugin",title:"TOML plugin",description:"The TOML plugin is by design, very simple. It's a TOML file that describes a schema for the tool,",source:"@site/docs/proto/toml-plugin.mdx",sourceDirName:"proto",slug:"/proto/toml-plugin",permalink:"/docs/proto/toml-plugin",draft:!1,editUrl:"https://github.com/moonrepo/moon/tree/master/website/docs/proto/toml-plugin.mdx",tags:[],version:"current",frontMatter:{title:"TOML plugin",sidebar_label:"TOML",toc_max_heading_level:5},sidebar:"proto",previous:{title:"Plugins",permalink:"/docs/proto/plugins"},next:{title:"WASM (experimental)",permalink:"/docs/proto/wasm-plugin"}},s={},p=[{value:"Create a plugin",id:"create-a-plugin",level:2},{value:"Platform variations",id:"platform-variations",level:3},{value:"Downloading and installing",id:"downloading-and-installing",level:3},{value:"Global packages",id:"global-packages",level:4},{value:"Resolving versions",id:"resolving-versions",level:3},{value:"Git tags",id:"git-tags",level:4},{value:"JSON manifest",id:"json-manifest",level:4},{value:"Detecting versions",id:"detecting-versions",level:3}],m={toc:p};function c(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The TOML plugin is by design, very simple. It's a TOML file that describes a schema for the tool,\nhow it should be installed, and how it should be invoked. Since this is a static configuration file,\nit does not support any logic or complex behavior, and is merely for simple and common use cases,\nlike CLIs."),(0,i.kt)("h2",{id:"create-a-plugin"},"Create a plugin"),(0,i.kt)("p",null,"Let's start by creating a new plugin, and defining the ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," fields. The type can either\nbe ",(0,i.kt)("inlineCode",{parentName:"p"},"language"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"dependency-manager"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"cli"),". For this example, we'll create a plugin for our fake\nproduct called Protostar, a CLI tool."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml",metastring:'title="protostar.toml"',title:'"protostar.toml"'},'name = "Protostar"\ntype = "cli"\n')),(0,i.kt)("h3",{id:"platform-variations"},"Platform variations"),(0,i.kt)("p",null,"Native tools are often platform specific, and proto supports this by allowing you to define\nvariations based on operating system using the ",(0,i.kt)("inlineCode",{parentName:"p"},"[platform]")," section. For non-native tools, this\nsection can typically be skipped."),(0,i.kt)("p",null,"This section requires a mapping of Rust\n",(0,i.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/std/env/consts/constant.OS.html"},(0,i.kt)("inlineCode",{parentName:"a"},"OS")," strings")," to platform settings. The\nfollowing settings are available:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"archive-prefix")," - If the tool is distributed as an archive (zip, tar, etc), this is the name of\nthe direct folder within the archive that contains the tool, and will be removed when unpacking\nthe archive. If there is no prefix folder within the archive, this setting can be omitted."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bin-path")," - The path to the executable binary within the archive (without the prefix). If the\ntool is distributed as a single binary, this setting can be typically omitted."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"checksum-file")," - Name of the checksum file to verify the downloaded file with. If the tool does\nnot support checksum verification, this setting can be omitted."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"download-file")," (required) - Name of the file to download.\n",(0,i.kt)("a",{parentName:"li",href:"#downloading-and-installing"},"Learn more about downloading"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml",metastring:'title="protostar.toml"',title:'"protostar.toml"'},'# ...\n\n[platform.linux]\narchive-prefix = "protostar-linux"\nbin-path = "bins/protostar"\nchecksum-file = "protostar-{arch}-unknown-linux-{libc}.sha256"\ndownload-file = "protostar-{arch}-unknown-linux-{libc}.tar.gz"\n\n[platform.macos]\narchive-prefix = "protostar-macos"\nbin-path = "bins/protostar"\nchecksum-file = "protostar-{arch}-apple-darwin.sha256"\ndownload-file = "protostar-{arch}-apple-darwin.tar.xz"\n\n[platform.windows]\narchive-prefix = "protostar-windows"\nbin-path = "bins/protostar.exe"\nchecksum-file = "protostar-{arch}-pc-windows-msvc.sha256"\ndownload-file = "protostar-{arch}-pc-windows-msvc.zip"\n')),(0,i.kt)("p",null,"You may have noticed tokens above, like ",(0,i.kt)("inlineCode",{parentName:"p"},"{arch}"),". These are special tokens that are replaced with a\ndynamic value at runtime, based on the current host machine executing the code. The following tokens\nare available:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"{version}")," - The currently resolved version, as a fully-qualifed semantic version:\n",(0,i.kt)("inlineCode",{parentName:"li"},"major.minor.patch"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"{arch}")," - The architecture of the host machine, like ",(0,i.kt)("inlineCode",{parentName:"li"},"x86_64"),". These values map to Rust's\n",(0,i.kt)("a",{parentName:"li",href:"https://doc.rust-lang.org/std/env/consts/constant.ARCH.html"},(0,i.kt)("inlineCode",{parentName:"a"},"ARCH")," constant"),", but can be\ncustomized with ",(0,i.kt)("a",{parentName:"li",href:"#downloading-and-installing"},(0,i.kt)("inlineCode",{parentName:"a"},"install.arch")),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"{os}")," - The operating system of the host machine, like ",(0,i.kt)("inlineCode",{parentName:"li"},"windows"),". These values map to Rust's\n",(0,i.kt)("a",{parentName:"li",href:"https://doc.rust-lang.org/std/env/consts/constant.OS.html"},(0,i.kt)("inlineCode",{parentName:"a"},"OS")," constant"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"{libc}")," - For Linux machines, this is the current libc implementation, either ",(0,i.kt)("inlineCode",{parentName:"li"},"gnu")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"musl"),".")),(0,i.kt)("h3",{id:"downloading-and-installing"},"Downloading and installing"),(0,i.kt)("p",null,"A TOML plugin ",(0,i.kt)("em",{parentName:"p"},"only")," supports downloading pre-built tools, typically as an archive, and does ",(0,i.kt)("em",{parentName:"p"},"not"),"\nsupport building from source. The ",(0,i.kt)("inlineCode",{parentName:"p"},"[install]")," section can be used to configure how the tool should\nbe downloaded and installed into the toolchain. The following settings are available:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"arch")," - A mapping of Rust\n",(0,i.kt)("a",{parentName:"li",href:"https://doc.rust-lang.org/std/env/consts/constant.ARCH.html"},(0,i.kt)("inlineCode",{parentName:"a"},"ARCH")," strings")," to custom values for\nthe ",(0,i.kt)("inlineCode",{parentName:"li"},"{arch}")," token. This is useful if the tool has different terminology."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"checksum-url")," - A secure URL to download the checksum file for verification. If the tool does not\nsupport checksum verification, this setting can be omitted."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"download-url")," (required) - A secure URL to download the tool/archive.")),(0,i.kt)("p",null,"The URL settings support ",(0,i.kt)("inlineCode",{parentName:"p"},"{checksum_file}")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"{download_file}")," tokens, which will be replaced with\nthe values from the ",(0,i.kt)("inlineCode",{parentName:"p"},"[platform]")," section."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml",metastring:'title="protostar.toml"',title:'"protostar.toml"'},'# ...\n\n[install]\nchecksum-url = "https://github.com/moonrepo/protostar/releases/download/v{version}/{checksum_file}"\ndownload-url = "https://github.com/moonrepo/protostar/releases/download/v{version}/{download_file}"\n\n[install.arch]\naarch64 = "arm64"\nx86_64 = "x64"\n')),(0,i.kt)("h4",{id:"global-packages"},"Global packages"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"[globals]")," sections can be configured that dictates the installation of global binaries for the\ntool. If the tool does not support globals (is not a programming language), these settings can be\nomitted."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lookup-dirs")," - A list of directories to locate and install the global binaries into. This setting\nsupports interpolating environment variables via the syntax ",(0,i.kt)("inlineCode",{parentName:"li"},"$ENV_VAR"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"install-args")," - A list of CLI arguments to pass to the tool to install a global binary. The name\nof the binary can be inserted using the ",(0,i.kt)("inlineCode",{parentName:"li"},"{dependency}")," token."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"package-prefix")," - A string that all package names are prefixed with. The prefix will be removed\nwhen filtering/listing packages. For example, Cargo/Rust binaries are prefixed wih ",(0,i.kt)("inlineCode",{parentName:"li"},"cargo-"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml",metastring:'title="protostar.toml"',title:'"protostar.toml"'},'# ...\n\n[globals]\nlookup-dirs = ["$PROTOSTAR_HOME/bin", "$HOME/.protostar/bin"]\ninstall-args = ["install", "--force", "{dependency}"]\n')),(0,i.kt)("h3",{id:"resolving-versions"},"Resolving versions"),(0,i.kt)("p",null,"Now that the tool can be downloaded and installed, we must configure how to resolve available\nversions. Resolving is configured through the ",(0,i.kt)("inlineCode",{parentName:"p"},"[resolve]")," section, which supports 2 patterns to\nresolve with: Git tags or a JSON manifest."),(0,i.kt)("h4",{id:"git-tags"},"Git tags"),(0,i.kt)("p",null,"To resolve a list of available versions using Git tags, the following settings are available:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"git-url")," - The remote URL to fetch tags from."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"git-tag-pattern")," - A regular expression to filter and match with. Defaults to\n",(0,i.kt)("inlineCode",{parentName:"li"},"^v?((\\d+)\\.(\\d+)\\.(\\d+))"),". The capture group ",(0,i.kt)("inlineCode",{parentName:"li"},"1")," will be extracted as the version.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml",metastring:'title="protostar.toml"',title:'"protostar.toml"'},'# ...\n\n[resolve]\ngit-url = "https://github.com/moonrepo/protostar"\ngit-tag-pattern = "^@protostar/cli@((\\\\d+)\\.(\\\\d+)\\.(\\\\d+))"\n')),(0,i.kt)("h4",{id:"json-manifest"},"JSON manifest"),(0,i.kt)("p",null,"To resolve a list of available versions using a JSON manifest, the following settings are available:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"manifest-url")," - A URL that returns a JSON response of all versions. This response ",(0,i.kt)("em",{parentName:"li"},"must be")," an\narray of strings, or an array of objects."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"manifest-version-key")," - If the response is an array of objects, this is the key to extract the\nversion from. If the response is an array of strings, this setting can be omitted. Defaults to\n",(0,i.kt)("inlineCode",{parentName:"li"},"version"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml",metastring:'title="protostar.toml"',title:'"protostar.toml"'},'# ...\n\n[resolve]\nmanifest-url = "https://someregistry.com/protostar/versions.json"\nmanifest-version-key = "latest_version"\n')),(0,i.kt)("h3",{id:"detecting-versions"},"Detecting versions"),(0,i.kt)("p",null,"And lastly, we can configure how to ",(0,i.kt)("a",{parentName:"p",href:"./detection"},"detect a version")," contextually at runtime, using\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"[detect]")," setting. At this time, we only support 1 setting:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"version-files")," - A list of version files to extract from. The contents of these files can ",(0,i.kt)("em",{parentName:"li"},"only"),"\nbe the version string itself.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml",metastring:'title="protostar.toml"',title:'"protostar.toml"'},'# ...\n\n[detect]\nversion-files = [".protostar-version", ".protostarrc"]\n')))}c.isMDXComponent=!0}}]);