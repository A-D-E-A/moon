"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8086],{35318:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var a=n(27378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=s(n),k=r,m=d["".concat(p,".").concat(k)]||d[k]||u[k]||o;return n?a.createElement(m,l(l({ref:t},c),{},{components:n})):a.createElement(m,l({ref:t},c))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},79022:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(27378),r=n(9619);function o(e){let{header:t,updated:n,version:o}=e;return a.createElement(r.Z,{text:`v${o}`,variant:n?"success":"info",className:t?"absolute right-0 top-1.5":"ml-2"})}},9619:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(27378),r=n(38944),o=n(31792);const l={failure:"bg-red-100 text-red-900",info:"bg-pink-100 text-pink-900",success:"bg-green-100 text-green-900",warning:"bg-orange-100 text-orange-900"};function i(e){let{className:t,icon:n,text:i,variant:p}=e;return a.createElement("span",{className:(0,r.Z)("inline-flex items-center px-1 py-0.5 rounded text-xs font-bold uppercase",p?l[p]:"bg-gray-100 text-gray-800",t)},n&&a.createElement(o.Z,{icon:n,className:"mr-1"}),i)}},11118:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>p,toc:()=>c});var a=n(25773),r=(n(27378),n(35318)),o=n(79022);const l={title:"Query language",toc_max_heading_level:4,tags:["query","lang","mql"]},i=void 0,p={unversionedId:"concepts/query-lang",id:"concepts/query-lang",title:"Query language",description:"moon supports an integrated query language, known as MQL, that can be used to filter and select",source:"@site/docs/concepts/query-lang.mdx",sourceDirName:"concepts",slug:"/concepts/query-lang",permalink:"/docs/concepts/query-lang",draft:!1,editUrl:"https://github.com/moonrepo/moon/tree/master/website/docs/concepts/query-lang.mdx",tags:[{label:"query",permalink:"/docs/tags/query"},{label:"lang",permalink:"/docs/tags/lang"},{label:"mql",permalink:"/docs/tags/mql"}],version:"current",frontMatter:{title:"Query language",toc_max_heading_level:4,tags:["query","lang","mql"]},sidebar:"docs",previous:{title:"File patterns",permalink:"/docs/concepts/file-pattern"},next:{title:"Projects",permalink:"/docs/concepts/project"}},s={},c=[{value:"Syntax",id:"syntax",level:2},{value:"Comparisons",id:"comparisons",level:3},{value:"Equals, Not equals",id:"equals-not-equals",level:4},{value:"Like, Not like",id:"like-not-like",level:4},{value:"Conditions",id:"conditions",level:3},{value:"Grouping",id:"grouping",level:3},{value:"Fields",id:"fields",level:2},{value:"<code>language</code>",id:"language",level:3},{value:"<code>project</code>",id:"project",level:3},{value:"<code>projectAlias</code>",id:"projectalias",level:3},{value:"<code>projectSource</code>",id:"projectsource",level:3},{value:"<code>projectType</code>",id:"projecttype",level:3},{value:"<code>tag</code>",id:"tag",level:3},{value:"<code>task</code>",id:"task",level:3},{value:"<code>taskPlatform</code>",id:"taskplatform",level:3},{value:"<code>taskType</code>",id:"tasktype",level:3}],u={toc:c};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(o.Z,{version:"1.3.0",header:!0,mdxType:"VersionLabel"}),(0,r.kt)("p",null,"moon supports an integrated query language, known as MQL, that can be used to filter and select\nprojects from the project graph, using an SQL-like syntax. MQL is primarily used by\n",(0,r.kt)("a",{parentName:"p",href:"../commands/run"},(0,r.kt)("inlineCode",{parentName:"a"},"moon run"))," with the ",(0,r.kt)("inlineCode",{parentName:"p"},"--query")," option."),(0,r.kt)("h2",{id:"syntax"},"Syntax"),(0,r.kt)("h3",{id:"comparisons"},"Comparisons"),(0,r.kt)("p",null,"A comparison (also known as an assignment) is an expression that defines a piece of criteria, and is\na building block of a query. This criteria maps a ",(0,r.kt)("a",{parentName:"p",href:"#field"},"field")," to a value, with an explicit\ncomparison operator."),(0,r.kt)("h4",{id:"equals-not-equals"},"Equals, Not equals"),(0,r.kt)("p",null,"The equals (",(0,r.kt)("inlineCode",{parentName:"p"},"="),") and not equals (",(0,r.kt)("inlineCode",{parentName:"p"},"!="),") comparison operators can be used for ",(0,r.kt)("em",{parentName:"p"},"exact")," value matching."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"projectType=library && language!=javascript\n")),(0,r.kt)("p",null,"You can also define a list of values using square bracket syntax, that will match against one of the\nvalues."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"language=[javascript, typescript]\n")),(0,r.kt)("h4",{id:"like-not-like"},"Like, Not like"),(0,r.kt)("p",null,"The like (",(0,r.kt)("inlineCode",{parentName:"p"},"~"),") and not like (",(0,r.kt)("inlineCode",{parentName:"p"},"!~"),") comparison operators can be used for ",(0,r.kt)("em",{parentName:"p"},"wildcard")," value matching,\nusing ",(0,r.kt)("a",{parentName:"p",href:"./file-pattern#globs"},"glob syntax"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"projectSource~packages/* && tag!~*-app\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Like comparisons can only be used on non-enum fields.")),(0,r.kt)("h3",{id:"conditions"},"Conditions"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"&&")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"||")," logical operators can be used to combine multiple comparisons into a condition.\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"&&")," operator is used to combine comparisons into a logical AND, and the ",(0,r.kt)("inlineCode",{parentName:"p"},"||")," operator is used\nfor logical OR."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"taskPlatform=system || taskPlatform=node\n")),(0,r.kt)("p",null,"For readability concerns, you can also use ",(0,r.kt)("inlineCode",{parentName:"p"},"AND")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"OR"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"taskPlatform=system OR taskPlatform=node\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Mixing both operators in the same condition is not supported.")),(0,r.kt)("h3",{id:"grouping"},"Grouping"),(0,r.kt)("p",null,"For advanced queries and complex conditions, you can group comparisons using parentheses to create\nlogical groupings. Groups can also be nested within other groups."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"language=javascript && (taskType=test || taskType=build)\n")),(0,r.kt)("h2",{id:"fields"},"Fields"),(0,r.kt)("p",null,"The following fields can be used as criteria, and are related to ",(0,r.kt)("a",{parentName:"p",href:"./token#variables"},"task tokens"),"."),(0,r.kt)("h3",{id:"language"},(0,r.kt)("inlineCode",{parentName:"h3"},"language")),(0,r.kt)("p",null,"Programming language the project is written in, as defined in\n",(0,r.kt)("a",{parentName:"p",href:"../config/project#language"},(0,r.kt)("inlineCode",{parentName:"a"},"moon.yml")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"language=rust\n")),(0,r.kt)("h3",{id:"project"},(0,r.kt)("inlineCode",{parentName:"h3"},"project")),(0,r.kt)("p",null,"ID/name of the project, as defined in ",(0,r.kt)("a",{parentName:"p",href:"../config/workspace"},(0,r.kt)("inlineCode",{parentName:"a"},".moon/workspace.yml")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"project=server\n")),(0,r.kt)("h3",{id:"projectalias"},(0,r.kt)("inlineCode",{parentName:"h3"},"projectAlias")),(0,r.kt)("p",null,"Alias of the project. For example, the ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," name."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"projectAlias~@scope/*\n")),(0,r.kt)("h3",{id:"projectsource"},(0,r.kt)("inlineCode",{parentName:"h3"},"projectSource")),(0,r.kt)("p",null,"Relative file path from the workspace root to the project root, as defined in\n",(0,r.kt)("a",{parentName:"p",href:"../config/workspace"},(0,r.kt)("inlineCode",{parentName:"a"},".moon/workspace.yml")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"projectSource~packages/*\n")),(0,r.kt)("h3",{id:"projecttype"},(0,r.kt)("inlineCode",{parentName:"h3"},"projectType")),(0,r.kt)("p",null,"The type of project, as defined in ",(0,r.kt)("a",{parentName:"p",href:"../config/project#type"},(0,r.kt)("inlineCode",{parentName:"a"},"moon.yml")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"projectType=application\n")),(0,r.kt)("h3",{id:"tag"},(0,r.kt)("inlineCode",{parentName:"h3"},"tag")),(0,r.kt)("p",null,"A tag within the project, as defined in ",(0,r.kt)("a",{parentName:"p",href:"../config/project#tags"},(0,r.kt)("inlineCode",{parentName:"a"},"moon.yml")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"tag~react-*\n")),(0,r.kt)("h3",{id:"task"},(0,r.kt)("inlineCode",{parentName:"h3"},"task")),(0,r.kt)("p",null,"ID/name of a task within the project."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"task=[build,test]\n")),(0,r.kt)("h3",{id:"taskplatform"},(0,r.kt)("inlineCode",{parentName:"h3"},"taskPlatform")),(0,r.kt)("p",null,"The platform a task will run against, as defined in ",(0,r.kt)("a",{parentName:"p",href:"../config/project#platform-1"},(0,r.kt)("inlineCode",{parentName:"a"},"moon.yml")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"taskPlatform=node\n")),(0,r.kt)("h3",{id:"tasktype"},(0,r.kt)("inlineCode",{parentName:"h3"},"taskType")),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"./task#types"},"type of task"),", based on its configured settings."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"taskType=build\n")))}d.isMDXComponent=!0}}]);