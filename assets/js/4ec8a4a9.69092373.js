"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[818],{5318:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return u}});var a=n(7378);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),u=o,k=d["".concat(p,".").concat(u)]||d[u]||m[u]||r;return n?a.createElement(k,i(i({ref:t},c),{},{components:n})):a.createElement(k,i({ref:t},c))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9785:function(e,t,n){n.d(t,{Z:function(){return r}});var a=n(7378),o=n(9619);function r(){return a.createElement(o.Z,{text:"Required",variant:"failure",className:"ml-2"})}},9619:function(e,t,n){n.d(t,{Z:function(){return l}});var a=n(7378),o=n(8944),r=n(8896),i={failure:"bg-red-100 text-red-900",success:"bg-green-100 text-green-900",warning:"bg-orange-100 text-orange-900"};function l(e){var t=e.className,n=e.icon,l=e.text,p=e.variant;return a.createElement("span",{className:(0,o.Z)("inline-flex items-center px-1 py-0.5 rounded text-xs font-bold uppercase",p?i[p]:"bg-gray-100 text-gray-800",t)},n&&a.createElement(r.Z,{icon:n,className:"mr-1"}),l)}},4501:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return s},default:function(){return k},frontMatter:function(){return p},metadata:function(){return c},toc:function(){return d}});var a=n(5773),o=n(808),r=(n(7378),n(5318)),i=n(9785),l=["components"],p={title:"project.yml",toc_max_heading_level:6},s=void 0,c={unversionedId:"config/project",id:"config/project",title:"project.yml",description:"The project.yml configuration file is not required but can be used to define additional metadata",source:"@site/docs/config/project.mdx",sourceDirName:"config",slug:"/config/project",permalink:"/docs/config/project",draft:!1,editUrl:"https://github.com/moonrepo/moon/tree/master/website/docs/config/project.mdx",tags:[],version:"current",frontMatter:{title:"project.yml",toc_max_heading_level:6},sidebar:"docs",previous:{title:".moon/project.yml",permalink:"/docs/config/global-project"},next:{title:"Commands",permalink:"/docs/commands"}},m={},d=[{value:"<code>dependsOn</code>",id:"dependson",level:2},{value:"<code>fileGroups</code>",id:"filegroups",level:2},{value:"Inherited file groups",id:"inherited-file-groups",level:3},{value:"<code>project</code>",id:"project",level:2},{value:"<code>channel</code>",id:"channel",level:3},{value:"<code>description</code>",id:"description",level:3},{value:"<code>maintainers</code>",id:"maintainers",level:3},{value:"<code>name</code>",id:"name",level:3},{value:"<code>owner</code>",id:"owner",level:3},{value:"<code>type</code>",id:"type",level:3},{value:"<code>tasks</code>",id:"tasks",level:2},{value:"<code>command</code><RequiredLabel />",id:"command",level:3},{value:"<code>args</code>",id:"args",level:3},{value:"<code>deps</code>",id:"deps",level:3},{value:"<code>env</code>",id:"env",level:3},{value:"<code>inputs</code>",id:"inputs",level:3},{value:"<code>outputs</code>",id:"outputs",level:3},{value:"<code>options</code>",id:"options",level:3},{value:"<code>mergeArgs</code>",id:"mergeargs",level:4},{value:"<code>mergeDeps</code>",id:"mergedeps",level:4},{value:"<code>mergeEnv</code>",id:"mergeenv",level:4},{value:"<code>mergeInputs</code>",id:"mergeinputs",level:4},{value:"<code>mergeOutputs</code>",id:"mergeoutputs",level:4},{value:"<code>retryCount</code>",id:"retrycount",level:4},{value:"<code>runInCI</code>",id:"runinci",level:4},{value:"<code>runFromWorkspaceRoot</code>",id:"runfromworkspaceroot",level:4},{value:"<code>type</code>",id:"type-1",level:3},{value:"<code>workspace</code>",id:"workspace",level:2},{value:"<code>inheritedTasks</code>",id:"inheritedtasks",level:3},{value:"<code>exclude</code>",id:"exclude",level:4},{value:"<code>include</code>",id:"include",level:4},{value:"<code>rename</code>",id:"rename",level:4}],u={toc:d};function k(e){var t=e.components,n=(0,o.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"project.yml")," configuration file ",(0,r.kt)("em",{parentName:"p"},"is not required")," but can be used to define additional metadata\nfor a project, override inherited tasks, and more at the project-level. When used, this file must\nexist in a project's root, as configured in ",(0,r.kt)("a",{parentName:"p",href:"./workspace#projects"},(0,r.kt)("inlineCode",{parentName:"a"},"projects")),"."),(0,r.kt)("h2",{id:"dependson"},(0,r.kt)("inlineCode",{parentName:"h2"},"dependsOn")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"ProjectID[]"))),(0,r.kt)("p",null,"Defines ",(0,r.kt)("em",{parentName:"p"},"other")," projects that ",(0,r.kt)("em",{parentName:"p"},"this")," project depends on, primarily when generating the project and\ntask graphs. The most common use case for this is building those projects ",(0,r.kt)("em",{parentName:"p"},"before")," building this\none, and for syncing ",(0,r.kt)("a",{parentName:"p",href:"../concepts/project#packagejson"},(0,r.kt)("inlineCode",{parentName:"a"},"package.json"))," dependencies and\n",(0,r.kt)("a",{parentName:"p",href:"../concepts/project#tsconfigjson"},(0,r.kt)("inlineCode",{parentName:"a"},"tsconfig.json"))," project references when applicable."),(0,r.kt)("p",null,"When defined, this setting requires an array of project IDs, which are the keys found in the\n",(0,r.kt)("a",{parentName:"p",href:"./workspace#projects"},(0,r.kt)("inlineCode",{parentName:"a"},"projects"))," map."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="project.yml"',title:'"project.yml"'},"dependsOn:\n  - 'apiClients'\n  - 'designSystem'\n")),(0,r.kt)("h2",{id:"filegroups"},(0,r.kt)("inlineCode",{parentName:"h2"},"fileGroups")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"Record<string, string[]>"))),(0,r.kt)("p",null,"File groups are a mechanism for grouping similar types of files within a project using file glob\npatterns or literal file paths. These groups are then used by ",(0,r.kt)("a",{parentName:"p",href:"#tasks"},"tasks")," to calculate\nfunctionality like cache computation, affected files since last change, deterministic builds, and\nmore. By default, this setting ",(0,r.kt)("em",{parentName:"p"},"is not required")," for the following reasons:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"File groups are an optional feature, and are designed for advanced use cases."),(0,r.kt)("li",{parentName:"ul"},"File groups defined in ",(0,r.kt)("a",{parentName:"li",href:"./global-project"},(0,r.kt)("inlineCode",{parentName:"a"},".moon/project.yml"))," will be inherited by all projects.")),(0,r.kt)("p",null,"When defined this setting requires a map, where the key is the file group name, and the value is a\nlist of globs or paths. Globs and paths are relative to a project (even when defined\n",(0,r.kt)("a",{parentName:"p",href:"./global-project"},"globally"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="project.yml"',title:'"project.yml"'},"fileGroups:\n  configs:\n    - '*.{js,json}'\n  sources:\n    - 'src/**/*'\n    - 'types/**/*'\n  tests:\n    - 'tests/**/*.test.*'\n    - '**/__tests__/**/*'\n  assets:\n    - 'assets/**/*'\n    - 'images/**/*'\n    - 'static/**/*'\n    - '**/*.{scss,css}'\n    - '**/*'\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The code snippet above is merely an example of file groups. Feel free to use those groups as-is,\nmodify the glob lists, add and remove groups, or implement completely new groups. The choice is\nyours!")),(0,r.kt)("h3",{id:"inherited-file-groups"},"Inherited file groups"),(0,r.kt)("p",null,"A primary scenario in which to define file groups at the project-level is when you want to\n",(0,r.kt)("em",{parentName:"p"},"override")," file groups defined at the workspace-level. For example, say we want to override the\n",(0,r.kt)("inlineCode",{parentName:"p"},"sources"),' file group because our source folder is named "lib" and not "src", we would define our\nfile groups as followed.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/project.yml"',title:'".moon/project.yml"'},"fileGroups:\n  sources:\n    - 'src/**/*'\n    - 'types/**/*'\n  tests:\n    - 'tests/**/*.test.*'\n    - '**/__tests__/**/*'\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="project.yml"',title:'"project.yml"'},"fileGroups:\n  sources:\n    - 'lib/**/*'\n    - 'types/**/*'\n  # Inherit `tests` as-is\n")),(0,r.kt)("p",null,"File groups defined in ",(0,r.kt)("inlineCode",{parentName:"p"},"project.yml")," will override file groups defined in ",(0,r.kt)("inlineCode",{parentName:"p"},".moon/project.yml")," of the\nsame name, and ",(0,r.kt)("em",{parentName:"p"},"will not")," merge the value arrays."),(0,r.kt)("h2",{id:"project"},(0,r.kt)("inlineCode",{parentName:"h2"},"project")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"ProjectMetadataConfig"))),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"project")," setting defines metadata about the project itself. Although this setting is optional,\nwhen defined, all fields within it ",(0,r.kt)("em",{parentName:"p"},"must")," be defined as well."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="project.yml"',title:'"project.yml"'},"project:\n  type: 'tool'\n  name: 'moon'\n  description: 'A monorepo management tool.'\n  channel: '#moon'\n  owner: 'infra.platform'\n  maintainers: ['miles.johnson']\n")),(0,r.kt)("p",null,"The information listed within ",(0,r.kt)("inlineCode",{parentName:"p"},"project")," is purely informational and primarily displayed within the\nCLI. However, this setting exists for you, your team, and your company, as a means to identify and\norganize all projects. Feel free to build your own tooling around these settings!"),(0,r.kt)("h3",{id:"channel"},(0,r.kt)("inlineCode",{parentName:"h3"},"channel")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"string"))),(0,r.kt)("p",null,"The Slack, Discord, Teams, IRC, etc channel name (with leading #) in which to discuss the project."),(0,r.kt)("h3",{id:"description"},(0,r.kt)("inlineCode",{parentName:"h3"},"description")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"string"))),(0,r.kt)("p",null,"A description of what the project does and aims to achieve. Be as descriptive as possible, as this\nis the kind of information search engines would index on."),(0,r.kt)("h3",{id:"maintainers"},(0,r.kt)("inlineCode",{parentName:"h3"},"maintainers")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"string[]"))),(0,r.kt)("p",null,"A list of people/developers that maintain the project, review code changes, and can provide support.\nCan be a name, email, LDAP name, GitHub username, etc, the choice is yours."),(0,r.kt)("h3",{id:"name"},(0,r.kt)("inlineCode",{parentName:"h3"},"name")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"string"))),(0,r.kt)("p",null,"A human readable name of the project. This is ",(0,r.kt)("em",{parentName:"p"},"different")," from the unique project ID configured in\n",(0,r.kt)("a",{parentName:"p",href:"./workspace#projects"},(0,r.kt)("inlineCode",{parentName:"a"},"projects")),"."),(0,r.kt)("h3",{id:"owner"},(0,r.kt)("inlineCode",{parentName:"h3"},"owner")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"string"))),(0,r.kt)("p",null,"The team or organization that owns the project. Can be a title, LDAP name, GitHub team, etc. We\nsuggest ",(0,r.kt)("em",{parentName:"p"},"not")," listing people/developers as the owner, use ",(0,r.kt)("a",{parentName:"p",href:"#maintainers"},"maintainers")," instead."),(0,r.kt)("h3",{id:"type"},(0,r.kt)("inlineCode",{parentName:"h3"},"type")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"ProjectType"))),(0,r.kt)("p",null,"The type of project. Supports the following values:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"application")," - A backend or frontend application that communicates over HTTP, TCP, RPC, etc."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"library")," - A self-contained, shareable, and publishable set of code."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tool")," - An internal tool, command line program, one-off script, etc.")),(0,r.kt)("h2",{id:"tasks"},(0,r.kt)("inlineCode",{parentName:"h2"},"tasks")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"Record<string, TaskConfig>"))),(0,r.kt)("p",null,"Tasks are actions that are ran within the context of a ",(0,r.kt)("a",{parentName:"p",href:"../concepts/project"},"project"),", and commonly\nwrap an npm binary or system command. This setting requires a map, where the key is a unique\nidentifier for the task, and the value is an object of task parameters."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="project.yml"',title:'"project.yml"'},"tasks:\n  format:\n    command: 'prettier'\n  lint:\n    command: 'eslint'\n  test:\n    command: 'jest'\n  typecheck:\n    command: 'tsc'\n")),(0,r.kt)("h3",{id:"command"},(0,r.kt)("inlineCode",{parentName:"h3"},"command"),(0,r.kt)(i.Z,{mdxType:"RequiredLabel"})),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"string"))),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"command")," field is the name of an npm binary or native system command to run when executing the\ntask. This field is required when ",(0,r.kt)("em",{parentName:"p"},"not")," inheriting a global task of the same name."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="project.yml" {3}',title:'"project.yml"',"{3}":!0},"tasks:\n  format:\n    command: 'prettier'\n")),(0,r.kt)("p",null,"By default a task assumes the command is an npm binary, and if you'd like to reference a system\ncommand, you'll also need to set the ",(0,r.kt)("a",{parentName:"p",href:"#type"},(0,r.kt)("inlineCode",{parentName:"a"},"type")),' to "system".'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="project.yml"',title:'"project.yml"'},"tasks:\n  clean:\n    command: 'rm'\n    args: '-rf dist'\n    type: 'system'\n")),(0,r.kt)("h3",{id:"args"},(0,r.kt)("inlineCode",{parentName:"h3"},"args")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"string | string[]"))),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"args")," field is a collection of arguments to pass on the command line when executing the task.\nThis setting can be defined using a string, or an array of strings. We suggest using arrays when\ndealing with many args, or the args string cannot be parsed easily."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="project.yml" {4,5}',title:'"project.yml"',"{4,5}":!0},"tasks:\n  test:\n    command: 'jest'\n    # String\n    args: '--color --maxWorkers 3'\n    # Array\n    args:\n      - '--color'\n      - '--maxWorkers'\n      - '3'\n")),(0,r.kt)("p",null,"However, for the array approach to work correctly, each argument ",(0,r.kt)("em",{parentName:"p"},"must")," be its own distinct item,\nincluding argument values. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="project.yml"',title:'"project.yml"'},"tasks:\n  test:\n    command: 'jest'\n    args:\n      # Valid\n      - '--maxWorkers'\n      - '3'\n      # Also valid\n      - '--maxWorkers=3'\n      # Invalid\n      - '--maxWorkers 3'\n")),(0,r.kt)("h3",{id:"deps"},(0,r.kt)("inlineCode",{parentName:"h3"},"deps")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"Target[]"))),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"deps")," field is a list of other tasks (known as ",(0,r.kt)("a",{parentName:"p",href:"../concepts/target"},"targets"),"), either within\nthis project or found in another project, that will be executed ",(0,r.kt)("em",{parentName:"p"},"before")," this task. It achieves this\nby generating a directed task graph based on the project graph."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="project.yml" {4-6}',title:'"project.yml"',"{4-6}":!0},"tasks:\n  build:\n    command: 'webpack'\n    deps:\n      - 'apiClients:build'\n      - 'designSystem:build'\n")),(0,r.kt)("h3",{id:"env"},(0,r.kt)("inlineCode",{parentName:"h3"},"env")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"Record<string, string>"))),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"env")," field is map of strings that are passed as environment variables when running the command."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="project.yml" {4,5}',title:'"project.yml"',"{4,5}":!0},"tasks:\n  build:\n    command: 'webpack'\n    env:\n      NODE_ENV: 'production'\n")),(0,r.kt)("h3",{id:"inputs"},(0,r.kt)("inlineCode",{parentName:"h3"},"inputs")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"string[]"))),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"inputs")," field is a list of file paths/globs that are used to calculate whether to execute this\ntask based on files that have been touched since the last time the task has been ran. If ",(0,r.kt)("em",{parentName:"p"},"not"),"\ndefined, then all files within a project are considered an input (",(0,r.kt)("inlineCode",{parentName:"p"},"**/*"),")."),(0,r.kt)("p",null,"By default inputs are relative from the ",(0,r.kt)("em",{parentName:"p"},"project root"),", and can reference\n",(0,r.kt)("a",{parentName:"p",href:"#filegroups"},"file groups"),'. To reference files from the workspace root (for example, config files),\nprefix the path with a "/".'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="project.yml" {4-10}',title:'"project.yml"',"{4-10}":!0},"tasks:\n  lint:\n    command: 'eslint'\n    inputs:\n      # Config files anywhere within the project\n      - '**/.eslintignore'\n      - '**/.eslintrc.js'\n      # Config files at the workspace root\n      - '/.eslintignore'\n      - '/.eslintrc.js'\n")),(0,r.kt)("h3",{id:"outputs"},(0,r.kt)("inlineCode",{parentName:"h3"},"outputs")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"string[]"))),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"outputs")," field is a list of files and folders that are ",(0,r.kt)("em",{parentName:"p"},"created")," as a result of executing this\ntask, excluding internal cache files that are created from the underlying command (for example,\n",(0,r.kt)("inlineCode",{parentName:"p"},".eslintcache"),")."),(0,r.kt)("p",null,"By default outputs are relative from the ",(0,r.kt)("em",{parentName:"p"},"project root"),'. To output files to the workspace root\n(should rarely be used), prefix the path with a "/".'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="project.yml" {4-6}',title:'"project.yml"',"{4-6}":!0},"tasks:\n  build:\n    command: 'webpack'\n    outputs:\n      # Relative from project root\n      - 'build/'\n")),(0,r.kt)("h3",{id:"options"},(0,r.kt)("inlineCode",{parentName:"h3"},"options")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"TaskOptionsConfig"))),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"options")," field is an object of configurable options that can be used to modify the task and its\nexecution. The following fields can be provided, with merge related fields supporting all\n",(0,r.kt)("a",{parentName:"p",href:"../concepts/task#merge-strategies"},"merge strategies"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="project.yml" {6-8}',title:'"project.yml"',"{6-8}":!0},"tasks:\n  typecheck:\n    command: 'tsc'\n    args: '--noEmit'\n    options:\n      mergeArgs: 'replace'\n      runFromWorkspaceRoot: true\n")),(0,r.kt)("h4",{id:"mergeargs"},(0,r.kt)("inlineCode",{parentName:"h4"},"mergeArgs")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"TaskMergeStrategy"))),(0,r.kt)("p",null,"The strategy to use when merging the ",(0,r.kt)("a",{parentName:"p",href:"#args"},(0,r.kt)("inlineCode",{parentName:"a"},"args")),' list with an inherited task. Defaults to\n"append".'),(0,r.kt)("h4",{id:"mergedeps"},(0,r.kt)("inlineCode",{parentName:"h4"},"mergeDeps")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"TaskMergeStrategy"))),(0,r.kt)("p",null,"The strategy to use when merging the ",(0,r.kt)("a",{parentName:"p",href:"#deps"},(0,r.kt)("inlineCode",{parentName:"a"},"deps")),' list with an inherited task. Defaults to\n"append".'),(0,r.kt)("h4",{id:"mergeenv"},(0,r.kt)("inlineCode",{parentName:"h4"},"mergeEnv")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"TaskMergeStrategy"))),(0,r.kt)("p",null,"The strategy to use when merging the ",(0,r.kt)("a",{parentName:"p",href:"#env"},(0,r.kt)("inlineCode",{parentName:"a"},"env")),' map with an inherited task. Defaults to "append".'),(0,r.kt)("h4",{id:"mergeinputs"},(0,r.kt)("inlineCode",{parentName:"h4"},"mergeInputs")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"TaskMergeStrategy"))),(0,r.kt)("p",null,"The strategy to use when merging the ",(0,r.kt)("a",{parentName:"p",href:"#inputs"},(0,r.kt)("inlineCode",{parentName:"a"},"inputs")),' list with an inherited task. Defaults to\n"append".'),(0,r.kt)("h4",{id:"mergeoutputs"},(0,r.kt)("inlineCode",{parentName:"h4"},"mergeOutputs")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"TaskMergeStrategy"))),(0,r.kt)("p",null,"The strategy to use when merging the ",(0,r.kt)("a",{parentName:"p",href:"#outputs"},(0,r.kt)("inlineCode",{parentName:"a"},"outputs")),' list with an inherited task. Defaults to\n"append".'),(0,r.kt)("h4",{id:"retrycount"},(0,r.kt)("inlineCode",{parentName:"h4"},"retryCount")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"number"))),(0,r.kt)("p",null,"The number of attempts the task will retry execution before returning a failure. This is especially\nuseful for flaky tasks. Defaults to ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="project.yml" {5}',title:'"project.yml"',"{5}":!0},"tasks:\n  test:\n    # ...\n    options:\n      retryCount: 3\n")),(0,r.kt)("h4",{id:"runinci"},(0,r.kt)("inlineCode",{parentName:"h4"},"runInCI")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"boolean"))),(0,r.kt)("p",null,"Whether to run the task automatically in a CI (continuous integration) environment when affected by\ntouched files, typically through the ",(0,r.kt)("inlineCode",{parentName:"p"},"moon ci")," command. Defaults to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),' unless the task name is\n"start" or "serve", and is ',(0,r.kt)("em",{parentName:"p"},"always")," true when a task defines ",(0,r.kt)("a",{parentName:"p",href:"#outputs"},(0,r.kt)("inlineCode",{parentName:"a"},"outputs")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="project.yml" {5}',title:'"project.yml"',"{5}":!0},"tasks:\n  build:\n    # ...\n    options:\n      runInCI: false\n")),(0,r.kt)("h4",{id:"runfromworkspaceroot"},(0,r.kt)("inlineCode",{parentName:"h4"},"runFromWorkspaceRoot")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"boolean"))),(0,r.kt)("p",null,"Whether to use the workspace root as the working directory when executing a task. Defaults to\n",(0,r.kt)("inlineCode",{parentName:"p"},"false")," and runs from the task's project root."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="project.yml" {5}',title:'"project.yml"',"{5}":!0},"tasks:\n  typecheck:\n    # ...\n    options:\n      runFromWorkspaceRoot: true\n")),(0,r.kt)("h3",{id:"type-1"},(0,r.kt)("inlineCode",{parentName:"h3"},"type")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"type"),' field defines the type of command to run, where to locate its executable, and which tool\nto execute it with. Accepts "node" or "system" and defaults to "node".'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="project.yml" {4}',title:'"project.yml"',"{4}":!0},"tasks:\n  env:\n    command: 'printenv'\n    type: 'system'\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"This field exists because of our ",(0,r.kt)("a",{parentName:"p",href:"../concepts/toolchain"},"toolchain"),", and moon ensuring the correct\ncommand is ran.")),(0,r.kt)("h2",{id:"workspace"},(0,r.kt)("inlineCode",{parentName:"h2"},"workspace")),(0,r.kt)("p",null,"Dictates how a project interacts with settings defined at the workspace-level."),(0,r.kt)("h3",{id:"inheritedtasks"},(0,r.kt)("inlineCode",{parentName:"h3"},"inheritedTasks")),(0,r.kt)("p",null,"Provides a layer of control when inheriting tasks from ",(0,r.kt)("a",{parentName:"p",href:"./global-project"},(0,r.kt)("inlineCode",{parentName:"a"},".moon/project.yml")),"."),(0,r.kt)("h4",{id:"exclude"},(0,r.kt)("inlineCode",{parentName:"h4"},"exclude")),(0,r.kt)("p",null,"The optional ",(0,r.kt)("inlineCode",{parentName:"p"},"exclude")," setting permits a project to exclude specific tasks from being inherited. It\naccepts a list of strings, where each string is the ID of a global task to exclude."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="project.yml" {4}',title:'"project.yml"',"{4}":!0},"workspace:\n  inheritedTasks:\n    # Exclude the inherited `test` task for this project\n    exclude: ['test']\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Exclusion is applied after inclusion and before renaming.")),(0,r.kt)("h4",{id:"include"},(0,r.kt)("inlineCode",{parentName:"h4"},"include")),(0,r.kt)("p",null,"The optional ",(0,r.kt)("inlineCode",{parentName:"p"},"include")," setting permits a project to ",(0,r.kt)("em",{parentName:"p"},"only")," include specific inherited tasks (works\nlike an allow/white list). It accepts a list of strings, where each string is the ID of a global\ntask to include."),(0,r.kt)("p",null,"When this field is not defined, the project will inherit all tasks from the global project config."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="project.yml" {4,7-9}',title:'"project.yml"',"{4,7-9}":!0},"workspace:\n  inheritedTasks:\n    # Include *no* tasks (works like a full exclude)\n    include: []\n\n    # Only include the `lint` and `test` tasks for this project\n    include:\n      - 'lint'\n      - 'test'\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Inclusion is applied before exclusion and renaming.")),(0,r.kt)("h4",{id:"rename"},(0,r.kt)("inlineCode",{parentName:"h4"},"rename")),(0,r.kt)("p",null,"The optional ",(0,r.kt)("inlineCode",{parentName:"p"},"rename")," setting permits a project to rename the inherited task within the current\nproject. It accepts a map of strings, where the key is the original ID (found in the global project\nconfig), and the value is the new ID to use."),(0,r.kt)("p",null,"For example, say we have 2 tasks in the global project config called ",(0,r.kt)("inlineCode",{parentName:"p"},"buildPackage")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"buildApplication"),", but we only need 1, and since we're an application, we should omit and rename."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="project.yml" {4,5}',title:'"project.yml"',"{4,5}":!0},"workspace:\n  inheritedTasks:\n    exclude: ['buildPackage']\n    rename:\n      buildApplication: 'build'\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Renaming occurs after inclusion and exclusion.")))}k.isMDXComponent=!0}}]);