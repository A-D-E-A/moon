"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[730],{35318:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var o=n(27378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=c(n),d=a,g=u["".concat(l,".").concat(d)]||u[d]||p[d]||s;return n?o.createElement(g,r(r({ref:t},m),{},{components:n})):o.createElement(g,r({ref:t},m))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,r=new Array(s);r[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,r[1]=i;for(var c=2;c<s;c++)r[c]=n[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},74903:(e,t,n)=>{n.d(t,{Z:()=>g});var o=n(27378),a=n(38944),s=n(75484),r=n(99213);const i="admonition_uH4V",l="admonitionHeading_P5_N",c="admonitionIcon_MF44",m="admonitionContent_yySL";const p={note:{infimaClassName:"secondary",iconComponent:function(){return o.createElement("svg",{viewBox:"0 0 14 16"},o.createElement("path",{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))},label:o.createElement(r.Z,{id:"theme.admonition.note",description:"The default label used for the Note admonition (:::note)"},"note")},tip:{infimaClassName:"success",iconComponent:function(){return o.createElement("svg",{viewBox:"0 0 12 16"},o.createElement("path",{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))},label:o.createElement(r.Z,{id:"theme.admonition.tip",description:"The default label used for the Tip admonition (:::tip)"},"tip")},danger:{infimaClassName:"danger",iconComponent:function(){return o.createElement("svg",{viewBox:"0 0 12 16"},o.createElement("path",{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))},label:o.createElement(r.Z,{id:"theme.admonition.danger",description:"The default label used for the Danger admonition (:::danger)"},"danger")},info:{infimaClassName:"info",iconComponent:function(){return o.createElement("svg",{viewBox:"0 0 14 16"},o.createElement("path",{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))},label:o.createElement(r.Z,{id:"theme.admonition.info",description:"The default label used for the Info admonition (:::info)"},"info")},caution:{infimaClassName:"warning",iconComponent:function(){return o.createElement("svg",{viewBox:"0 0 16 16"},o.createElement("path",{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))},label:o.createElement(r.Z,{id:"theme.admonition.caution",description:"The default label used for the Caution admonition (:::caution)"},"caution")}},u={secondary:"note",important:"info",success:"tip",warning:"danger"};function d(e){const{mdxAdmonitionTitle:t,rest:n}=function(e){const t=o.Children.toArray(e),n=t.find((e=>o.isValidElement(e)&&"mdxAdmonitionTitle"===e.props?.mdxType)),a=o.createElement(o.Fragment,null,t.filter((e=>e!==n)));return{mdxAdmonitionTitle:n,rest:a}}(e.children);return{...e,title:e.title??t,children:n}}function g(e){const{children:t,type:n,title:r,icon:g}=d(e),h=function(e){const t=u[e]??e;return p[t]||(console.warn(`No admonition config found for admonition type "${t}". Using Info as fallback.`),p.info)}(n),k=r??h.label,{iconComponent:y}=h,f=g??o.createElement(y,null);return o.createElement("div",{className:(0,a.Z)(s.k.common.admonition,s.k.common.admonitionType(e.type),"alert",`alert--${h.infimaClassName}`,i)},o.createElement("div",{className:l},o.createElement("span",{className:c},f),k),o.createElement("div",{className:m},t))}},83893:(e,t,n)=>{n.d(t,{Z:()=>i});var o=n(27378),a=n(74903),s=n(83828);const r={bun:"Buno",deno:"Deno",go:"Go",node:"Node.js",php:"PHP",python:"Python",ruby:"Ruby",rust:"Rust"};function i(e){let{children:t,noError:n}=e;const i=(0,s.gE)(),l=o.Children.toArray(t).find((e=>!!o.isValidElement(e)&&("string"==typeof e.key&&e.key.endsWith(i))));return l?o.createElement(o.Fragment,null,l):n?null:o.createElement(a.Z,{type:"danger"},"Sorry, there's no example for ",r[i]||i,". Try switching to another language for the time being!")}},83828:(e,t,n)=>{n.d(t,{ZP:()=>c,gE:()=>l});var o=n(27378),a=n(35331);const s=["/docs/install","/docs/setup-workspace","/docs/setup-toolchain","/docs/create-project","/docs/create-task","/docs/run-task","/docs/migrate-to-moon"];function r(){return"undefined"!=typeof window&&"localStorage"in window}function i(){return r()&&localStorage.getItem("moonrepo.language")||"node"}function l(){const[e,t]=(0,o.useState)(i());return(0,o.useEffect)((()=>{const e=e=>{t(e.detail)};return window.addEventListener("onMoonrepoChangeLanguage",e),()=>{window.removeEventListener("onMoonrepoChangeLanguage",e)}})),e}function c(){const[e,t]=(0,o.useState)(i()),n=(0,a.TH)(),l=(0,o.useCallback)((e=>{let{target:n}=e;const o=n.value;if(t(o),r())try{localStorage.setItem("moonrepo.language",o)}catch{}window.dispatchEvent(new CustomEvent("onMoonrepoChangeLanguage",{bubbles:!0,detail:o}))}),[]);return s.some((e=>n.pathname.startsWith(e)))?o.createElement("select",{value:e,onChange:l,className:"outline-none min-w-0 bg-white border border-solid border-gray-400 dark:border-transparent rounded-md p-0.5 text-sm text-gray-800 placeholder-gray-600 h-full font-sans"},o.createElement("option",{value:"deno"},"Deno"),o.createElement("option",{value:"go"},"Go"),o.createElement("option",{value:"node"},"Node.js"),o.createElement("option",{value:"php"},"PHP"),o.createElement("option",{value:"python"},"Python"),o.createElement("option",{value:"ruby"},"Ruby"),o.createElement("option",{value:"rust"},"Rust")):null}},9634:(e,t,n)=>{n.d(t,{Z:()=>p});var o=n(27378),a=n(81884),s=n(25773),r=n(9928),i=n(83469),l=n(31792);const c={discord:r.omb,github:r.zhw,moon:i.Gp0,"new-project":i.g6h,"new-task":i.EQ8,project:i.pL1,"project-config":i.dhu,"project-config-global":i.YdP,"project-graph":i.Bkj,"run-task":i.sl_,task:i.diR,"task-config":i.o$R,token:i.BwA,toolchain:i.AlB,"toolchain-config":i.eDR,twitter:r.mdU,workspace:i.emM,"workspace-config":i.cRF};function m(e){let{name:t,...n}=e;return o.createElement(l.Z,(0,s.Z)({},n,{icon:c[t]}))}function p(e){let{links:t}=e;return o.createElement("div",{className:"grid grid-cols-1 gap-2 sm:grid-cols-2"},t.map((e=>o.createElement(a.default,{key:e.url,href:e.url,className:"focus:outline-none"},o.createElement("div",{className:"relative rounded-lg px-3 py-3 flex items-center space-x-2 border-solid border border-t-0 border-b-2 bg-gray-50 hover:bg-gray-100/90 border-gray-200/75 dark:bg-slate-700 dark:hover:bg-slate-600 dark:border-slate-900/75"},o.createElement("div",{className:"flex-shrink-0"},o.createElement(m,{size:"lg",name:e.icon})),o.createElement("div",{className:"flex-1 min-w-0 text-gray-900 dark:text-gray-100"},e.label))))))}},52746:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>I,contentTitle:()=>S,default:()=>W,frontMatter:()=>L,metadata:()=>z,toc:()=>H});var o=n(25773),a=(n(27378),n(35318)),s=n(9634),r=n(83893);const i={toc:[]};function l(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="<project>/moon.yml"',title:'"<project>/moon.yml"'},"language: 'typescript'\n\nfileGroups:\n    sources:\n        - 'src/**/*'\n        - 'deno.*'\n    tests:\n        - 'tests/**/*'\n\ntasks:\n    dev:\n        command: 'deno task dev'\n        inputs:\n            - '@globs(sources)'\n        local: true\n    format:\n        command: 'deno fmt --check'\n        inputs:\n            - '@globs(sources)'\n            - '@globs(tests)'\n    lint:\n        command: 'deno lint'\n        inputs:\n            - '@globs(sources)'\n            - '@globs(tests)'\n    test:\n        command: 'deno test --parallel'\n        inputs:\n            - '@globs(sources)'\n            - '@globs(tests)'\n    typecheck:\n        command: 'deno check'\n        inputs:\n            - '@globs(sources)'\n            - '@globs(tests)'\n            - 'tsconfig.json'\n            - '/tsconfig.json'\n")))}l.isMDXComponent=!0;const c={toc:[]};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="<project>/moon.yml"',title:'"<project>/moon.yml"'},"language: 'go'\n\nfileGroups:\n    sources:\n        - 'cmd/**/*'\n        - 'include/**/*'\n        - 'pkg/**/*'\n\ntasks:\n    build:\n        command: 'go build -o @out(0)'\n        inputs:\n            - '@globs(sources)'\n        outputs:\n            - 'bin'\n    dev:\n        command: 'go run'\n        inputs:\n            - '@globs(sources)'\n        local: true\n    format:\n        command: 'go fmt'\n        inputs:\n            - '@globs(sources)'\n    lint:\n        command: 'staticcheck'\n        inputs:\n            - '@globs(sources)'\n            - 'staticcheck.conf'\n    test:\n        command: 'go test'\n        inputs:\n            - '@globs(sources)'\n    vet:\n        command: 'go vet'\n        inputs:\n            - '@globs(sources)'\n")))}m.isMDXComponent=!0;const p={toc:[]};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="<project>/moon.yml"',title:'"<project>/moon.yml"'},"language: 'javascript'\n\nfileGroups:\n    sources:\n        - 'src/**/*'\n    tests:\n        - 'tests/**/*'\n\ntasks:\n    build:\n        command: 'webpack build --output-path @out(0)'\n        inputs:\n            - '@globs(sources)'\n            - 'webpack.config.js'\n        outputs:\n            - 'build'\n    dev:\n        command: 'webpack server'\n        inputs:\n            - '@globs(sources)'\n            - 'webpack.config.js'\n        local: true\n    format:\n        command: 'prettier --check .'\n        inputs:\n            - '@globs(sources)'\n            - '@globs(tests)'\n            - '/prettier.config.js'\n    lint:\n        command: 'eslint .'\n        inputs:\n            - '@globs(sources)'\n            - '@globs(tests)'\n            - '.eslintignore'\n            - '.eslintrc.js'\n            - '/.eslintrc.js'\n    test:\n        command: 'jest .'\n        inputs:\n            - '@globs(sources)'\n            - '@globs(tests)'\n            - 'jest.config.js'\n    typecheck:\n        command: 'tsc --build'\n        inputs:\n            - '@globs(sources)'\n            - '@globs(tests)'\n            - 'tsconfig.json'\n            - '/tsconfig.json'\n")),(0,a.kt)("p",null,"To ease the migration process, we offer the\n",(0,a.kt)("a",{parentName:"p",href:"./commands/migrate/from-package-json"},(0,a.kt)("inlineCode",{parentName:"a"},"moon migrate from-package-json"))," command, which will convert\na project's ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json")," scripts into ",(0,a.kt)("inlineCode",{parentName:"p"},"moon.yml")," tasks, while also determining project\ndependencies (",(0,a.kt)("a",{parentName:"p",href:"./config/project#dependsOn"},(0,a.kt)("inlineCode",{parentName:"a"},"dependsOn")),"). This needs to be ran ",(0,a.kt)("em",{parentName:"p"},"per project"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ moon migrate from-package-json <project>\n")),(0,a.kt)("p",null,"This command will do its best to parse and convert scripts, but this isn't always a simple 1:1\nconversion, especially when determining dependency chains. For this reason alone, we suggest\n",(0,a.kt)("em",{parentName:"p"},"manually curating")," tasks, but the migrate command well get you most of the way!"))}u.isMDXComponent=!0;const d={toc:[]};function g(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="<project>/moon.yml"',title:'"<project>/moon.yml"'},"language: 'php'\n\nfileGroups:\n    sources:\n        - 'app/**/*'\n    tests:\n        - 'tests/**/*'\n\ntasks:\n    dev:\n        command: 'php artisan serve'\n        inputs:\n            - '@globs(sources)'\n        local: true\n    format:\n        command: './vendor/bin/phpcbf .'\n        inputs:\n            - '@globs(sources)'\n            - '@globs(tests)'\n            - '.phpcs.xml'\n    lint:\n        command: './vendor/bin/phpstan analyse'\n        inputs:\n            - '@globs(sources)'\n            - '@globs(tests)'\n            - 'phpstan.neon'\n    test:\n        command: './vendor/bin/phpunit .'\n        inputs:\n            - '@globs(sources)'\n            - '@globs(tests)'\n            - 'phpunit.xml'\n")))}g.isMDXComponent=!0;const h={toc:[]};function k(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="<project>/moon.yml"',title:'"<project>/moon.yml"'},"language: 'python'\n\nfileGroups:\n    sources:\n        - 'flaskr/**/*'\n        - 'setup.py'\n    tests:\n        - 'tests/**/*'\n\ntasks:\n    dev:\n        command: 'flask run'\n        inputs:\n            - '@globs(sources)'\n        local: true\n    format:\n        command: 'black --check .'\n        inputs:\n            - '@globs(sources)'\n            - '@globs(tests)'\n            - 'pyproject.toml'\n    lint:\n        command: 'pylint .'\n        inputs:\n            - '@globs(sources)'\n            - '@globs(tests)'\n            - 'pyproject.toml'\n            - '.pylintrc'\n    test:\n        command: 'python -m unittest'\n        inputs:\n            - '@globs(sources)'\n            - '@globs(tests)'\n            - 'pyproject.toml'\n    typecheck:\n        command: 'mypy .'\n        inputs:\n            - '@globs(sources)'\n            - '@globs(tests)'\n            - 'mypy.ini'\n            - 'pyproject.toml'\n")))}k.isMDXComponent=!0;const y={toc:[]};function f(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="<project>/moon.yml"',title:'"<project>/moon.yml"'},"language: 'ruby'\n\nfileGroups:\n    sources:\n        - 'lib/**/*'\n        - 'view/**/*'\n    tests:\n        - 'spec/**/*'\n\ntasks:\n    dev:\n        command: './bin/rails server'\n        local: true\n    format:\n        command: 'rubocop -x'\n        inputs:\n            - '@globs(sources)'\n            - '@globs(tests)'\n            - '.rubocop.yml'\n    lint:\n        command: 'rubocop -l'\n        inputs:\n            - '@globs(sources)'\n            - '@globs(tests)'\n            - '.rubocop.yml'\n    test:\n        command: 'rspec'\n        inputs:\n            - '@globs(sources)'\n            - '@globs(tests)'\n            - '.rspec'\n    typecheck:\n        command: 'srb tc'\n        inputs:\n            - '@globs(sources)'\n            - '@globs(tests)'\n            - 'sorbet/config'\n")))}f.isMDXComponent=!0;const b={toc:[]};function v(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},b,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="<project>/moon.yml"',title:'"<project>/moon.yml"'},"language: 'rust'\n\nfileGroups:\n    sources:\n        - 'src/**/*'\n    tests:\n        - 'benches/**/*'\n        - 'tests/**/*'\n\ntasks:\n    build:\n        command: 'cargo build'\n        inputs:\n            - '@globs(sources)'\n            - 'Cargo.toml'\n    dev:\n        command: 'cargo run'\n        inputs:\n            - '@globs(sources)'\n            - 'Cargo.toml'\n        local: true\n    format:\n        command: 'cargo fmt --all --check'\n        inputs:\n            - '@globs(sources)'\n            - '@globs(tests)'\n            - 'Cargo.toml'\n    lint:\n        command: 'cargo clippy --workspace --all-targets'\n        inputs:\n            - '@globs(sources)'\n            - '@globs(tests)'\n            - 'Cargo.toml'\n    test:\n        command: 'cargo test --workspace'\n        inputs:\n            - '@globs(sources)'\n            - '@globs(tests)'\n            - 'Cargo.toml'\n    typecheck:\n        command: 'cargo check --workspace'\n        inputs:\n            - '@globs(sources)'\n            - '@globs(tests)'\n            - 'Cargo.toml'\n")))}v.isMDXComponent=!0;const w={toc:[]};function N(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},w,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Deno provides a built-in task runner through the\n",(0,a.kt)("a",{parentName:"p",href:"https://deno.land/manual@v1.31.1/tools/task_runner"},(0,a.kt)("inlineCode",{parentName:"a"},"deno task")," command"),". While Deno tasks are\ngreat, they're not as efficient as moon. They ",(0,a.kt)("em",{parentName:"p"},"do not")," support granular inputs, smart hashing,\nincremental caching, and all the other performance benefits that moon provides."),(0,a.kt)("p",null,"With that being said, you ",(0,a.kt)("em",{parentName:"p"},"do not")," have to migrate away from Deno tasks. Instead, you can simply run\nthem from within moon tasks. This gives you the best of both worlds."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="<project>/moon.yml"',title:'"<project>/moon.yml"'},"language: 'typescript'\n\ntasks:\n    analyze:\n        command: 'deno task analyze'\n        inputs:\n            - '@globs(sources)'\n            - '@globs(tests)'\n            - 'Rakefile'\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"When Deno tasks are ran through moon tasks, the current working directory is set to the project\nroot.")))}N.isMDXComponent=!0;const C={toc:[]};function j(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},C,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Go provides no mechanism for declaring reusable scripts. Because of this, there's no alternative to\nmoon tasks."))}j.isMDXComponent=!0;const x={toc:[]};function T(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},x,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"As a frontend developer you're already familiar with the Node.js ecosystem, specifically around\ndefining and using ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json")," scripts, and you may not want to deviate from this. Don't worry,\nsimply enable the ",(0,a.kt)("a",{parentName:"p",href:"./config/toolchain#infertasksfromscripts"},(0,a.kt)("inlineCode",{parentName:"a"},"node.inferTasksFromScripts"))," setting\nto automatically create moon tasks from a project's scripts! These can then be ran with\n",(0,a.kt)("a",{parentName:"p",href:"./commands/run"},(0,a.kt)("inlineCode",{parentName:"a"},"moon run")),"."),(0,a.kt)("p",null,"This implementation is a simple abstraction that runs ",(0,a.kt)("inlineCode",{parentName:"p"},"npm run <script>")," (or pnpm/yarn) in the\nproject directory as a child process. While this works, relying on ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json")," scripts incurs the\nfollowing risks and disadvantages:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"./config/project#inputs"},"Inputs")," default to ",(0,a.kt)("inlineCode",{parentName:"li"},"**/*"),":",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"A change to every project relative file will mark the task as affected, even those not necessary\nfor the task. Granular input control is lost."),(0,a.kt)("li",{parentName:"ul"},"A change to workspace relative files ",(0,a.kt)("em",{parentName:"li"},"will not")," mark the task as affected. For example, a change\nto ",(0,a.kt)("inlineCode",{parentName:"li"},"/prettier.config.js")," would not be detected for a ",(0,a.kt)("inlineCode",{parentName:"li"},"npm run format")," script."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"./config/project#outputs"},"Outputs")," default to an empty list unless:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"moon will attempt to extract outputs from arguments, by looking for variations of ",(0,a.kt)("inlineCode",{parentName:"li"},"--out"),",\n",(0,a.kt)("inlineCode",{parentName:"li"},"--outFile"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"--dist-dir"),", etc."),(0,a.kt)("li",{parentName:"ul"},"If no output could be determined, builds will not be cached and hydrated."))),(0,a.kt)("li",{parentName:"ul"},"Tasks will always ",(0,a.kt)("a",{parentName:"li",href:"./config/project#runinci"},"run in CI")," unless:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"moon will attempt to determine invalid CI tasks by looking for popular command usage, for\nexample: ",(0,a.kt)("inlineCode",{parentName:"li"},"webpack serve"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"next dev"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"--watch")," usage, and more. This ",(0,a.kt)("em",{parentName:"li"},"is not")," an exhaustive\ncheck."),(0,a.kt)("li",{parentName:"ul"},"The script name contains variations of ",(0,a.kt)("inlineCode",{parentName:"li"},"dev"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"start"),", or ",(0,a.kt)("inlineCode",{parentName:"li"},"serve"),".")))))}T.isMDXComponent=!0;const M={toc:[]};function E(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},M,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The PHP ecosystem has standardized (somewhat) around\n",(0,a.kt)("a",{parentName:"p",href:"https://getcomposer.org/doc/articles/scripts.md#writing-custom-commands"},"Composer scripts")," for\nreusability. While these work, they're not as efficient as moon. They ",(0,a.kt)("em",{parentName:"p"},"do not")," support granular\ninputs, smart hashing, incremental caching, and all the other performance benefits that moon\nprovides."),(0,a.kt)("p",null,"With that being said, you ",(0,a.kt)("em",{parentName:"p"},"do not")," have to migrate away from Composer. Instead, you can simply run\nthese scripts from within moon tasks. This gives you the best of both worlds."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="<project>/moon.yml"',title:'"<project>/moon.yml"'},"language: 'php'\n\ntasks:\n    test:\n        command: 'php composer.phar run-script test'\n        inputs:\n            - '@globs(sources)'\n            - '@globs(tests)'\n            - 'composer.json'\n")),(0,a.kt)("p",null,"In the future, we aim to infer these scripts automatically, and provide migration scripts."))}E.isMDXComponent=!0;const D={toc:[]};function P(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},D,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The Python ecosystem has support for many task runners such as ",(0,a.kt)("a",{parentName:"p",href:"https://pydoit.org/"},"doit")," and\n",(0,a.kt)("a",{parentName:"p",href:"https://pypyr.io/"},"pypyr"),". While these are great, they're not as efficient as moon. They ",(0,a.kt)("em",{parentName:"p"},"do not"),"\nsupport granular inputs, smart hashing, incremental caching, and all the other performance benefits\nthat moon provides."),(0,a.kt)("p",null,"With that being said, you ",(0,a.kt)("em",{parentName:"p"},"do not")," have to migrate away from these tools. Instead, you can simply\nrun their commands from within moon tasks. This gives you the best of both worlds."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="<project>/moon.yml"',title:'"<project>/moon.yml"'},"language: 'python'\n\ntasks:\n    test:\n        command: 'doit test'\n        inputs:\n            - '@globs(sources)'\n            - '@globs(tests)'\n            - 'pyproject.toml'\n")))}P.isMDXComponent=!0;const O={toc:[]};function Z(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},O,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The Ruby ecosystem has standardized around the task runner ",(0,a.kt)("a",{parentName:"p",href:"https://ruby.github.io/rake/"},"Rake"),",\nwhich is a Makefile like system written in Ruby. While Rake is great and it accomplishes everything\nit set out to do, it's not as efficient as moon. It ",(0,a.kt)("em",{parentName:"p"},"does not")," support granular inputs, smart\nhashing, incremental caching, and all the other performance benefits that moon provides."),(0,a.kt)("p",null,"With that being said, you ",(0,a.kt)("em",{parentName:"p"},"do not")," have to migrate away from Rake. Instead, you can simply run Rake\ncommands from within moon tasks. This gives you the best of both worlds."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="<project>/moon.yml"',title:'"<project>/moon.yml"'},"language: 'ruby'\n\ntasks:\n    test:\n        command: 'rake test'\n        inputs:\n            - '@globs(sources)'\n            - '@globs(tests)'\n            - 'Rakefile'\n")))}Z.isMDXComponent=!0;const X={toc:[]};function R(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},X,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Rust, and more specifically Cargo, provides no mechanism for declaring reusable scripts in\n",(0,a.kt)("inlineCode",{parentName:"p"},"Cargo.toml"),". Because of this, there's no alternative to moon tasks. In the future, we may parse\nthird-party libraries like ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo-make")," for this information."))}R.isMDXComponent=!0;const L={title:"Migrate to moon"},S=void 0,z={unversionedId:"migrate-to-moon",id:"migrate-to-moon",title:"Migrate to moon",description:"Now that we've talked about the workspace, projects, tasks, and more, we must talk about something",source:"@site/docs/migrate-to-moon.mdx",sourceDirName:".",slug:"/migrate-to-moon",permalink:"/docs/migrate-to-moon",draft:!1,editUrl:"https://github.com/moonrepo/moon/tree/master/website/docs/migrate-to-moon.mdx",tags:[],version:"current",frontMatter:{title:"Migrate to moon"},sidebar:"docs",previous:{title:"Run a task",permalink:"/docs/run-task"},next:{title:"Concepts",permalink:"/docs/concepts"}},I={},H=[{value:"Migrate to moon tasks",id:"migrate-to-moon-tasks",level:2},{value:"Continue using scripts",id:"continue-using-scripts",level:2},{value:"Next steps",id:"next-steps",level:2}],G={toc:H};function W(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},G,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Now that we've talked about the workspace, projects, tasks, and more, we must talk about something\nimportant... Should you embrace moon tasks? Or keep using language/ecosystem specific scripts? Or\nboth (incremental adoption)?"),(0,a.kt)("h2",{id:"migrate-to-moon-tasks"},"Migrate to moon tasks"),(0,a.kt)("p",null,"We suggest using moon tasks (of course), as they provide far more granular control and configurable\noptions than scripts, and a ",(0,a.kt)("inlineCode",{parentName:"p"},"moon.yml")," is a better\n",(0,a.kt)("a",{parentName:"p",href:"./faq#what-should-be-considered-the-source-of-truth"},"source of truth"),". Scripts aren't powerful\nenough to scale for large codebases."),(0,a.kt)("p",null,"An example of what this may look like can be found below. This ",(0,a.kt)("em",{parentName:"p"},"may")," look like a lot, but it pays\ndividends in the long run."),(0,a.kt)(r.Z,{mdxType:"LangPartials"},(0,a.kt)(l,{key:"deno",mdxType:"MigrateDeno"}),(0,a.kt)(m,{key:"go",mdxType:"MigrateGo"}),(0,a.kt)(u,{key:"node",mdxType:"MigrateNode"}),(0,a.kt)(g,{key:"php",mdxType:"MigratePHP"}),(0,a.kt)(k,{key:"python",mdxType:"MigratePython"}),(0,a.kt)(f,{key:"ruby",mdxType:"MigrateRuby"}),(0,a.kt)(v,{key:"rust",mdxType:"MigrateRust"})),(0,a.kt)("h2",{id:"continue-using-scripts"},"Continue using scripts"),(0,a.kt)(r.Z,{mdxType:"LangPartials"},(0,a.kt)(N,{key:"deno",mdxType:"ScriptsDeno"}),(0,a.kt)(j,{key:"go",mdxType:"ScriptsGo"}),(0,a.kt)(T,{key:"node",mdxType:"ScriptsNode"}),(0,a.kt)(E,{key:"php",mdxType:"ScriptsPHP"}),(0,a.kt)(P,{key:"python",mdxType:"ScriptsPython"}),(0,a.kt)(Z,{key:"ruby",mdxType:"ScriptsRuby"}),(0,a.kt)(R,{key:"rust",mdxType:"ScriptsRust"})),(0,a.kt)("h2",{id:"next-steps"},"Next steps"),(0,a.kt)("p",null,"By this point, you should have a better understanding behind moon's fundamentals! Why not adopt\nincrementally next? Jump into ",(0,a.kt)("a",{parentName:"p",href:"./guides/ci"},"guides")," for advanced use cases or ",(0,a.kt)("a",{parentName:"p",href:"./concepts"},"concepts"),"\nfor a deeper understanding."),(0,a.kt)(s.Z,{links:[{icon:"discord",label:"Community help & support",url:"https://discord.gg/qCh9MEynv2"},{icon:"twitter",label:"Releases & updates",url:"https://twitter.com/tothemoonrepo"}],mdxType:"NextSteps"}))}W.isMDXComponent=!0}}]);