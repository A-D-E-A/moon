"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9117],{5318:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(7378);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(r),f=o,d=m["".concat(c,".").concat(f)]||m[f]||u[f]||i;return r?n.createElement(d,a(a({ref:t},p),{},{components:r})):n.createElement(d,a({ref:t},p))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=r[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5404:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var n=r(5773),o=(r(7378),r(5318));const i={title:"Git hooks"},a=void 0,s={unversionedId:"guides/git-hooks",id:"guides/git-hooks",title:"Git hooks",description:"Git hooks are a mechanism for running",source:"@site/docs/guides/git-hooks.mdx",sourceDirName:"guides",slug:"/guides/git-hooks",permalink:"/docs/guides/git-hooks",draft:!1,editUrl:"https://github.com/moonrepo/moon/tree/master/website/docs/guides/git-hooks.mdx",tags:[],version:"current",frontMatter:{title:"Git hooks"},sidebar:"guides",previous:{title:"Docker usage",permalink:"/docs/guides/docker"},next:{title:"Open source usage",permalink:"/docs/guides/open-source"}},c={},l=[{value:"Pre-commit",id:"pre-commit",level:2}],p={toc:l};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks"},"Git hooks")," are a mechanism for running\nscripts at pre-defined phases in git's lifecycle, most commonly pre-commit, pre-push, or pre-merge."),(0,o.kt)("p",null,"While moon provides no functionality for managing hooks (",(0,o.kt)("em",{parentName:"p"},"yet"),"), you can run moon itself from hooks!\nThis is useful for ensuring that commit messages are formatted correctly, or that source code\nquality thresholds are met."),(0,o.kt)("h2",{id:"pre-commit"},"Pre-commit"),(0,o.kt)("p",null,"A perfect use case for the ",(0,o.kt)("inlineCode",{parentName:"p"},"pre-commit")," hook is to check linting and formatting of the files being\ncommitted. If either of these tasks fail, the commit will abort until they are fixed. Be sure to use\nthe ",(0,o.kt)("a",{parentName:"p",href:"../run-task#running-based-on-affected-files-only"},(0,o.kt)("inlineCode",{parentName:"a"},"--affected"))," option so that we ",(0,o.kt)("em",{parentName:"p"},"only run")," on\nchanged projects!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=".git/hooks/pre-commit"',title:'".git/hooks/pre-commit"'},"#!/bin/sh\n./node_modules/@moonrepo/cli/moon run :lint :format --affected\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"By default this will run on the ",(0,o.kt)("em",{parentName:"p"},"entire")," project (all files). If you want to filter it to only the\nchanged files, enable the ",(0,o.kt)("a",{parentName:"p",href:"../config/project#affectedfiles"},(0,o.kt)("inlineCode",{parentName:"a"},"affectedFiles"))," task option.")))}u.isMDXComponent=!0}}]);