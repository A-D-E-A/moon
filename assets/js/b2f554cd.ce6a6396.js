"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1477],{5444:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"v0.21","metadata":{"permalink":"/blog/v0.21","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2022-12-19_v0.21.mdx","source":"@site/blog/2022-12-19_v0.21.mdx","title":"moon v0.21 - Tiered language support with initial Go, PHP, Python, Ruby, and Rust","description":"Happy Holidays \ud83c\udf84\u2603\ufe0f! With our last release of the year, we\'re very excited to announce our tiered","date":"2022-12-19T00:00:00.000Z","formattedDate":"December 19, 2022","tags":[{"label":"runner","permalink":"/blog/tags/runner"},{"label":"language","permalink":"/blog/tags/language"},{"label":"platform","permalink":"/blog/tags/platform"},{"label":"cache","permalink":"/blog/tags/cache"},{"label":"graph","permalink":"/blog/tags/graph"}],"readingTime":4.275,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"https://pbs.twimg.com/profile_images/1532262885648281601/TQbEOiNd_400x400.jpg","key":"milesj"}],"frontMatter":{"slug":"v0.21","title":"moon v0.21 - Tiered language support with initial Go, PHP, Python, Ruby, and Rust","authors":["milesj"],"tags":["runner","language","platform","cache","graph"],"image":"./img/v0.21.png"},"nextItem":{"title":"moon v0.20 - Toolchain, caching, and hydration improvements","permalink":"/blog/v0.20"}},"content":"import Label from \'@site/src/ui/typography/Label\';\\nimport Image from \'@site/src/components/Image\';\\n\\nHappy Holidays \ud83c\udf84\u2603\ufe0f! With our last release of the year, we\'re very excited to announce our tiered\\nlanguage support structure, which lays the foundation for turning moon into a multi-language build\\nsystem! On top of this, we\'ve worked heavily on bug fixing, optimizations, and overall quality of\\nlife improvements.\\n\\n\x3c!--truncate--\x3e\\n\\n## New tiered language support\\n\\nThe most common question we receive is whether we plan to support additional languages besides\\nNode.js, with Rust, Deno, and Bun being top of that list. Adding new languages is non-trivial, as we\\nneed to build abstractions that support and integrate with the language\'s ecosystem, primarily\\ndependency managers and resolution algorithms.\\n\\nThis is a very large upfront cost, with a huge time and resource commitment. To reduce this burden,\\nwe\'re introducing a tiered support structure, so that languages can be incrementally integrated into\\nmoon and adopted by consumers.\\n\\nThe tiers break down as follows:\\n\\n- &nbsp;<Label text=\\"Tier 0\\" variant=\\"failure\\" /> &nbsp; **No direct integration** - Tool is not\\n  directly supported in moon, but can still be ran using the\\n  [\\"system\\" task platform](../docs/faq#can-we-run-other-languages), which expects the tool to exist\\n  in the current environment.\\n- &nbsp;<Label text=\\"Tier 1\\" variant=\\"warning\\" /> &nbsp; **Project categorization** - Projects can\\n  configure their primary [language in `moon.yml`](../docs/config/project#language).\\n- &nbsp;<Label text=\\"Tier 2\\" variant=\\"info\\" /> &nbsp; **Ecosystem platformization** - moon deeply\\n  integrates with the language\'s ecosystem by parsing manifests, lockfiles, and other semantic files\\n  to infer dependencies, tasks, and other necessary information.\\n- &nbsp;<Label text=\\"Tier 3\\" variant=\\"success\\" /> &nbsp; **Toolchain integration** - Language is\\n  directly supported in the toolchain, configured in\\n  [`.moon/toolchain.yml`](../docs/config/toolchain), and will automatically be downloaded and\\n  installed.\\n\\nTo learn more about our currently supported languages and their tiers,\\n[jump to the official documentation](/docs#supported-languages).\\n\\n> One important facet we\'d like to express, is that _all_ languages and tools fall into Tier 0. Feel\\n> free to use anything you\'d like as a task command!\\n\\n## Basic support for Go, PHP, Python, Ruby, and, Rust\\n\\nAs announced above, we now incrementally support new languages, and have integrated the following 5\\nlanguages with Tier 1 support: Go, PHP, Python, Ruby, and, Rust! Start using these languages today\\nby setting the [`language`](../docs/config/project#language) field in `moon.yml`, or by letting moon\\ninfer the language based on files in the project root (for example, `Cargo.toml` is Rust).\\n\\n```yaml title=\\"<project>/moon.yml\\"\\nlanguage: \'rust\'\\n\\ntasks:\\n  build:\\n    command: \'cargo build\'\\n    inputs:\\n      - \'src/**/*\'\\n      - \'Cargo.toml\'\\n  test:\\n    command: \'cargo test\'\\n    inputs:\\n      - \'src/**/*\'\\n      - \'tests/**/*\'\\n      - \'Cargo.toml\'\\n```\\n\\n> Because these languages are Tier 1, moon _does not_ install the language automatically, and will\\n> require the command to already exist in the environment. Furthermore, the project language will\\n> automatically set all task\'s `platform` to \\"system\\", at least until it\'s supported directly in the\\n> toolchain.\\n\\n## Interactive project and dependency graphs\\n\\nThanks to the amazing contribution from [Diptesh Choudhuri](https://github.com/IgnisDa), we now have\\ninteractive project and dependency graphs when running the\\n[`moon project-graph`](../docs/commands/project-graph) and\\n[`moon dep-graph`](../docs/commands/dep-graph) commands respectively.\\n\\nThis is only the first iteration of these graphs. Expect more advanced features in the future, like\\nfiltering, node/edge inspection, exporting, and more!\\n\\n<Image src={require(\'./img/v0.21/graph.png\')} width=\\"80%\\" />\\n\\n## New `--updateCache` command line option\\n\\nOur caching layer is pretty powerful, as it helps to avoid tasks from running unnecessarily.\\nHowever, there are situations where you need to refresh or force update the cache outside of the\\n[`inputs`](../docs/config/project#inputs) list. This is currently achieved with the\\n[`--cache`](../docs/commands/overview#caching) option, like `moon --cache off run ...`, but this is\\nnon-ideal for a few reasons:\\n\\n1. It disables _all caching_, which means dependency installs/dedupes will continually be ran. This\\n   adds a lot of unwanted overhead.\\n2. It requires you to backspace in the terminal to add the option _before_ `run` or `check`, as it\'s\\n   a global option. A little tedious but important for experience.\\n\\nSo to work around these limitations, we\'ve added a new `--updateCache` (or `-u`) to both\\n[`moon run`](../docs/commands/run) and [`moon check`](../docs/commands/run), which will bypass\\nreading any existing cache items, but will force update the cache base on the latest run.\\n\\n```shell\\n$ moon run app:build --updateCache\\n```\\n\\n## New multi-status affected filtering\\n\\nWe support running tasks based on affected files using the\\n[`moon run --affected`](../docs/commands/run) command, which is great for reducing the amount of\\ntasks being ran, and for applying code quality tooling like git hooks. However, you were only able\\nto apply a single status filter, like \\"deleted\\" or \\"modified\\", which was non-ideal... but no more!\\n\\nYou can now apply multiple statuses by passing the `--status` option multiple times.\\n\\n```shell\\n$ moon run :lint --affected --status modified --status added\\n```\\n\\nThis pairs nicely with the recent\\n[`affectedFiles` task option](../docs/config/project#affectedfiles) changes!\\n\\n## Other changes\\n\\nView the\\n[official release](https://github.com/moonrepo/moon/releases/tag/%40moonrepo%2Fcli%400.21.0) for a\\nfull list of changes.\\n\\n- Refactored project and dependency graphs for improved performance.\\n- Added args and env var variants to the `affectedFiles` task option.\\n- Added `--minimal` to `moon init` for quick scaffolding and prototyping.\\n\\n## What\'s next?\\n\\nExpect the following in the v0.21 release!\\n\\n- Scope tasks defined in `.moon/project.yml` to a project language or type.\\n- Generalized hashing for use in any context (improved deps installation).\\n- More work on language integrations."},{"id":"v0.20","metadata":{"permalink":"/blog/v0.20","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2022-11-29_v0.20.mdx","source":"@site/blog/2022-11-29_v0.20.mdx","title":"moon v0.20 - Toolchain, caching, and hydration improvements","description":"With this release, we\'ve focused heavily on future proofing our toolchain and how it integrates with","date":"2022-11-29T00:00:00.000Z","formattedDate":"November 29, 2022","tags":[{"label":"hydration","permalink":"/blog/tags/hydration"},{"label":"toolchain","permalink":"/blog/tags/toolchain"},{"label":"generator","permalink":"/blog/tags/generator"},{"label":"runner","permalink":"/blog/tags/runner"}],"readingTime":3.79,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"https://pbs.twimg.com/profile_images/1532262885648281601/TQbEOiNd_400x400.jpg","key":"milesj"}],"frontMatter":{"slug":"v0.20","title":"moon v0.20 - Toolchain, caching, and hydration improvements","authors":["milesj"],"tags":["hydration","toolchain","generator","runner"],"image":"./img/v0.20.png"},"prevItem":{"title":"moon v0.21 - Tiered language support with initial Go, PHP, Python, Ruby, and Rust","permalink":"/blog/v0.21"},"nextItem":{"title":"Integrating TypeScript in a monorepo","permalink":"/blog/typescript-monorepo"}},"content":"With this release, we\'ve focused heavily on future proofing our toolchain and how it integrates with\\nmoon. We\'ve also landed a handful of quality of life improvements.\\n\\n\x3c!--truncate--\x3e\\n\\n## Breaking changes\\n\\nTo start, we have a few breaking changes this release to be aware of!\\n\\n### Moved toolchain settings\\n\\nThe [`.moon/workspace.yml`](../docs/config/workspace) config file was getting rather bloated and\\ncomplicated, as it contained the projects list, settings for each toolchain language, and settings\\nfor each supported service (runner, generator, etc). Furthermore, this file will keep getting larger\\nwith each new language and service we support.\\n\\nTo future proof moon, and to land as many breaking changes before an official v1, we\'ve decided to\\nmove toolchain specific settings into a new file, [`.moon/toolchain.yml`](../docs/config/toolchain).\\nThis new file will house all language and dependency manager specific settings.\\n\\nTo migrate, move the `node` and `typescript` settings from `.moon/workspace.yml` to\\n`.moon/toolchain.yml`.\\n\\n```yaml title=\\".moon/toolchain.yml\\"\\nnode:\\n  # ...\\n\\ntypescript:\\n  # ...\\n```\\n\\n### Moved project-level overrides\\n\\nContinuing with the changes above, we\'ve also moved the `workspace.node` and `workspace.typescript`\\nfrom [`moon.yml`](../docs/config/project) into a new parent field, `toolchain`. We think this makes\\nmore sense.\\n\\n```yaml title=\\"moon.yml\\"\\n# Before\\nworkspace:\\n  node:\\n    version: \'...\'\\n\\n# After\\ntoolchain:\\n  node:\\n    version: \'...\'\\n```\\n\\n## Future of the toolchain\\n\\nWe\'re really proud of our toolchain, as it avoids an array problems that developers deal with on a\\nday to day basis, primarily around running tasks using the wrong version of Node.js or their chosen\\npackage manager. While we\'re in the process of supporting additional languages, starting with\\n[Deno](https://deno.land/), we had an idea... Since this is basically a better \\"version manager for\\ntools\\", why not extract this out into something else?\\n\\nAnd that\'s what we plan to do! Before we do so, we\'ve had to make some architectural changes, many\\nof which have landed in this release. During this process, we were able to implement an even better\\ntoolchain, polish many of the edge cases, and improve performance! Stay tuned for more information\\non this new tool!\\n\\n## Increased output hydration by 8-10x\\n\\nIn moon, hydration is the concept of unpacking an existing hashed artifact into a\\n[task\'s outputs](../docs/config/project#outputs) during a cache hit. In our previous implementation,\\nwe would delete all existing outputs before unpacking the archive to ensure a clean slate and to\\navoid stale files. While this worked, it wasn\'t the most performant, taking about 280ms for 1,000\\nfiles (which is still reasonably fast!).\\n\\nIn our new implementation, we now utilize a smart file tree diffing algorithm that will only unpack\\nfiles _with different content_, and will automatically remove stale files in the process. This has\\nresulted in a 10x performance increase, taking about 30ms! Multiply this by many projects, the\\nresults should be very apparent.\\n\\nWe hope you enjoy this improvement, as it\'s the first of many to come!\\n\\n## Cache any and all targets\\n\\nBy default, all [targets](../docs/concepts/target) that produce outputs are cached and archived. For\\ntargets that _do not_ produce outputs, like testing, linting, and typechecking, these are not\\ncached. This will result in slower CI times as they are continuously ran, even if nothing has\\nchanged. However with our new [remote caching](../docs/guides/remote-cache) layer, we can skip these\\nfrom running entirely!\\n\\nTo achieve this, we\'ve added a new setting to [`.moon/workspace.yml`](../docs/config/workspace)\\ncalled [`runner.archivableTargets`](../docs/config/workspace#archivabletargets). This setting\\naccepts a list of targets that should be archived, regardless of whether or not they produce\\noutputs.\\n\\nFor example, if we want to cache and archive testing, linting, and typechecking, we can define the\\nfollowing:\\n\\n```yaml title=\\".moon/workspace.yml\\"\\nrunner:\\n  archivableTargets:\\n    - \':lint\'\\n    - \':test\'\\n    - \':typecheck\'\\n```\\n\\n## Path handling in generator templates\\n\\nOur code generation is powered by [Tera](https://tera.netlify.app/docs/#built-ins), a templating\\nengine with a ton of built-in utilities. However, it does not provide utilities for file paths, and\\nas such, we now provide `path_join` and `path_relative` filters.\\n\\n```twig\\n{{ some_path | path_relative(from = workspace_root) }}\\n```\\n\\nWe also now inject variables for the working directory, destination, and workspace root. This will\\nhelp with custom paths, especially within frontmatter!\\n[View the codegen docs for more information](../docs/guides/codegen#variables).\\n\\n## Other changes\\n\\nView the\\n[official release](https://github.com/moonrepo/moon/releases/tag/%40moonrepo%2Fcli%400.20.0) for a\\nfull list of changes.\\n\\n- Added `vcs.remoteCandidates` to `.moon/workspace.yml` to customize the remotes for git to query\\n  against.\\n- Added support for `moduleSuffixes` and `moduleDetection` in TypeScript `tsconfig.json` compiler\\n  options.\\n- YAML files will now respect the closest `.editorconfig` file.\\n- Refactored terminal output for bette readability.\\n\\n## What\'s next?\\n\\nExpect the following in the v0.21 release!\\n\\n- An interactive dependency and project graph visualizer.\\n- A more performant project graph.\\n- More quality of life improvements for affected files."},{"id":"typescript-monorepo","metadata":{"permalink":"/blog/typescript-monorepo","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2022-11-21_typescript-monorepo.mdx","source":"@site/blog/2022-11-21_typescript-monorepo.mdx","title":"Integrating TypeScript in a monorepo","description":"A common question in the JavaScript ecosystem is how to integrate TypeScript in a monorepo. This is","date":"2022-11-21T00:00:00.000Z","formattedDate":"November 21, 2022","tags":[{"label":"typescript","permalink":"/blog/tags/typescript"},{"label":"monorepo","permalink":"/blog/tags/monorepo"}],"readingTime":0.505,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"https://pbs.twimg.com/profile_images/1532262885648281601/TQbEOiNd_400x400.jpg","key":"milesj"}],"frontMatter":{"slug":"typescript-monorepo","title":"Integrating TypeScript in a monorepo","authors":["milesj"],"tags":["typescript","monorepo"]},"prevItem":{"title":"moon v0.20 - Toolchain, caching, and hydration improvements","permalink":"/blog/v0.20"},"nextItem":{"title":"moon v0.19 - Remote caching beta, affected files, and graph optimization","permalink":"/blog/v0.19"}},"content":"A common question in the JavaScript ecosystem is how to integrate TypeScript in a monorepo. This is\\na fair question, as there\'s no in-depth source of truth, or one perfect way of doing it. However, we\\ntook it upon ourselves to answer this question!\\n\\n\x3c!--truncate--\x3e\\n\\nBased on our experience scaling and managing frontend repositories in open source and large\\ncompanies like Airbnb and Coinbase, we\'re happy to\\n[announce an in-depth guide on using TypeScript project references in a monorepo](../docs/guides/javascript/typescript-project-refs)!\\n\\nWe hope you find this guide useful, and if you have any questions, feel free to discuss them in our\\n[Discord community](https://discord.gg/qCh9MEynv2)!"},{"id":"v0.19","metadata":{"permalink":"/blog/v0.19","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2022-11-14_v0.19.mdx","source":"@site/blog/2022-11-14_v0.19.mdx","title":"moon v0.19 - Remote caching beta, affected files, and graph optimization","description":"With this release, we\'ve focused heavily on our remote caching architecture. Since this is a massive","date":"2022-11-14T00:00:00.000Z","formattedDate":"November 14, 2022","tags":[{"label":"affected","permalink":"/blog/tags/affected"},{"label":"remote-cache","permalink":"/blog/tags/remote-cache"},{"label":"dep-graph","permalink":"/blog/tags/dep-graph"}],"readingTime":2.895,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"https://pbs.twimg.com/profile_images/1532262885648281601/TQbEOiNd_400x400.jpg","key":"milesj"}],"frontMatter":{"slug":"v0.19","title":"moon v0.19 - Remote caching beta, affected files, and graph optimization","authors":["milesj"],"tags":["affected","remote-cache","dep-graph"],"image":"./img/v0.19.png"},"prevItem":{"title":"Integrating TypeScript in a monorepo","permalink":"/blog/typescript-monorepo"},"nextItem":{"title":"moon v0.18 - Improved configuration and initialization flow","permalink":"/blog/v0.18"}},"content":"import Image from \'@site/src/components/Image\';\\n\\nWith this release, we\'ve focused heavily on our remote caching architecture. Since this is a massive\\ntask that requires much work behind the scenes, this overall release is rather light.\\n\\n\x3c!--truncate--\x3e\\n\\n## Remote caching beta\\n\\nA major request for moon is to support remote caching. This is a critical feature that allows\\nartifacts to be shared across machines and environments, by storing them in a cloud storage\\nprovider, like AWS S3.\\n\\nWe\'ve been working on this feature for months, primarily behind the scenes building the necessary\\nservices and tools, and we\'ve finally reached a point where we could integrate it with moon\\ndirectly! However, since this feature is very complex, it\'s not yet available to the public, but\\nwhile you wait, you can sign up for beta access! Jump over to the\\n[official remote caching documentation for more information](../docs/guides/remote-cache)!\\n\\nWe\'ll be working on remote caching through every release, continually polishing the implementation,\\nsupporting new features, enabling new regions, calculating pricing, so on and so forth. So stay\\ntuned!\\n\\n## Affected files filtering\\n\\nWe\'ve spent a good portion of this release working on affected detection for projects and tasks,\\nprimarily through `--affected`, and have uncovered and fixed a handful of edge cases. With that\\nbeing said, we asked ourselves, \\"How could we improve the developer experience even more\\"? What\\nabout passing the affected files list to the running task?\\n\\nAnd that\'s exactly what we\'ve done through the new task option\\n[`affectedFiles`](../docs/config/project#affectedfiles)! This option works in unison with the\\n`--affected` option, enabling some awesome functionality. Given the following config:\\n\\n```yaml title=\\"moon.yml\\" {6}\\ntasks:\\n  lint:\\n    command: \'eslint\'\\n    options:\\n      affectedFiles: true\\n```\\n\\nWhen we run this task _without_ `--affected`, it will append an argument for the current directory\\n(`.`). This will lint the entire project.\\n\\n```shell\\n# moon run project:lint\\neslint .\\n```\\n\\nHowever, when we run this task _with_ `--affected`, and have have touched files in the working tree,\\nit will now append an argument for each file that matches the task\'s `inputs`. This will now only\\nlint the provided files, _instead_ of the entire project.\\n\\n```shell\\n# moon run project:lint --affected\\neslint ./file.ts ./another/file.ts\\n```\\n\\nThis functionality is _perfect_ pre-commit hooks, and as such, we\'ve added a\\n[guide for utilizing this pattern with git hooks](../docs/guides/git-hooks)!\\n\\n## Dependency graph optimizations\\n\\nOur dependency graph determines which targets to run, what tools to install, projects to sync, and\\nin which order. It\'s a very complex directed acyclic graph, and has only gotten more complicated\\nover the year, especially with the introduction of project-level tool overrides.\\n\\nWe decided to rewrite the dependency graph from the ground up to mitigate many of these issues,\\noptimize nodes and edges, reduce the number of data cloning, and to increase the overall\\nperformance. Everything will still work exactly the same (all of our existing tests passed with no\\nissue)!\\n\\nOn top of this, we\'ve also migrated the internals of moon to a new hashing algorithm that should see\\na 5-10% increase in performance!\\n\\n## Other changes\\n\\nView the\\n[official release](https://github.com/moonrepo/moon/releases/tag/%40moonrepo%2Fcli%400.19.0) for a\\nfull list of changes.\\n\\n- Package managers in the toolchain are now installed in isolation, instead of through Node.js.\\n- JSON files will now respect the closest `.editorconfig` file.\\n- Webhook payloads now include information about the running CI/CD environment.\\n- Generator can now merge JSON/YAML template files.\\n\\n## What\'s next?\\n\\nExpect the following in the v0.20 release!\\n\\n- Continuation of remote caching work!\\n- Performance improvements for output hydration.\\n- Toolchain improvements."},{"id":"v0.18","metadata":{"permalink":"/blog/v0.18","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2022-10-31_v0.18.mdx","source":"@site/blog/2022-10-31_v0.18.mdx","title":"moon v0.18 - Improved configuration and initialization flow","description":"Happy Halloween \ud83c\udf83 \ud83d\udc7b! With this spooky release, we\'ve focused heavily on our internals and","date":"2022-10-31T00:00:00.000Z","formattedDate":"October 31, 2022","tags":[{"label":"projects","permalink":"/blog/tags/projects"},{"label":"config","permalink":"/blog/tags/config"},{"label":"init","permalink":"/blog/tags/init"},{"label":"node","permalink":"/blog/tags/node"}],"readingTime":2.09,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"https://pbs.twimg.com/profile_images/1532262885648281601/TQbEOiNd_400x400.jpg","key":"milesj"}],"frontMatter":{"slug":"v0.18","title":"moon v0.18 - Improved configuration and initialization flow","authors":["milesj"],"tags":["projects","config","init","node"],"image":"./img/v0.18.png"},"prevItem":{"title":"moon v0.19 - Remote caching beta, affected files, and graph optimization","permalink":"/blog/v0.19"},"nextItem":{"title":"moon v0.17 - Webhooks, extended YAML, and improved runtime performance","permalink":"/blog/v0.17"}},"content":"import Image from \'@site/src/components/Image\';\\n\\nHappy Halloween \ud83c\udf83 \ud83d\udc7b! With this spooky release, we\'ve focused heavily on our internals and\\nbenchmarking performance metrics, so it\'s rather light on new features, but we still have some to\\nshow!\\n\\n\x3c!--truncate--\x3e\\n\\n## Improved projects configuration\\n\\nWhen moon initially launched, it required defining all\\n[`projects`](../docs/config/workspace#projects) using a map. In v0.3, we added support for globs to\\nease the burden of defining many projects. At this point, you had to choose between the 2 patterns,\\nwhich wasn\'t always ideal.\\n\\nTo improve upon this, you can now define a map _and_ globs using a 3rd pattern, like so.\\n\\n```yaml title=\\".moon/workspace.yml\\"\\nprojects:\\n  globs:\\n    - \'apps/*\'\\n    - \'packages/*\'\\n  sources:\\n    www: \'www\'\\n```\\n\\n## Improved `moon init` flow\\n\\nThe `moon init` command hasn\'t changed much since our v0.1 release, and with many new features and\\nconfigurations over these last 18 releases, the initialization flow has fallen quite behind. We felt\\nit was the perfect time to modernize this command a bit.\\n\\nOn top of automatically detecting settings from the environment, the command will also now prompt\\nyou with additional questions while configuring Node.js or TypeScript. Here\'s an example of this\\nflow:\\n\\n<Image src={require(\'./img/v0.18/init-flow.png\')} width=\\"80%\\" />\\n\\nFurthermore, the command also supports enabling a new tool (appending configuration to\\n`.moon/workspace.yml`) into an _existing_ moon repository, by running `moon init --tool <name>`.\\n\\n## Customize `node` execution arguments\\n\\nmoon manages the Node.js binary in our toolchain, and runs all Node.js based tasks using this\\nbinary, instead of relying on the binary found in the developer\'s environment. Because of this, how\\n`node` is executed is abstracted away from end users.\\n\\nWhat if you wanted to use an [experimental loader](https://nodejs.org/api/esm.html#loaders) and\\nexecute TypeScript code at _runtime_? Or to preserve symlinks? Well, you couldn\'t... but no longer,\\nas we\'ve added a new setting, [`node.binExecArgs`](../docs/config/toolchain#binexecargs), that\\nallows additional `node` [CLI arguments](https://nodejs.org/api/cli.html#options) to be defined,\\nthat will be passed to _all_ executions.\\n\\n```yaml title=\\".moon/workspace.yml\\" {2-4}\\nnode:\\n  binExecArgs:\\n    - \'--loader\'\\n    - \'@boost/module/loader\'\\n```\\n\\n> Learn more about the\\n> [Boost module loader](https://boostlib.dev/docs/module#ecmascript-module-loaders)!\\n\\n## Other changes\\n\\nView the\\n[official release](https://github.com/moonrepo/moon/releases/tag/%40moonrepo%2Fcli%400.18.0) for a\\nfull list of changes.\\n\\n- Default Node.js version has been updated to v18.12 (the new LTS) from v16.17.\\n- Updated the `moon check` command to support an `--all` flag.\\n- Improvements to how we store stdout/stderr logs for ran targets.\\n- Work tree dirty checks when running migration commands.\\n\\n## What\'s next?\\n\\nExpect the following in the v0.19 release!\\n\\n- Laying the groundwork for _remote caching_!\\n- An in-repo secrets management layer.\\n- Performance and affected improvements."},{"id":"v0.17","metadata":{"permalink":"/blog/v0.17","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2022-10-21_v0.17.mdx","source":"@site/blog/2022-10-21_v0.17.mdx","title":"moon v0.17 - Webhooks, extended YAML, and improved runtime performance","description":"With this release, we\'re landing the first iteration of our notifier service, starting with","date":"2022-10-21T00:00:00.000Z","formattedDate":"October 21, 2022","tags":[{"label":"notifier","permalink":"/blog/tags/notifier"},{"label":"runner","permalink":"/blog/tags/runner"},{"label":"config","permalink":"/blog/tags/config"},{"label":"editors","permalink":"/blog/tags/editors"},{"label":"vscode","permalink":"/blog/tags/vscode"}],"readingTime":3.18,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"https://pbs.twimg.com/profile_images/1532262885648281601/TQbEOiNd_400x400.jpg","key":"milesj"}],"frontMatter":{"slug":"v0.17","title":"moon v0.17 - Webhooks, extended YAML, and improved runtime performance","authors":["milesj"],"tags":["notifier","runner","config","editors","vscode"],"image":"./img/v0.17.png"},"prevItem":{"title":"moon v0.18 - Improved configuration and initialization flow","permalink":"/blog/v0.18"},"nextItem":{"title":"New VS Code extension!","permalink":"/blog/vscode-extension"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\n\\nWith this release, we\'re landing the first iteration of our notifier service, starting with\\nwebhooks! We\'ve also spent some time working on quality of life improvements.\\n\\n\x3c!--truncate--\x3e\\n\\n## Breaking changes\\n\\nTo start, we have a few breaking changes this release to be aware of!\\n\\n### Minor changes to ID formatting\\n\\nAn ID refers to many things \u2014 project names, task names, target segments, so on and so forth. When\\nparsing these values, we format them to remove unwanted characters, as these IDs are used in many\\ncontexts, many of which need to be strict.\\n\\nPreviously, we would remove unwanted characters entirely. Instead, we now replace them with dashes\\n(`-`) for better readability. Take the following for example:\\n\\n| ID         | Old       | New        |\\n| :--------- | :-------- | :--------- |\\n| domain.com | domaincom | domain-com |\\n| build:esm  | buildesm  | build-esm  |\\n\\n### Task `type` has been renamed to `platform`\\n\\nThis setting was renamed for a few reasons. To start, tasks actually have a\\n[type internally](../docs/concepts/task#types) that is not configured, but is inferred based on\\nwhat\'s configured. This was a bit confusing.\\n\\nAnd secondly, our toolchain refers to language integrations as platforms, and since this setting\\ndetermines which tool to run with, we wanted to align on the platform terminology.\\n\\n<Tabs\\n  groupId=\\"task-type\\"\\n  defaultValue=\\"before\\"\\n  values={[\\n    { label: \'Before\', value: \'before\' },\\n    { label: \'After\', value: \'after\' },\\n  ]}\\n>\\n<TabItem value=\\"before\\">\\n\\n```yaml\\ntasks:\\n  clean:\\n    command: \'rm -rf ./dist\'\\n    type: \'system\'\\n```\\n\\n</TabItem>\\n<TabItem value=\\"after\\">\\n\\n```yaml\\ntasks:\\n  clean:\\n    command: \'rm -rf ./dist\'\\n    platform: \'system\'\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\n> Because of this change, the `$taskType` token was also renamed to `$taskPlatform`!\\n\\n## Webhook events (experimental)\\n\\nLooking to gather metrics for your pipelines? Gain insight into run durations and failures? Maybe\\nyou want to send Slack or Discord notifications? With our new notifier system, this is now possible\\nthrough webhooks!\\n\\nSimply enable the [`notifier.webhookUrl`](../docs/config/workspace#webhookurl) setting to start\\nreceiving events from your CI environments.\\n\\n```yaml title=\\".moon/workspace.yml\\"\\nnotifier:\\n  webhookUrl: \'https://api.company.com/some/endpoint\'\\n```\\n\\n> View the [official guide on webhooks](../docs/guides/webhooks) for a full list of events and an\\n> example payload structure!\\n\\n## YAML anchors and aliases\\n\\nWe\'ve updated our YAML configuration files to support extended syntax,\\n[anchors (`&`) and aliases (`*`)](https://support.atlassian.com/bitbucket-cloud/docs/yaml-anchors/).\\nWith this new syntax, you\'re now able to reduce the amount of duplication required in your config\\nfiles, especially when declaring tasks, as demonstrated below!\\n\\n<Tabs\\n  groupId=\\"yaml\\"\\n  defaultValue=\\"before\\"\\n  values={[\\n    { label: \'Before\', value: \'before\' },\\n    { label: \'After\', value: \'after\' },\\n  ]}\\n>\\n<TabItem value=\\"before\\">\\n\\n```yaml\\ntasks:\\n  astro:\\n    command: \'astro\'\\n    local: true\\n\\n  dev:\\n    command: \'astro dev\'\\n    inputs:\\n      - \'@group(astro)\'\\n    local: true\\n\\n  build:\\n    command: \'astro build\'\\n    inputs:\\n      - \'@group(astro)\'\\n    outputs:\\n      - \'dist\'\\n\\n  check:\\n    command: \'astro check\'\\n    inputs:\\n      - \'@group(astro)\'\\n    deps:\\n      - \'~:typecheck\'\\n\\n  preview:\\n    command: \'astro preview\'\\n    inputs:\\n      - \'@group(astro)\'\\n    deps:\\n      - \'~:build\'\\n    local: true\\n```\\n\\n</TabItem>\\n<TabItem value=\\"after\\">\\n\\n```yaml\\n_astro: &astro\\n  command: \'astro\'\\n  inputs:\\n    - \'@group(astro)\'\\n\\ntasks:\\n  dev:\\n    <<: *astro\\n    args: \'dev\'\\n    local: true\\n\\n  build:\\n    <<: *astro\\n    args: \'build\'\\n    outputs:\\n      - \'dist\'\\n\\n  check:\\n    <<: *astro\\n    args: \'check\'\\n\\n  preview:\\n    <<: *astro\\n    args: \'preview\'\\n    deps:\\n      - \'~:build\'\\n    local: true\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\n## VS Code extension\\n\\nIf you missed the [announcement earlier this week](./vscode-extension), we released the initial\\nversion of our new VS Code extension! Give it a try and\\n[refer to the documentation](../docs/editors/vscode) for more information.\\n\\n## Other changes\\n\\nView the\\n[official release](https://github.com/moonrepo/moon/releases/tag/%40moonrepo%2Fcli%400.17.0) for a\\nfull list of changes.\\n\\n- Increased runtime performance and reduced memory consumption.\\n- Template enum variables can now define objects for their\\n  [`values`](../docs/config/template#values).\\n- Task `deps` can now omit the `~:` prefix for tasks within the current project.\\n- The `moon check` command can now use the `--report` option.\\n\\n## What\'s next?\\n\\nExpect the following in the v0.18 release!\\n\\n- Workflow improvements for `moon init`.\\n- Benchmarks and performance tuning.\\n- Individual stdout/stderr log files when running tasks."},{"id":"vscode-extension","metadata":{"permalink":"/blog/vscode-extension","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2022-10-17_vscode-extension.mdx","source":"@site/blog/2022-10-17_vscode-extension.mdx","title":"New VS Code extension!","description":"We\'re very excited to announce the initial release of our Visual Studio Code extension!","date":"2022-10-17T00:00:00.000Z","formattedDate":"October 17, 2022","tags":[{"label":"editors","permalink":"/blog/tags/editors"},{"label":"vscode","permalink":"/blog/tags/vscode"}],"readingTime":0.645,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"https://pbs.twimg.com/profile_images/1532262885648281601/TQbEOiNd_400x400.jpg","key":"milesj"}],"frontMatter":{"slug":"vscode-extension","title":"New VS Code extension!","authors":["milesj"],"tags":["editors","vscode"]},"prevItem":{"title":"moon v0.17 - Webhooks, extended YAML, and improved runtime performance","permalink":"/blog/v0.17"},"nextItem":{"title":"moon v0.16 - Per-project tool versions and TypeScript improvements","permalink":"/blog/v0.16"}},"content":"import Image from \'@site/src/components/Image\';\\n\\nWe\'re very excited to announce the initial release of our Visual Studio Code extension!\\n\\n\x3c!--truncate--\x3e\\n\\nIf you\'re a huge VS Code fan like us, you most likely use extensions in your everyday workflow. We\\nwant to enhance this experience by providing a fully integrated and interactive moon console! Here\'s\\na preview of what it looks like:\\n\\n<Image src={require(\'../docs/editors/vscode/projects-view.png\')} width=\\"40%\\" />\\n\\nExcited?? Want to learn more? Check out the official\\n[moonrepo.moon-console](https://marketplace.visualstudio.com/items?itemName=moonrepo.moon-console)\\nmarketplace page, or read the [official documentation](../docs/editors/vscode). This is only the\\nfirst iteration of the extension. Expect more advanced features in the future, like...\\n\\n- Schema validation for configuration files\\n- Autocompletion for configuration files\\n- Automatic running/building of projects in the background\\n- File type association\\n- Integrated language server\\n- And much more!"},{"id":"v0.16","metadata":{"permalink":"/blog/v0.16","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2022-10-06_v0.16.mdx","source":"@site/blog/2022-10-06_v0.16.mdx","title":"moon v0.16 - Per-project tool versions and TypeScript improvements","description":"With this release, we\'ve landed a long standing request of supporting project-level overrides for","date":"2022-10-06T00:00:00.000Z","formattedDate":"October 6, 2022","tags":[{"label":"toolchain","permalink":"/blog/tags/toolchain"},{"label":"runner","permalink":"/blog/tags/runner"},{"label":"generator","permalink":"/blog/tags/generator"},{"label":"typescript","permalink":"/blog/tags/typescript"},{"label":"node","permalink":"/blog/tags/node"}],"readingTime":3.265,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"https://pbs.twimg.com/profile_images/1532262885648281601/TQbEOiNd_400x400.jpg","key":"milesj"}],"frontMatter":{"slug":"v0.16","title":"moon v0.16 - Per-project tool versions and TypeScript improvements","authors":["milesj"],"tags":["toolchain","runner","generator","typescript","node"],"image":"./img/v0.16.png"},"prevItem":{"title":"New VS Code extension!","permalink":"/blog/vscode-extension"},"nextItem":{"title":"moon v0.15 - Enhanced Docker support and 1,000 stars!","permalink":"/blog/v0.15"}},"content":"With this release, we\'ve landed a long standing request of supporting project-level overrides for\\ntools configured in the workspace, as well as some quality of life improvements for TypeScript.\\n\\n\x3c!--truncate--\x3e\\n\\n## Per-project tool version overrides\\n\\nSince moons inception, our [toolchain](../docs/concepts/toolchain) has only supported a single\\nversion of a tool (Node.js), as we wanted to embrace the single version policy and encourage all\\nconsumers to keep their tooling version consistent across all projects for reliability. While this\\nworks flawlessly, it\'s not entirely realistic, as many companies have legacy projects that are stuck\\non older versions for whatever reason, and integrating them into moon was rather difficult.\\n\\nWell no more! We\'ve refactored our toolchain to support tool overrides on a project-by-project\\nbasis. Since we only support Node.js at the moment, this can be achieved with the new\\n[`workspace.node.version`](../docs/config/project#node) setting in\\n[`moon.yml`](../docs/config/project).\\n\\nFor example, if your workspace Node.js version is configured as v18.\\n\\n```yml title=\\".moon/workspace.yml\\"\\nnode:\\n  version: \'18.0.0\'\\n```\\n\\nYou can now override this version at the project-level. Let\'s go with v14.\\n\\n```yml title=\\"<project>/moon.yml\\"\\nworkspace:\\n  node:\\n    version: \'14.0.0\'\\n```\\n\\nWhen running a task from a project with overrides, the toolchain will download, install, and\\nconfigure the new version behind the scenes. This new version will then be used to install\\ndependencies and execute the tasks commands.\\n\\n> Although we now support overriding the tool version, the workspace configured package manager\\n> (`node.packageManager`) and associated version cannot be overridden. This is unlikely to change.\\n\\n## Per-project dependency installs\\n\\nBecause of the toolchain refactor above, we now support per-project dependency installs as a welcome\\nside-effect. This is a necessary step in supporting new languages, especially for those that don\'t\\ninstall dependencies in the workspace for all projects, and must install them per project.\\n\\nThis also means that moon now supports non-`package.json` workspaces! If your repository _is not_\\nusing npm/pnpm/yarn workspaces, or a project _is not_ listed within the workspaces glob list,\\ndependencies will be installed within the project.\\n\\n## TypeScript improvements\\n\\n### Routing `outDir` to the cache\\n\\nA requirement for using project references is that each project must compile declarations (`.d.ts`)\\nso that consumers/dependents can resolve type information. While this makes sense, it becomes rather\\nunfortunate as each project folder is now littered with the declaration outputs, which are typically\\ngitignored.\\n\\nTo improve this experience, we\'re introducing a new setting\\n[`typescript.routeOutDirToCache`](../docs/config/toolchain#routeoutdirtocache), that will update the\\n`outDir` compiler option of _all_ projects to route to moon\'s cache directory (which should already\\nbe gitignored). This will standardize the use of project references for the entire repository.\\n\\nFor example, a project at \\"packages/components\\" will route to the following output directory:\\n\\n```json title=\\"<project>/tsconfig.json\\"\\n{\\n  // ...\\n  \\"compilerOptions\\": {\\n    // ...\\n    \\"outDir\\": \\"../../.moon/cache/types/packages/components\\"\\n  }\\n}\\n```\\n\\n> If you require declarations to live within the project, for example an npm package that ships\\n> types, you should introduce an additional configuration to handle this, like\\n> `tsconfig.build.json`.\\n\\n### Mapping project references as `paths`\\n\\nmoon automatically keeps TypeScript project references in sync with the\\n[`typescript.syncProjectReferences`](../docs/config/toolchain#syncprojectreferences) setting, which\\nis great, but we can take it further. With the new\\n[`typescript.syncProjectReferencesToPaths`](../docs/config/toolchain#syncprojectreferencestopaths)\\nsetting, project references (either synced or explicitly defined) will _also_ be mapped to the\\n`paths` compiler option, automating the list of import aliases.\\n\\nFor example, if a reference has the package name `@brand/components`, the `paths` will be mapped\\nwith:\\n\\n```json title=\\"<project>/tsconfig.json\\"\\n{\\n  // ...\\n  \\"compilerOptions\\": {\\n    // ...\\n    \\"paths\\": {\\n      \\"@brand/components\\": [\\"../shared/components/src/index.ts\\"],\\n      \\"@brand/components/*\\": [\\"../shared/components/src/*\\"]\\n    }\\n  },\\n  \\"references\\": [\\n    {\\n      \\"path\\": \\"../shared/components\\"\\n    }\\n  ]\\n}\\n```\\n\\n## Other changes\\n\\nView the\\n[official release](https://github.com/moonrepo/moon/releases/tag/%40moonrepo%2Fcli%400.16.0) for a\\nfull list of changes.\\n\\n- Template files can now be suffixed with `.tera` or `.twig` for\\n  [syntax highlighting](../docs/guides/codegen#file-extensions).\\n- We now display more commands and information when running tasks.\\n- Declare implicit task dependencies with a new\\n  [`runner.implicitDeps`](../docs/config/workspace#implicitdeps) setting.\\n\\n## What\'s next?\\n\\nExpect the following in the v0.17 release!\\n\\n- Webhooks for important pipeline events (for real this time)!\\n- YAML anchors and references in config files.\\n- And [many more](https://github.com/moonrepo/moon/issues/356)..."},{"id":"v0.15","metadata":{"permalink":"/blog/v0.15","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2022-09-26_v0.15.mdx","source":"@site/blog/2022-09-26_v0.15.mdx","title":"moon v0.15 - Enhanced Docker support and 1,000 stars!","description":"With this release, we\'ve focused heavily on Docker integration and enhancing the Dockerfile","date":"2022-09-26T00:00:00.000Z","formattedDate":"September 26, 2022","tags":[{"label":"generator","permalink":"/blog/tags/generator"},{"label":"docker","permalink":"/blog/tags/docker"}],"readingTime":3.495,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"https://pbs.twimg.com/profile_images/1532262885648281601/TQbEOiNd_400x400.jpg","key":"milesj"}],"frontMatter":{"slug":"v0.15","title":"moon v0.15 - Enhanced Docker support and 1,000 stars!","authors":["milesj"],"tags":["generator","docker"],"image":"./img/v0.15.png"},"prevItem":{"title":"moon v0.16 - Per-project tool versions and TypeScript improvements","permalink":"/blog/v0.16"},"nextItem":{"title":"moon v0.14 - Code generation and implicit dependencies","permalink":"/blog/v0.14"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\n\\nWith this release, we\'ve focused heavily on Docker integration and enhancing the `Dockerfile`\\nworkflow, as well as some minor quality of life improvements for template files and run reports.\\n\\n\x3c!--truncate--\x3e\\n\\n## 1,000 \u2b50\ufe0f\ud83c\udf1f\u2b50\ufe0f!\\n\\nBefore we dive into the release, we want to thank everyone for the initial support, as we passed\\n[1,000 stars on GitHub](https://github.com/moonrepo/moon) earlier this week! moon was announced back\\nin June, and to reach this milestone in roughly 3 months is very exciting. We greatly appreciate the\\nsupport, and to everyone that is using moon and providing feedback, we thank you from the bottom of\\nour hearts!\\n\\nWe have a very long roadmap ahead of us, but are very excited to bring all of these features to you,\\nand to improve the overall developer experience for your monorepos! Here\'s to 10,000 stars!\\n\\n## First-class Docker support\\n\\n[Docker](https://www.docker.com/) is a very popular tool that is typically a part of a developers\\nworkflow, but is also a very tedious one, as `Dockerfile`s have to be manually curated for every\\nproject. We aim to mitigate this problem by supporting Docker as a first-class feature, and by\\nintroducing 2 new commands, [`moon docker scaffold`](../docs/commands/docker/scaffold) and\\n[`moon docker prune`](../docs/commands/docker/prune).\\n\\nThese commands will automate a `Dockerfile` as much as possible to effectively take advantage of\\nDocker\'s layer caching, multi-staged builds, to reduce the amount of manual `COPY` commands, to\\nreduce the overall size of the container or image, and much more. To demonstrate this, compare the\\nbefore and after `Dockerfile`s below!\\n\\n<Tabs\\n  groupId=\\"dockerfile\\"\\n  defaultValue=\\"before\\"\\n  values={[\\n    { label: \'Before\', value: \'before\' },\\n    { label: \'After\', value: \'after\' },\\n  ]}\\n>\\n<TabItem value=\\"before\\">\\n\\n```docker\\nFROM node:latest\\n\\nWORKDIR /app\\n\\n# Install moon binary\\nRUN npm install -g @moonrepo/cli\\n\\n# Copy moon files\\nCOPY ./.moon ./.moon\\n\\n# Copy all package.json\'s and lockfiles\\nCOPY ./packages/cli/package.json ./packages/cli/package.json\\nCOPY ./packages/core-linux-arm64-gnu/package.json ./packages/core-linux-arm64-gnu/package.json\\nCOPY ./packages/core-linux-arm64-musl/package.json ./packages/core-linux-arm64-musl/package.json\\nCOPY ./packages/core-linux-x64-gnu/package.json ./packages/core-linux-x64-gnu/package.json\\nCOPY ./packages/core-linux-x64-musl/package.json ./packages/core-linux-x64-musl/package.json\\nCOPY ./packages/core-macos-arm64/package.json ./packages/core-macos-arm64/package.json\\nCOPY ./packages/core-macos-x64/package.json ./packages/core-macos-x64/package.json\\nCOPY ./packages/core-windows-x64-msvc/package.json ./packages/core-windows-x64-msvc/package.json\\nCOPY ./packages/runtime/package.json ./packages/runtime/package.json\\nCOPY ./packages/types/package.json ./packages/types/package.json\\nCOPY ./package.json ./package.json\\nCOPY ./yarn.lock ./yarn.lock\\nCOPY ./.yarn ./.yarn\\nCOPY ./.yarnrc.yml ./yarnrc.yml\\n\\n# Install toolchain and dependencies\\nRUN moon setup\\n\\n# Copy project and required files\\nCOPY ./packages/types ./packages/types\\nCOPY ./packages/runtime ./packages/runtime\\n# COPY . .\\n\\n# Build the target\\nRUN moon run runtime:build\\n```\\n\\n</TabItem>\\n<TabItem value=\\"after\\">\\n\\n```docker\\n#### BASE\\nFROM node:latest AS base\\nWORKDIR /app\\n\\n# Install moon binary\\nRUN npm install -g @moonrepo/cli\\n\\n#### WORKSPACE\\nFROM base AS workspace\\nWORKDIR /app\\n\\n# Copy entire repository and scaffold\\nCOPY . .\\nRUN moon docker scaffold runtime\\n\\n#### BUILD\\nFROM base AS build\\nWORKDIR /app\\n\\n# Copy workspace skeleton\\nCOPY --from=workspace /app/.moon/docker/workspace .\\n\\n# Install toolchain and dependencies\\nRUN moon setup\\n\\n# Copy source files\\nCOPY --from=workspace /app/.moon/docker/sources .\\n\\n# Build the target\\nRUN moon run runtime:build\\n\\n# Prune workspace\\nRUN moon docker prune\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\n> View the official [Docker usage guide](../docs/guides/docker) for an in-depth walkthrough of all\\n> these new features!\\n\\n## Frontmatter for template files\\n\\nWe released [templates and the generator in v0.14](./v0.14) for quick and easy code generation.\\nSince it was the initial release, it provided the bare minimum of features for common workflows.\\nWe\'ll continually improve this system over each release, and have done just that for this release,\\nas all template files now support [frontmatter](../docs/guides/codegen#frontmatter)! Frontmatter is\\na mechanism for declaring _per-file configuration_, and is denoted by `---` delimiters at the top of\\nthe file.\\n\\nThis allows you to do some really cool stuff, like overriding the destination path of the file using\\nthe `to` field, as well as taking full advantage of Tera\'s filters and conditional rendering!\\n\\n```twig title=\\"templates/react/components/base.tsx\\"\\n{% set component_name = name | pascal_case %}\\n\\n---\\nto: components/{{ component_name }}.tsx\\n---\\n\\nexport function {{ component_name }}() {\\n\\treturn <div />;\\n}\\n```\\n\\n## Other changes\\n\\nView the\\n[official release](https://github.com/moonrepo/moon/releases/tag/%40moonrepo%2Fcli%400.15.0) for a\\nfull list of changes.\\n\\n- Run reports (via `--report`) now include additional information, like the total duration, and\\n  estimated time savings.\\n  - The [moonrepo/run-report-action](https://github.com/marketplace/actions/moon-ci-run-reports) has\\n    been updated with this information.\\n- Improved pnpm integration for Go/Rust binaries shipped in node modules.\\n\\n## What\'s next?\\n\\nExpect the following in the v0.16 release!\\n\\n- Quality of life improvements for TypeScript.\\n- Per-project overrides for language/tool versions."},{"id":"v0.14","metadata":{"permalink":"/blog/v0.14","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2022-09-13_v0.14.mdx","source":"@site/blog/2022-09-13_v0.14.mdx","title":"moon v0.14 - Code generation and implicit dependencies","description":"With this release, we\'ve landed some new features that have been requested multiple times since","date":"2022-09-13T00:00:00.000Z","formattedDate":"September 13, 2022","tags":[{"label":"generator","permalink":"/blog/tags/generator"},{"label":"project-graph","permalink":"/blog/tags/project-graph"},{"label":"ci","permalink":"/blog/tags/ci"}],"readingTime":1.715,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"https://pbs.twimg.com/profile_images/1532262885648281601/TQbEOiNd_400x400.jpg","key":"milesj"}],"frontMatter":{"slug":"v0.14","title":"moon v0.14 - Code generation and implicit dependencies","authors":["milesj"],"tags":["generator","project-graph","ci"]},"prevItem":{"title":"moon v0.15 - Enhanced Docker support and 1,000 stars!","permalink":"/blog/v0.15"},"nextItem":{"title":"moon v0.13 - Hashing and toolchain improvements","permalink":"/blog/v0.13"}},"content":"import Image from \'@site/src/components/Image\';\\n\\nWith this release, we\'ve landed some new features that have been requested multiple times since\\nlaunch. A code generation and template scaffolding layer, as well as implicit dependency scanning\\nfor the project graph!\\n\\n\x3c!--truncate--\x3e\\n\\n## New `moon generate` command\\n\\nCode generation is the staple of any large company or repository. Want to spin up a new application?\\nWhat about an npm package? Or maybe third-party integrations? Avoid copy-and-pasting existing code,\\nand instead generate it with the new `moon generate` command, which is powered by our new generator\\nsystem.\\n\\nThe generator will locate a template by name on the file system (\\"npm-package\\" in the example\\nbelow), prompt and interpolate variables, render the files with [Tera](https://tera.netlify.app/) (a\\nRust based template engine), and write the files to the target destination.\\n\\n```shell\\n# Generate code from a template to a target directory\\n$ moon generate npm-package ./packages/example\\n```\\n\\nLearn more about [code generation in the official guide](../docs/guides/codegen)!\\n\\n## Implicit dependency scanning\\n\\nThis has been a request since moon\'s official release, and it\'s finally here! Up until now, if you\\nwanted project-to-project dependency relationships, you had to explicitly declare them with\\n[`dependsOn`](../docs/config/project#dependson). But thanks to a\\n[ton of](https://github.com/moonrepo/moon/pull/288)\\n[infrastructure](https://github.com/moonrepo/moon/pull/249) and\\n[platform](https://github.com/moonrepo/moon/pull/277) changes, we can now infer implicit\\ndependencies automatically!\\n\\nWe still suggest using explicit dependencies, as it provides more\\n[automation like project syncing](../docs/concepts/project#dependencies), but implicit is great for\\nadoption and migration purposes.\\n\\n## Report CI runs on pull requests\\n\\nWe\'re fans of continuous and easily accessible feedback, and as such, have released a new GitHub\\naction, [`moonrepo/run-report-action`](https://github.com/marketplace/actions/moon-ci-run-reports),\\nwhich reports the results of [`moon ci`](../docs/commands/ci) as a pull request comment. The report\\nlooks something like the following:\\n\\n<Image src={require(\'../static/img/github/run-report.png\')} width=\\"60%\\" />\\n\\n## Other changes\\n\\nView the\\n[official release](https://github.com/moonrepo/moon/releases/tag/%40moonrepo%2Fcli%400.14.0) for a\\nfull list of changes.\\n\\n- When running in a Docker container, caching is disabled in an effort to greatly reduce the size of\\n  the image.\\n- Updated `moon setup` to also install Node.js dependencies.\\n\\n## What\'s next?\\n\\nExpect the following in the v0.15 release!\\n\\n- Major Docker workflow improvements!\\n- Frontmatter configuration within template files."},{"id":"v0.13","metadata":{"permalink":"/blog/v0.13","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2022-09-01_v0.13.mdx","source":"@site/blog/2022-09-01_v0.13.mdx","title":"moon v0.13 - Hashing and toolchain improvements","description":"With this release, we\'ve landed some improvements to our smart hashing, and paved the road for","date":"2022-09-01T00:00:00.000Z","formattedDate":"September 1, 2022","tags":[{"label":"hasher","permalink":"/blog/tags/hasher"},{"label":"toolchain","permalink":"/blog/tags/toolchain"}],"readingTime":2.995,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"https://pbs.twimg.com/profile_images/1532262885648281601/TQbEOiNd_400x400.jpg","key":"milesj"}],"frontMatter":{"slug":"v0.13","title":"moon v0.13 - Hashing and toolchain improvements","authors":["milesj"],"tags":["hasher","toolchain"]},"prevItem":{"title":"moon v0.14 - Code generation and implicit dependencies","permalink":"/blog/v0.14"}},"content":"With this release, we\'ve landed some improvements to our smart hashing, and paved the road for\\nadditional languagues and tooling.\\n\\n\x3c!--truncate--\x3e\\n\\n## Node.js is now optional\\n\\nTitle may seem confusing at first, but don\'t worry, everything is fine! For some context, moon has\\nbeen designed to be language agnostic as we plan to support more than JavaScript in the future.\\nHowever, some aspects of the codebase were hard-coded for JavaScript and made the assumption that\\nJavaScript will always be used, with one such aspect being the\\n[`node`](../docs/config/workspace#node) setting in\\n[`.moon/workspace.yml`](../docs/config/workspace).\\n\\nWe\'ve reworked this setting to be optional, which allows a repository to opt out of JavaScript.\\nRight now, this basically does nothing as we do not support other languages yet, but we felt it\\nnecessary to report it anyways! A side-effect of this change is that actions in the runner have been\\nrenamed, for example, `SetupToolchain` -> `SetupNodeToolchain`.\\n\\n## Improved hashing accuracy\\n\\nOur [smart hashing layer](../docs/concepts/cache#hashing) is pretty powerful, but was not entirely\\naccurate. Up until now, when hashing a Node.js project, we\'d include the `dependencies`,\\n`devDependencies`, and `peerDependencies` versions located within the project\'s `package.json` as\\nhash inputs. This was great, because if a dependency was explicitly upgraded in the `package.json`,\\nit would invalidate the previous hashes as the version number changed.\\n\\nHowever, what if the dependency was implicitly upgraded by another project, but the `package.json`\\nwas not modified? These kind of transitive changes were currently ignored by moon, but no longer, as\\nmoon will now resolve all `package.json` dependencies to the resolved version found in the root\\nlockfile (`package-lock.json`, `yarn.lock`, etc)!\\n\\nAt moon, we believe in providing consumers with the ability to configure to their needs, and as\\nsuch, have added a new [`hasher`](../docs/config/workspace#hasher) setting to\\n[`.moon/workspace.yml`](../docs/config/workspace). This setting will allow you to choose between the\\n2 hashing patterns above!\\n\\n## New `moon check` command\\n\\nIf you\'re like us, you\'re constantly testing, linting, typechecking, so on and so forth, a project\\nwhile developing. This was rather cumbersome, as you either had to use separate run commands\\n(`moon run project:test`, `moon run project:lint`, etc), or use the multi-run approach\\n(`moon run project:test project:lint`). Both approaches were not ideal for rapid development.\\n\\nTo simplify this process, we\'ve added a new [`moon check`](../docs/commands/check) command, that\\nwill automatically run _all_ build and test tasks for a project (or many projects)! Local and non-CI\\ntasks will _not_ be ran.\\n\\n```shell\\n# Check project at current working directory\\n$ moon check\\n\\n# Check project by name\\n$ moon check app\\n\\n# Check multiple projects by name\\n$ moon check client server\\n```\\n\\n## New `@moonrepo/types` package\\n\\nWe have many ideas for moon specific npm packages that we plan to release, but before we do that, we\\nneed to ensure all of them are built with the correct interfaces. To solve this, we are shipping a\\nnew package, [@moonrepo/types](https://www.npmjs.com/package/@moonrepo/types), that simply publishes\\nTypeScript declarations. It contains everything from project and task shapes, configuration\\nstructures, runner information, and more.\\n\\n```ts\\nimport type { ProjectConfig } from \'@moonrepo/types\';\\n```\\n\\n## Other changes\\n\\nView the\\n[official release](https://github.com/moonrepo/moon/releases/tag/%40moonrepo%2Fcli%400.13.0) for a\\nfull list of changes.\\n\\n- The runner will now fail with an error if a task has defined `outputs` but an output was not\\n  created after the task is executed. This change was made so that artifacts are deterministic.\\n- The `actionRunner` setting in [`.moon/workspace.yml`](../docs/config/workspace) was renamed to\\n  `runner`.\\n\\n## What\'s next?\\n\\nExpect the following in the v0.14 release!\\n\\n- A `moon generate` command to generate new projects, files, scaffolding, and more from pre-defined\\n  templates.\\n- Implicit dependency discovery. moon will now scan manifest files and determine project\\n  relationships."}]}')}}]);