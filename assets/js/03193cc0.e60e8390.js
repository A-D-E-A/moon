"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3363],{6243:function(e,t,n){n.d(t,{Z:function(){return l}});var a=n(7378),o=n(8944),r="tabItem_lLGn";function l(e){var t=e.children,n=e.hidden,l=e.className;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(r,l),hidden:n},t)}},637:function(e,t,n){n.d(t,{Z:function(){return m}});var a=n(5773),o=n(7378),r=n(6457),l=n(784),i=n(9947),s=n(3457),c=n(8944),p="tabList_lSCs",u="tabItem_WhCL";function d(e){var t,n,r,d=e.lazy,m=e.block,f=e.defaultValue,g=e.values,k=e.groupId,h=e.className,v=o.Children.map(e.children,(function(e){if((0,o.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),y=null!=g?g:v.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),b=(0,l.l)(y,(function(e,t){return e.value===t.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var j=null===f?f:null!=(t=null!=f?f:null==(n=v.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(r=v[0])?void 0:r.props.value;if(null!==j&&!y.some((function(e){return e.value===j})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+j+'" but none of its children has the corresponding value. Available values are: '+y.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var N=(0,i.U)(),w=N.tabGroupChoices,x=N.setTabGroupChoices,T=(0,o.useState)(j),C=T[0],E=T[1],S=[],Z=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=k){var D=w[k];null!=D&&D!==C&&y.some((function(e){return e.value===D}))&&E(D)}var I=function(e){var t=e.currentTarget,n=S.indexOf(t),a=y[n].value;a!==C&&(Z(t),E(a),null!=k&&x(k,a))},q=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=S.indexOf(e.currentTarget)+1;n=S[a]||S[0];break;case"ArrowLeft":var o=S.indexOf(e.currentTarget)-1;n=S[o]||S[S.length-1]}null==(t=n)||t.focus()};return o.createElement("div",{className:(0,c.Z)("tabs-container",p)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.Z)("tabs",{"tabs--block":m},h)},y.map((function(e){var t=e.value,n=e.label,r=e.attributes;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:C===t?0:-1,"aria-selected":C===t,key:t,ref:function(e){return S.push(e)},onKeyDown:q,onFocus:I,onClick:I},r,{className:(0,c.Z)("tabs__item",u,null==r?void 0:r.className,{"tabs__item--active":C===t})}),null!=n?n:t)}))),d?(0,o.cloneElement)(v.filter((function(e){return e.props.value===C}))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},v.map((function(e,t){return(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==C})}))))}function m(e){var t=(0,r.Z)();return o.createElement(d,(0,a.Z)({key:String(t)},e))}},6642:function(e,t,n){n.d(t,{Z:function(){return c}});var a=n(7378),o=n(9589),r=n(6243),l=n(637);function i(e,t,n){var a=e.package?"yarn workspace "+e.package+" add ":"yarn add ";return e.dev?a+="--dev ":e.peer&&(a+="--peer "),n&&t&&!e.package&&(a+="-W "),a+=e.dep}function s(e,t){var n="pnpm add ";return e.dev?n+="--save-dev ":e.peer&&(n+="--save-peer "),e.package?n+="--filter "+e.package+" ":t&&(n+="-w "),n+=e.dep}function c(e){var t=i(e,!1,!0),n=s(e,!1);return e.package||(t+="\n\n# If using workspaces\n",n+="\n\n# If using workspaces\n",t+=i(e,!0,!0),n+=s(e,!0)),a.createElement(l.Z,{groupId:"package-manager",defaultValue:"yarn",values:[{label:"Yarn",value:"yarn"},{label:"Yarn (classic)",value:"yarn1"},{label:"npm",value:"npm"},{label:"pnpm",value:"pnpm"}]},a.createElement(r.Z,{value:"yarn"},a.createElement(o.Z,{language:"shell"},i(e,!1,!1))),a.createElement(r.Z,{value:"yarn1"},a.createElement(o.Z,{language:"shell"},t)),a.createElement(r.Z,{value:"npm"},a.createElement(o.Z,{language:"shell"},function(e){var t="npm install ";return e.dev?t+="--save-dev ":e.peer&&(t+="--save-peer "),e.package&&(t+="--workspace "+e.package+" "),t+e.dep}(e))),a.createElement(r.Z,{value:"pnpm"},a.createElement(o.Z,{language:"shell"},n)))}},1311:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return d}});var a=n(5773),o=n(808),r=(n(7378),n(5318)),l=(n(637),n(6243),n(6642)),i=["components"],s={title:"TypeScript example",sidebar_label:"TypeScript"},c=void 0,p={unversionedId:"guides/examples/typescript",id:"guides/examples/typescript",title:"TypeScript example",description:"TypeScript has been prototyped in our",source:"@site/docs/guides/examples/typescript.mdx",sourceDirName:"guides/examples",slug:"/guides/examples/typescript",permalink:"/docs/guides/examples/typescript",draft:!1,editUrl:"https://github.com/moonrepo/moon/tree/master/website/docs/guides/examples/typescript.mdx",tags:[],version:"current",frontMatter:{title:"TypeScript example",sidebar_label:"TypeScript"},sidebar:"docs",previous:{title:"React",permalink:"/docs/guides/examples/react"},next:{title:"Vite & Vitest",permalink:"/docs/guides/examples/vite"}},u={},d=[{value:"Setup",id:"setup",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Root-level",id:"root-level",level:3},{value:"Project-level",id:"project-level",level:3},{value:"Sharing",id:"sharing",level:3}],m={toc:d};function f(e){var t=e.components,n=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"TypeScript has been prototyped in our\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/moonrepo/examples/blob/master/.moon/project.yml#L95"},"examples repository"),",\ncheck it out!")),(0,r.kt)("p",null,"In this guide, you'll learn how to integrate ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/"},"TypeScript")," into moon. We'll be\nusing ",(0,r.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/project-references.html"},"project references"),", as\nit ensures that only affected projects are built, and not the entire repository."),(0,r.kt)("p",null,"Begin by installing ",(0,r.kt)("inlineCode",{parentName:"p"},"typescript")," and any pre-configured tsconfig packages in your root. We suggest\nusing the same version across the entire repository."),(0,r.kt)(l.Z,{dep:"typescript tsconfig-beemo",dev:!0,mdxType:"AddDepsTabs"}),(0,r.kt)("h2",{id:"setup"},"Setup"),(0,r.kt)("p",null,"Since type-checking is a universal workflow, add a ",(0,r.kt)("inlineCode",{parentName:"p"},"typecheck")," task to\n",(0,r.kt)("a",{parentName:"p",href:"../../config/global-project"},(0,r.kt)("inlineCode",{parentName:"a"},".moon/project.yml"))," with the following parameters."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/project.yml"',title:'".moon/project.yml"'},"tasks:\n    typecheck:\n        command: 'tsc'\n        args:\n            # Use incremental builds with project references\n            - '--build'\n            # Use verbose logging to see affected projects\n            - '--verbose'\n        inputs:\n            # Source and test files\n            - 'src/**/*'\n            - 'tests/**/*'\n            # Type declarations\n            - 'types/**/*'\n            # Project configs\n            - 'tsconfig.json'\n            - 'tsconfig.*.json'\n            # Root configs (extended from only)\n            - '/tsconfig.options.json'\n        outputs:\n            # Matches `compilerOptions.outDir`\n            - 'dts'\n")),(0,r.kt)("p",null,"Projects can extend this task and provide additional parameters if need be, for example."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="<project>/project.yml"',title:'"<project>/project.yml"'},"tasks:\n    typecheck:\n        args:\n            # Force build every time\n            - '--force'\n")),(0,r.kt)("h2",{id:"configuration"},"Configuration"),(0,r.kt)("h3",{id:"root-level"},"Root-level"),(0,r.kt)("p",null,"Multiple root-level TypeScript configs are ",(0,r.kt)("em",{parentName:"p"},"required"),", as we need to define compiler options that\nare shared across the repository, and we need to house a list of all project references."),(0,r.kt)("p",null,"To start, let's create a ",(0,r.kt)("inlineCode",{parentName:"p"},"tsconfig.options.json")," that will contain our compiler options. In our\nexample, we'll extend ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/tsconfig-beemo"},"tsconfig-beemo")," for\nconvenience. Specifically, the ",(0,r.kt)("inlineCode",{parentName:"p"},"tsconfig.workspaces.json")," config, which enables ECMAScript modules,\ncomposite mode, declaration emitting, and incremental builds."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="tsconfig.options.json"',title:'"tsconfig.options.json"'},'{\n    "extends": "tsconfig-beemo/tsconfig.workspaces.json",\n    "compilerOptions": {\n        // Your custom options\n        "moduleResolution": "nodenext",\n        "target": "es2022"\n    }\n}\n')),(0,r.kt)("p",null,"We'll also need the standard ",(0,r.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," to house our project references. This is used by\neditors and tooling for deep integrations."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="tsconfig.json"',title:'"tsconfig.json"'},'{\n    "extends": "./tsconfig.options.json",\n    "files": [],\n    // All project references in the repo\n    "references": []\n}\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The ",(0,r.kt)("a",{parentName:"p",href:"../../config/workspace#rootconfigfilename"},(0,r.kt)("inlineCode",{parentName:"a"},"typescript.rootConfigFileName"))," setting can be\nused to change the root-level config name and the\n",(0,r.kt)("a",{parentName:"p",href:"../../config/workspace#syncprojectreferences"},(0,r.kt)("inlineCode",{parentName:"a"},"typescript.syncProjectReferences"))," setting will\nautomatically keep project references in sync!")),(0,r.kt)("h3",{id:"project-level"},"Project-level"),(0,r.kt)("p",null,"Every project will require a ",(0,r.kt)("inlineCode",{parentName:"p"},"tsconfig.json"),", as TypeScript itself requires it. The following\n",(0,r.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," will typecheck the entire project, including source and test files."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="<project>/tsconfig.json"',title:'"<project>/tsconfig.json"'},'{\n    // Extend the root compiler options\n    "extends": "../../tsconfig.options.json",\n    "compilerOptions": {\n        // Declarations are written here\n        "outDir": "dts",\n        // Typecheck the entire project\n        "rootDir": "."\n    },\n    // Exclude build folders\n    "exclude": ["dts"],\n    // Include all files in the project\n    "include": ["**/*"],\n    // Reference project dependencies\n    "references": []\n}\n')),(0,r.kt)("p",null,"Be sure to exclude all build and output folders (",(0,r.kt)("inlineCode",{parentName:"p"},"dts"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"lib"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"esm"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"dist"),", etc), so that\nTypeScript doesn't inadvertently include them in the typechecker."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The ",(0,r.kt)("a",{parentName:"p",href:"../../config/workspace#projectconfigfilename"},(0,r.kt)("inlineCode",{parentName:"a"},"typescript.projectConfigFileName"))," setting can\nbe used to change the project-level config name.")),(0,r.kt)("h3",{id:"sharing"},"Sharing"),(0,r.kt)("p",null,"To share configuration across projects, you have 3 options:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Define settings in a ",(0,r.kt)("a",{parentName:"li",href:"#root-level"},"root-level config"),". This only applies to the parent repository."),(0,r.kt)("li",{parentName:"ul"},"Create and publish an\n",(0,r.kt)("a",{parentName:"li",href:"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#tsconfig-bases"},(0,r.kt)("inlineCode",{parentName:"a"},"tsconfig base")),"\nnpm package. This can be used in any repository."),(0,r.kt)("li",{parentName:"ul"},"A combination of 1 and 2.")),(0,r.kt)("p",null,"For options 2 and 3, if you're utilizing package workspaces, create a local package with the\nfollowing content."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="packages/tsconfig-company/tsconfig.json"',title:'"packages/tsconfig-company/tsconfig.json"'},'{\n    "compilerOptions": {\n        // ...\n        "lib": ["esnext"]\n    }\n}\n')),(0,r.kt)("p",null,"Within another ",(0,r.kt)("inlineCode",{parentName:"p"},"tsconfig.json"),", you can extend this package to inherit the settings."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="tsconfig.json"',title:'"tsconfig.json"'},'{\n    "extends": "tsconfig-company/tsconfig.json"\n}\n')))}f.isMDXComponent=!0}}]);