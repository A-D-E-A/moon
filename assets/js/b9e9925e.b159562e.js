"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[297],{5318:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var r=n(7378);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),f=p(n),m=o,g=f["".concat(c,".").concat(m)]||f[m]||u[m]||i;return n?r.createElement(g,a(a({ref:t},s),{},{components:n})):r.createElement(g,a({ref:t},s))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=f;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},2328:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var r=n(5773),o=n(808),i=(n(7378),n(5318)),a=["components"],l={title:"File groups"},c=void 0,p={unversionedId:"concepts/file-group",id:"concepts/file-group",title:"File groups",description:"File groups are a mechanism for grouping similar types of files within a project using",source:"@site/docs/concepts/file-group.mdx",sourceDirName:"concepts",slug:"/concepts/file-group",permalink:"/docs/concepts/file-group",draft:!1,editUrl:"https://github.com/moonrepo/moon/tree/master/website/docs/concepts/file-group.mdx",tags:[],version:"current",frontMatter:{title:"File groups"},sidebar:"docs",previous:{title:"Cache",permalink:"/docs/concepts/cache"},next:{title:"File patterns",permalink:"/docs/concepts/file-pattern"}},s={},u=[{value:"Configuration",id:"configuration",level:2},{value:"Inheritance and merging",id:"inheritance-and-merging",level:2}],f={toc:u};function m(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"File groups are a mechanism for grouping similar types of files within a project using\n",(0,i.kt)("a",{parentName:"p",href:"./file-pattern"},"file glob patterns or literal file paths"),". These groups are then used by\n",(0,i.kt)("a",{parentName:"p",href:"./task"},"tasks")," to calculate functionality like cache computation, affected files since last change,\ndeterministic builds, and more."),(0,i.kt)("h2",{id:"configuration"},"Configuration"),(0,i.kt)("p",null,"File groups can be configured per project through ",(0,i.kt)("a",{parentName:"p",href:"../config/project"},(0,i.kt)("inlineCode",{parentName:"a"},"project.yml")),", or for all\nprojects through ",(0,i.kt)("a",{parentName:"p",href:"../config/global-project"},(0,i.kt)("inlineCode",{parentName:"a"},".moon/project.yml")),"."),(0,i.kt)("h2",{id:"inheritance-and-merging"},"Inheritance and merging"),(0,i.kt)("p",null,"When a file group of the same name exists in both ",(0,i.kt)("a",{parentName:"p",href:"#configuration"},"configuration files"),", the\nproject-level group will override the workspace-level group, and all other workspace-level groups\nwill be inherited as-is."),(0,i.kt)("p",null,"A primary scenario in which to define file groups at the project-level is when you want to\n",(0,i.kt)("em",{parentName:"p"},"override")," file groups defined at the workspace-level. For example, say we want to override the\n",(0,i.kt)("inlineCode",{parentName:"p"},"sources"),' file group because our source folder is named "lib" and not "src", we would define our\nfile groups as followed.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/project.yml"',title:'".moon/project.yml"'},"fileGroups:\n  sources:\n    - 'src/**/*'\n    - 'types/**/*'\n  tests:\n    - 'tests/**/*.test.*'\n    - '**/__tests__/**/*'\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="project.yml"',title:'"project.yml"'},"fileGroups:\n  # Overrides global\n  sources:\n    - 'lib/**/*'\n    - 'types/**/*'\n  # Inherited as-is\n  tests:\n    - 'tests/**/*.test.*'\n    - '**/__tests__/**/*'\n")))}m.isMDXComponent=!0}}]);