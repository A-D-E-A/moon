"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5411],{35318:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var a=n(27378);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),k=o,u=d["".concat(l,".").concat(k)]||d[k]||m[k]||r;return n?a.createElement(u,i(i({ref:t},c),{},{components:n})):a.createElement(u,i({ref:t},c))}));function k(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},32189:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(27378),o=n(83469),r=n(31792);function i(e){let{to:t}=e;return a.createElement("a",{href:t,target:"_blank",className:"float-right inline-block",style:{marginTop:"-3em"}},a.createElement(r.Z,{icon:o.dT$}))}},97168:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=n(25773),o=(n(27378),n(35318)),r=n(32189);const i={title:".moon/tasks.yml, .moon/tasks/*.yml",sidebar_label:".moon/tasks..."},s=void 0,l={unversionedId:"config/tasks",id:"config/tasks",title:".moon/tasks.yml, .moon/tasks/*.yml",description:"The .moon/tasks.yml file configures file groups and tasks that are inherited by every project in",source:"@site/docs/config/tasks.mdx",sourceDirName:"config",slug:"/config/tasks",permalink:"/docs/config/tasks",draft:!1,editUrl:"https://github.com/moonrepo/moon/tree/master/website/docs/config/tasks.mdx",tags:[],version:"current",frontMatter:{title:".moon/tasks.yml, .moon/tasks/*.yml",sidebar_label:".moon/tasks..."},sidebar:"docs",previous:{title:".moon/toolchain.yml",permalink:"/docs/config/toolchain"},next:{title:"moon.yml",permalink:"/docs/config/project"}},p={},c=[{value:"<code>extends</code>",id:"extends",level:2},{value:"<code>fileGroups</code>",id:"filegroups",level:2},{value:"<code>implicitDeps</code>",id:"implicitdeps",level:2},{value:"<code>implicitInputs</code>",id:"implicitinputs",level:2},{value:"<code>tasks</code>",id:"tasks",level:2}],m={toc:c};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},".moon/tasks.yml")," file configures file groups and tasks that are inherited by ",(0,o.kt)("em",{parentName:"p"},"every")," project in\nthe workspace, while ",(0,o.kt)("inlineCode",{parentName:"p"},".moon/tasks/*.yml")," configures for projects based on their language or type.\n",(0,o.kt)("a",{parentName:"p",href:"../concepts/task#inheritance"},"Learn more about task inheritance!")),(0,o.kt)("p",null,"Projects can override or merge with these settings within their respective ",(0,o.kt)("a",{parentName:"p",href:"./project"},(0,o.kt)("inlineCode",{parentName:"a"},"moon.yml")),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/tasks.yml"',title:'".moon/tasks.yml"'},"$schema: 'https://moonrepo.dev/schemas/tasks.json'\n")),(0,o.kt)("h2",{id:"extends"},(0,o.kt)("inlineCode",{parentName:"h2"},"extends")),(0,o.kt)(r.Z,{to:"/api/types/interface/InheritedTasksConfig#extends",mdxType:"HeadingApiLink"}),(0,o.kt)("p",null,"Defines an external ",(0,o.kt)("inlineCode",{parentName:"p"},".moon/tasks.yml")," to extend and inherit settings from. Perfect for reusability\nand sharing configuration across repositories and projects. When defined, this setting must be an\nHTTPS URL ",(0,o.kt)("em",{parentName:"p"},"or")," relative file system path that points to a valid YAML document!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/tasks.yml" {1}',title:'".moon/tasks.yml"',"{1}":!0},"extends: 'https://raw.githubusercontent.com/organization/repository/master/.moon/tasks.yml'\n")),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"For map-based settings, ",(0,o.kt)("inlineCode",{parentName:"p"},"fileGroups")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"tasks"),", entries from both the extended configuration and\nlocal configuration are merged into a new map, with the values of the local taking precedence. Map\nvalues ",(0,o.kt)("em",{parentName:"p"},"are not")," deep merged!")),(0,o.kt)("h2",{id:"filegroups"},(0,o.kt)("inlineCode",{parentName:"h2"},"fileGroups")),(0,o.kt)(r.Z,{to:"/api/types/interface/InheritedTasksConfig#fileGroups",mdxType:"HeadingApiLink"}),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"For more information on file group configuration, refer to the\n",(0,o.kt)("a",{parentName:"p",href:"./project#filegroups"},(0,o.kt)("inlineCode",{parentName:"a"},"fileGroups"))," section in the ",(0,o.kt)("a",{parentName:"p",href:"./project"},(0,o.kt)("inlineCode",{parentName:"a"},"moon.yml"))," doc.")),(0,o.kt)("p",null,"Defines ",(0,o.kt)("a",{parentName:"p",href:"../concepts/file-group"},"file groups")," that will be inherited by projects, and also enables\nenforcement of organizational patterns and file locations. For example, encourage projects to place\nsource files in a ",(0,o.kt)("inlineCode",{parentName:"p"},"src")," folder, and all test files in ",(0,o.kt)("inlineCode",{parentName:"p"},"tests"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/tasks.yml"',title:'".moon/tasks.yml"'},"fileGroups:\n  configs:\n    - '*.config.{js,cjs,mjs}'\n    - '*.json'\n  sources:\n    - 'src/**/*'\n    - 'types/**/*'\n  tests:\n    - 'tests/**/*'\n    - '**/__tests__/**/*'\n  assets:\n    - 'assets/**/*'\n    - 'images/**/*'\n    - 'static/**/*'\n    - '**/*.{scss,css}'\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"File paths and globs used within a file group are relative from the inherited project's root, and\nnot the workspace.")),(0,o.kt)("h2",{id:"implicitdeps"},(0,o.kt)("inlineCode",{parentName:"h2"},"implicitDeps")),(0,o.kt)(r.Z,{to:"/api/types/interface/InheritedTasksConfig#implicitDeps",mdxType:"HeadingApiLink"}),(0,o.kt)("p",null,"Defines task ",(0,o.kt)("a",{parentName:"p",href:"./project#deps"},(0,o.kt)("inlineCode",{parentName:"a"},"deps"))," that are implicitly inserted into ",(0,o.kt)("em",{parentName:"p"},"all")," inherited tasks within\na project. This is extremely useful for pre-building projects that are used extensively throughout\nthe repo, or always building project dependencies. Defaults to an empty list."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/tasks.yml" {1-2}',title:'".moon/tasks.yml"',"{1-2}":!0},"implicitDeps:\n  - '^:build'\n")),(0,o.kt)("h2",{id:"implicitinputs"},(0,o.kt)("inlineCode",{parentName:"h2"},"implicitInputs")),(0,o.kt)(r.Z,{to:"/api/types/interface/InheritedTasksConfig#implicitInputs",mdxType:"HeadingApiLink"}),(0,o.kt)("p",null,"Defines task ",(0,o.kt)("a",{parentName:"p",href:"./project#inputs"},(0,o.kt)("inlineCode",{parentName:"a"},"inputs"))," that are implicitly inserted into ",(0,o.kt)("em",{parentName:"p"},"all"),' inherited tasks\nwithin a project. This is extremely useful for the "changes to these files should always trigger a\ntask" scenario.'),(0,o.kt)("p",null,"Like ",(0,o.kt)("inlineCode",{parentName:"p"},"inputs"),", file paths/globs defined here are relative from the inheriting project.\n",(0,o.kt)("a",{parentName:"p",href:"../concepts/file-pattern#project-relative"},"Project and workspace relative file patterns")," are\nsupported and encouraged."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/tasks/node.yml" {1-2}',title:'".moon/tasks/node.yml"',"{1-2}":!0},"implicitInputs:\n  - 'package.json'\n")),(0,o.kt)("h2",{id:"tasks"},(0,o.kt)("inlineCode",{parentName:"h2"},"tasks")),(0,o.kt)(r.Z,{to:"/api/types/interface/InheritedTasksConfig#tasks",mdxType:"HeadingApiLink"}),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"For more information on task configuration, refer to the ",(0,o.kt)("a",{parentName:"p",href:"./project#tasks"},(0,o.kt)("inlineCode",{parentName:"a"},"tasks"))," section in the\n",(0,o.kt)("a",{parentName:"p",href:"./project"},(0,o.kt)("inlineCode",{parentName:"a"},"moon.yml"))," doc.")),(0,o.kt)("p",null,"As mentioned in the link above, ",(0,o.kt)("a",{parentName:"p",href:"../concepts/task"},"tasks")," are actions that are ran within the\ncontext of a project, and commonly wrap a system command. For most workspaces, every project\n",(0,o.kt)("em",{parentName:"p"},"should")," have linting, typechecking, testing, code formatting, so on and so forth. To reduce the\namount of boilerplate that ",(0,o.kt)("em",{parentName:"p"},"every")," project would require, this setting offers the ability to define\ntasks that are inherited by many projects within the workspace, but can also be overridden per\nproject."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/tasks.yml"',title:'".moon/tasks.yml"'},"tasks:\n  format:\n    command: 'prettier --check .'\n\n  lint:\n    command: 'eslint --no-error-on-unmatched-pattern .'\n\n  test:\n    command: 'jest --passWithNoTests'\n\n  typecheck:\n    command: 'tsc --build'\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Relative file paths and globs used within a task are relative from the inherited project's root,\nand not the workspace.")))}d.isMDXComponent=!0}}]);