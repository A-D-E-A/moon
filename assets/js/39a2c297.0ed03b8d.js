"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[27756],{35318:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var o=n(27378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),g=r,f=c["".concat(s,".").concat(g)]||c[g]||m[g]||i;return n?o.createElement(f,a(a({ref:t},u),{},{components:n})):o.createElement(f,a({ref:t},u))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var p=2;p<i;p++)a[p]=n[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},53257:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var o=n(25773),r=(n(27378),n(35318)),i=n(76911);const a={slug:"proto-v0.12",title:"proto v0.12 - Experimental WASM plugins",authors:["milesj"],tags:["proto","wasm","plugin"]},l=void 0,s={permalink:"/blog/proto-v0.12",editUrl:"https://github.com/moonrepo/moon/tree/master/website/blog/2023-07-07_proto-v0.12.mdx",source:"@site/blog/2023-07-07_proto-v0.12.mdx",title:"proto v0.12 - Experimental WASM plugins",description:"After months of hard work, we're excited to release our first iteration of WASM plugins for proto.",date:"2023-07-07T00:00:00.000Z",formattedDate:"July 7, 2023",tags:[{label:"proto",permalink:"/blog/tags/proto"},{label:"wasm",permalink:"/blog/tags/wasm"},{label:"plugin",permalink:"/blog/tags/plugin"}],readingTime:1.885,hasTruncateMarker:!0,authors:[{name:"Miles Johnson",title:"Founder, developer",url:"https://github.com/milesj",imageURL:"/img/authors/miles.jpg",key:"milesj"}],frontMatter:{slug:"proto-v0.12",title:"proto v0.12 - Experimental WASM plugins",authors:["milesj"],tags:["proto","wasm","plugin"]},prevItem:{title:"moon v1.10 - Mid-year quality of life improvements",permalink:"/blog/moon-v1.10"},nextItem:{title:"moon v1.9 - VCS hooks management and improved task inheritance",permalink:"/blog/moon-v1.9"}},p={authorsImageUrls:[void 0]},u=[{value:"WASM plugins",id:"wasm-plugins",level:2},{value:"Using WASM plugins",id:"using-wasm-plugins",level:3},{value:"Example implementation",id:"example-implementation",level:3},{value:"Other changes",id:"other-changes",level:2}],m={toc:u};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"After months of hard work, we're excited to release our first iteration of WASM plugins for proto."),(0,r.kt)("h2",{id:"wasm-plugins"},"WASM plugins"),(0,r.kt)("p",null,"Three months ago, we ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/moonrepo/proto/issues/73"},"published an RFC")," for supporting\nplugins in proto. Plugins are a must, as they allow consumers to easily extend proto with additional\ntools, instead of them being built into proto core (which is very time consuming)."),(0,r.kt)("p",null,"Two months ago, we released support for ",(0,r.kt)("a",{parentName:"p",href:"/docs/proto/toml-plugin"},"TOML plugins"),". These are very\nsimple plugins powered by static configuration files. They're great for simple tools like CLIs and\npre-built languages, as everything is powered by static HTTP URLs and file names. However, sometimes\nyou need dynamic control..."),(0,r.kt)("p",null,"And after 2 months of development, and help from the ",(0,r.kt)("a",{parentName:"p",href:"https://extism.org/"},"Extism team"),", we're\nexcited to announce initial support for WASM plugins. WASM is a portable binary format, with\nsandboxed access to the file system (via WASI), and the ability to execute processes and fetch URLs.\nThis means that plugins can be written in any language that compiles to WASM, like Rust, C, C++, Go,\nTypeScript, and more. This removes the requirement of writing Rust and contributing to proto\ndirectly!"),(0,r.kt)("div",{class:"flex justify-center"},(0,r.kt)(i.Z,{label:"View WASM plugin guide",href:"/docs/proto/wasm-plugin",size:"lg",mdxType:"Button"})),(0,r.kt)("h3",{id:"using-wasm-plugins"},"Using WASM plugins"),(0,r.kt)("p",null,"Once the ",(0,r.kt)("inlineCode",{parentName:"p"},".wasm")," file is publicly available for download, we can configure it as a plugin in\n",(0,r.kt)("a",{parentName:"p",href:"/docs/proto/config"},(0,r.kt)("inlineCode",{parentName:"a"},".prototools")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[plugins]\nmy-plugin = "source:https://domain.com/path/to/wasm/plugin.wasm"\n')),(0,r.kt)("p",null,"And execute all ",(0,r.kt)("inlineCode",{parentName:"p"},"proto")," commands using the configured plugin identifier."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"proto install my-plugin\n")),(0,r.kt)("h3",{id:"example-implementation"},"Example implementation"),(0,r.kt)("p",null,"The official guide above walks you through creating a plugin, but to demonstrate the power of WASM\nplugins, here's an example function that defines parameters for downloading and installing Node.js.\nThis is written in Rust and using Extism's official PDK."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'#[plugin_fn]\npub fn download_prebuilt(\n    Json(input): Json<DownloadPrebuiltInput>,\n) -> FnResult<Json<DownloadPrebuiltOutput>> {\n    let version = input.env.version;\n    let arch = input.env.arch;\n\n    let prefix = match input.env.os {\n        HostOS::Linux => format!("node-v{version}-linux-{arch}"),\n        HostOS::MacOS => format!("node-v{version}-darwin-{arch}"),\n        HostOS::Windows => format!("node-v{version}-win-{arch}"),\n        other => {\n            return Err(PluginError::UnsupportedPlatform {\n                tool: NAME.into(),\n                platform: format!("{:?}", other),\n            })?;\n        }\n    };\n\n    let filename = if input.env.os == HostOS::Windows {\n        format!("{prefix}.zip")\n    } else {\n        format!("{prefix}.tar.xz")\n    };\n\n    Ok(Json(DownloadPrebuiltOutput {\n        archive_prefix: Some(prefix),\n        download_url: format!("https://nodejs.org/dist/v{version}/{filename}"),\n        download_name: Some(filename),\n        checksum_url: Some(format!("https://nodejs.org/dist/v{version}/SHASUMS256.txt")),\n        ..DownloadPrebuiltOutput::default()\n    }))\n}\n')),(0,r.kt)("h2",{id:"other-changes"},"Other changes"),(0,r.kt)("p",null,"View the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/moonrepo/proto/releases/tag/v0.12.0"},"official release")," for a full list\nof changes."))}c.isMDXComponent=!0}}]);