"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8893],{5318:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>k});var a=t(7378);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(t),k=i,u=d["".concat(s,".").concat(k)]||d[k]||m[k]||o;return t?a.createElement(u,r(r({ref:n},c),{},{components:t})):a.createElement(u,r({ref:n},c))}));function k(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9798:(e,n,t)=>{t.d(n,{Z:()=>r});var a=t(7378),i=t(8944);const o="tabItem_wHwb";function r(e){let{children:n,hidden:t,className:r}=e;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(o,r),hidden:t},n)}},3337:(e,n,t)=>{t.d(n,{Z:()=>k});var a=t(5773),i=t(7378),o=t(8944),r=t(6457),l=t(784),s=t(9947),p=t(3457);const c="tabList_J5MA",m="tabItem_l0OV";function d(e){var n;const{lazy:t,block:r,defaultValue:d,values:k,groupId:u,className:g}=e,h=i.Children.map(e.children,(e=>{if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=k??h.map((e=>{let{props:{value:n,label:t,attributes:a}}=e;return{value:n,label:t,attributes:a}})),y=(0,l.l)(f,((e,n)=>e.value===n.value));if(y.length>0)throw new Error(`Docusaurus error: Duplicate values "${y.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const N=null===d?d:d??(null==(n=h.find((e=>e.props.default)))?void 0:n.props.value)??h[0].props.value;if(null!==N&&!f.some((e=>e.value===N)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${N}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:w}=(0,s.U)(),[C,b]=(0,i.useState)(N),j=[],{blockElementScrollPositionUntilNextRender:T}=(0,p.o5)();if(null!=u){const e=v[u];null!=e&&e!==C&&f.some((n=>n.value===e))&&b(e)}const x=e=>{const n=e.currentTarget,t=j.indexOf(n),a=f[t].value;a!==C&&(T(n),b(a),null!=u&&w(u,String(a)))},L=e=>{var n;let t=null;switch(e.key){case"ArrowRight":{const n=j.indexOf(e.currentTarget)+1;t=j[n]??j[0];break}case"ArrowLeft":{const n=j.indexOf(e.currentTarget)-1;t=j[n]??j[j.length-1];break}}null==(n=t)||n.focus()};return i.createElement("div",{className:(0,o.Z)("tabs-container",c)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":r},g)},f.map((e=>{let{value:n,label:t,attributes:r}=e;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:C===n?0:-1,"aria-selected":C===n,key:n,ref:e=>j.push(e),onKeyDown:L,onFocus:x,onClick:x},r,{className:(0,o.Z)("tabs__item",m,null==r?void 0:r.className,{"tabs__item--active":C===n})}),t??n)}))),t?(0,i.cloneElement)(h.filter((e=>e.props.value===C))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},h.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==C})))))}function k(e){const n=(0,r.Z)();return i.createElement(d,(0,a.Z)({key:String(n)},e))}},2189:(e,n,t)=>{t.d(n,{Z:()=>r});var a=t(7378),i=t(3469),o=t(1792);function r(e){let{to:n}=e;return a.createElement("a",{href:n,target:"_blank",className:"float-right inline-block",style:{marginTop:"-3em"}},a.createElement(o.Z,{icon:i.dT$}))}},9785:(e,n,t)=>{t.d(n,{Z:()=>o});var a=t(7378),i=t(9619);function o(e){let{text:n="Required"}=e;return a.createElement(i.Z,{text:n,variant:"failure",className:"ml-2"})}},9022:(e,n,t)=>{t.d(n,{Z:()=>o});var a=t(7378),i=t(9619);function o(e){let{header:n,updated:t,version:o}=e;return a.createElement(i.Z,{text:`v${o}`,variant:t?"success":"info",className:n?"absolute right-0 top-1.5":"ml-2"})}},9619:(e,n,t)=>{t.d(n,{Z:()=>l});var a=t(7378),i=t(8944),o=t(1792);const r={failure:"bg-red-100 text-red-900",info:"bg-pink-100 text-pink-900",success:"bg-green-100 text-green-900",warning:"bg-orange-100 text-orange-900"};function l(e){let{className:n,icon:t,text:l,variant:s}=e;return a.createElement("span",{className:(0,i.Z)("inline-flex items-center px-1 py-0.5 rounded text-xs font-bold uppercase",s?r[s]:"bg-gray-100 text-gray-800",n)},t&&a.createElement(o.Z,{icon:t,className:"mr-1"}),l)}},8137:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>k,contentTitle:()=>m,default:()=>h,frontMatter:()=>c,metadata:()=>d,toc:()=>u});var a=t(5773),i=(t(7378),t(5318)),o=t(3337),r=t(9798),l=t(2189),s=t(9785),p=t(9022);const c={title:".moon/workspace.yml",toc_max_heading_level:6},m=void 0,d={unversionedId:"config/workspace",id:"config/workspace",title:".moon/workspace.yml",description:"The .moon/workspace.yml file configures available projects and their locations, the toolchain, and",source:"@site/docs/config/workspace.mdx",sourceDirName:"config",slug:"/config/workspace",permalink:"/docs/config/workspace",draft:!1,editUrl:"https://github.com/moonrepo/moon/tree/master/website/docs/config/workspace.mdx",tags:[],version:"current",frontMatter:{title:".moon/workspace.yml",toc_max_heading_level:6},sidebar:"docs",previous:{title:"Config files",permalink:"/docs/config"},next:{title:".moon/project.yml",permalink:"/docs/config/global-project"}},k={},u=[{value:'<code>extends</code><VersionLabel version="0.4" />',id:"extends",level:2},{value:"<code>projects</code><RequiredLabel />",id:"projects",level:2},{value:"Languages",id:"languages",level:2},{value:"<code>node</code>",id:"node",level:2},{value:"<code>version</code>",id:"version",level:3},{value:"<code>packageManager</code>",id:"packagemanager",level:3},{value:"<code>npm</code>, <code>pnpm</code>, <code>yarn</code>",id:"npm-pnpm-yarn",level:3},{value:"<code>version</code>",id:"version-1",level:4},{value:"<code>yarn</code>",id:"yarn",level:3},{value:"<code>plugins</code>",id:"plugins",level:4},{value:"<code>addEnginesConstraint</code>",id:"addenginesconstraint",level:3},{value:'<code>aliasPackageNames</code><VersionLabel version="0.10" />',id:"aliaspackagenames",level:3},{value:"<code>dedupeOnLockfileChange</code>",id:"dedupeonlockfilechange",level:3},{value:'<code>dependencyVersionFormat</code><VersionLabel version="0.9" />',id:"dependencyversionformat",level:3},{value:'<code>inferTasksFromScripts</code><VersionLabel version="0.8" />',id:"infertasksfromscripts",level:3},{value:"<code>syncProjectWorkspaceDependencies</code>",id:"syncprojectworkspacedependencies",level:3},{value:"<code>syncVersionManagerConfig</code>",id:"syncversionmanagerconfig",level:3},{value:'<code>typescript</code><VersionLabel updated version="0.12" />',id:"typescript",level:2},{value:'<code>createMissingConfig</code><VersionLabel version="0.6" />',id:"createmissingconfig",level:3},{value:"<code>projectConfigFileName</code>",id:"projectconfigfilename",level:3},{value:"<code>rootConfigFileName</code>",id:"rootconfigfilename",level:3},{value:'<code>rootOptionsConfigFileName</code><VersionLabel version="0.6" />',id:"rootoptionsconfigfilename",level:3},{value:"<code>routeOutDirToCache</code>",id:"routeoutdirtocache",level:3},{value:"<code>syncProjectReferences</code>",id:"syncprojectreferences",level:3},{value:"<code>syncProjectReferencesToPaths</code>",id:"syncprojectreferencestopaths",level:3},{value:"Features",id:"features",level:2},{value:'<code>generator</code><VersionLabel version="0.14" />',id:"generator",level:2},{value:"<code>templates</code>",id:"templates",level:3},{value:'<code>hasher</code><VersionLabel version="0.13" />',id:"hasher",level:2},{value:"<code>optimization</code>",id:"optimization",level:3},{value:'<code>notifier</code><VersionLabel version="0.17" />',id:"notifier",level:2},{value:"<code>webhookUrl</code>",id:"webhookurl",level:3},{value:'<code>runner</code><VersionLabel updated version="0.13" />',id:"runner",level:2},{value:'<code>cacheLifetime</code><VersionLabel version="0.11" />',id:"cachelifetime",level:3},{value:'<code>implicitDeps</code><VersionLabel version="0.16" />',id:"implicitdeps",level:3},{value:'<code>implicitInputs</code><VersionLabel version="0.9" />',id:"implicitinputs",level:3},{value:'<code>inheritColorsForPipedTasks</code><VersionLabel version="0.3" />',id:"inheritcolorsforpipedtasks",level:3},{value:'<code>logRunningCommand</code><VersionLabel version="0.4" />',id:"logrunningcommand",level:3},{value:"<code>vcs</code>",id:"vcs",level:2},{value:"<code>manager</code>",id:"manager",level:3},{value:"<code>defaultBranch</code>",id:"defaultbranch",level:3}],g={toc:u};function h(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},".moon/workspace.yml")," file configures available projects and their locations, the toolchain, and\nthe workspace development environment."),(0,i.kt)("h2",{id:"extends"},(0,i.kt)("inlineCode",{parentName:"h2"},"extends"),(0,i.kt)(p.Z,{version:"0.4",mdxType:"VersionLabel"})),(0,i.kt)(l.Z,{to:"/api/types/interface/WorkspaceConfig#extends",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Defines an external ",(0,i.kt)("inlineCode",{parentName:"p"},".moon/workspace.yml")," to extend and inherit settings from. Perfect for\nreusability and sharing configuration across repositories and projects. When defined, this setting\nmust be an HTTPS URL ",(0,i.kt)("em",{parentName:"p"},"or")," relative file system path that points to a valid YAML document!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/workspace.yml" {1}',title:'".moon/workspace.yml"',"{1}":!0},"extends: 'https://raw.githubusercontent.com/organization/repository/master/.moon/workspace.yml'\n")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Settings will be merged recursively for blocks, with values defined in the local configuration\ntaking precedence over those defined in the extended configuration. However, the ",(0,i.kt)("inlineCode",{parentName:"p"},"projects")," setting\n",(0,i.kt)("em",{parentName:"p"},"does not merge"),"!")),(0,i.kt)("h2",{id:"projects"},(0,i.kt)("inlineCode",{parentName:"h2"},"projects"),(0,i.kt)(s.Z,{mdxType:"RequiredLabel"})),(0,i.kt)(l.Z,{to:"/api/types/interface/WorkspaceConfig#projects",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Defines the location of all ",(0,i.kt)("a",{parentName:"p",href:"../concepts/project"},"projects")," within the workspace. Supports either a\nmanual map of projects (default), ",(0,i.kt)("em",{parentName:"p"},"or")," a list of globs in which to automatically locate projects."),(0,i.kt)(o.Z,{groupId:"projects-type",defaultValue:"manual",values:[{label:"Manual",value:"manual"},{label:"Automatic",value:"auto"}],mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"manual",mdxType:"TabItem"},(0,i.kt)("p",null,"When using a map, each project must be ",(0,i.kt)("em",{parentName:"p"},"manually")," configured and requires a unique\n",(0,i.kt)("a",{parentName:"p",href:"../concepts/project#names"},"name")," as the map key, where this name is used heavily on the command\nline and within the project graph for uniquely identifying the project amongst all projects. The map\nvalue (known as the project source) is a file system path to the project folder, relative from the\nworkspace root, and must be contained within the workspace boundary."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/workspace.yml"',title:'".moon/workspace.yml"'},"projects:\n  admin: 'apps/admin'\n  apiClients: 'packages/api-clients'\n  designSystem: 'packages/design-system'\n  web: 'apps/web'\n"))),(0,i.kt)(r.Z,{value:"auto",mdxType:"TabItem"},(0,i.kt)("p",null,"If manually mapping projects is too tedious or cumbersome, you may provide a list of\n",(0,i.kt)("a",{parentName:"p",href:"../concepts/file-pattern#globs"},"globs")," to automatically locate all project folders, relative from\nthe workspace root."),(0,i.kt)("p",null,"When using this approach, the project name is derived from the project folder name, and is cleaned\nto our ",(0,i.kt)("a",{parentName:"p",href:"../concepts/project#names"},"supported characters")," . Furthermore, globbing ",(0,i.kt)("strong",{parentName:"p"},"does risk the\nchance of collision"),", and when that happens, we log a warning and skip the conflicting project from\nbeing configured in the project graph."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/workspace.yml"',title:'".moon/workspace.yml"'},"projects:\n  - 'apps/*'\n  - 'packages/*'\n")))),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Unlike packages in the JavaScript ecosystem, a moon project ",(0,i.kt)("em",{parentName:"p"},"does not")," require a ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json"),",\nand is not coupled to Yarn workspaces (or similar architectures).")),(0,i.kt)("h2",{id:"languages"},"Languages"),(0,i.kt)("h2",{id:"node"},(0,i.kt)("inlineCode",{parentName:"h2"},"node")),(0,i.kt)(l.Z,{to:"/api/types/interface/WorkspaceConfig#node",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Defines the Node.js version and package manager to install within the toolchain, as moon ",(0,i.kt)("em",{parentName:"p"},"does not"),"\nuse a Node.js binary found on the local machine. Managing the Node.js version within the toolchain\nensures a deterministic environment across any machine (whether a developer, CI, or production\nmachine)."),(0,i.kt)("h3",{id:"version"},(0,i.kt)("inlineCode",{parentName:"h3"},"version")),(0,i.kt)(l.Z,{to:"/api/types/interface/NodeConfig#version",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Defines the explicit Node.js version to use. We require an explicit and semantic major, minor, and\npatch version, to ensure the same environment is used across every machine. Ranges are ",(0,i.kt)("em",{parentName:"p"},"not"),"\nsupported."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/workspace.yml" {2}',title:'".moon/workspace.yml"',"{2}":!0},"node:\n  version: '16.13.0'\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Version can be overridden with the ",(0,i.kt)("inlineCode",{parentName:"p"},"MOON_NODE_VERSION")," environment variable.")),(0,i.kt)("h3",{id:"packagemanager"},(0,i.kt)("inlineCode",{parentName:"h3"},"packageManager")),(0,i.kt)(l.Z,{to:"/api/types/interface/NodeConfig#packageManager",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Defines which package manager to utilize within the workspace. Supports ",(0,i.kt)("inlineCode",{parentName:"p"},"npm")," (default), ",(0,i.kt)("inlineCode",{parentName:"p"},"pnpm"),", or\n",(0,i.kt)("inlineCode",{parentName:"p"},"yarn"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/workspace.yml" {2}',title:'".moon/workspace.yml"',"{2}":!0},"node:\n  packageManager: 'yarn'\n")),(0,i.kt)("h3",{id:"npm-pnpm-yarn"},(0,i.kt)("inlineCode",{parentName:"h3"},"npm"),", ",(0,i.kt)("inlineCode",{parentName:"h3"},"pnpm"),", ",(0,i.kt)("inlineCode",{parentName:"h3"},"yarn")),(0,i.kt)(l.Z,{to:"/api/types/interface/NodePackageManagerConfig",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Optional fields for defining package manager specific configuration. The chosen setting is dependent\non the value of ",(0,i.kt)("a",{parentName:"p",href:"#packagemanager"},(0,i.kt)("inlineCode",{parentName:"a"},"node.packageManager")),". If these settings ",(0,i.kt)("em",{parentName:"p"},"are not defined"),", the\nlatest version of the active package manager will be used (when applicable)."),(0,i.kt)("h4",{id:"version-1"},(0,i.kt)("inlineCode",{parentName:"h4"},"version")),(0,i.kt)(l.Z,{to:"/api/types/interface/NodePackageManagerConfig#version",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"version")," setting defines the explicit package manager version to use. We require an explicit\nmajor, minor, and patch version, to ensure the same environment is used across every machine."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/workspace.yml" {4}',title:'".moon/workspace.yml"',"{4}":!0},"node:\n  packageManager: 'yarn'\n  yarn:\n    version: '3.1.0'\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Version can be overridden with the ",(0,i.kt)("inlineCode",{parentName:"p"},"MOON_NPM_VERSION"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"MOON_PNPM_VERSION"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"MOON_YARN_VERSION"),"\nenvironment variables.")),(0,i.kt)("h3",{id:"yarn"},(0,i.kt)("inlineCode",{parentName:"h3"},"yarn")),(0,i.kt)(l.Z,{to:"/api/types/interface/NodeConfig#yarn",mdxType:"HeadingApiLink"}),(0,i.kt)("h4",{id:"plugins"},(0,i.kt)("inlineCode",{parentName:"h4"},"plugins")),(0,i.kt)(l.Z,{to:"/api/types/interface/YarnConfig#plugins",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"A list of plugins that will automatically be imported using ",(0,i.kt)("inlineCode",{parentName:"p"},"yarn plugin import")," (Yarn 2+ only). For\nperformance reasons, plugins will only be imported when the Yarn version changes."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/workspace.yml" {4}',title:'".moon/workspace.yml"',"{4}":!0},"node:\n  packageManager: 'yarn'\n  yarn:\n    version: '3.1.0'\n    plugins:\n      - 'interactive-tools'\n      - 'workspace-tools'\n")),(0,i.kt)("h3",{id:"addenginesconstraint"},(0,i.kt)("inlineCode",{parentName:"h3"},"addEnginesConstraint")),(0,i.kt)(l.Z,{to:"/api/types/interface/NodeConfig#addEnginesConstraint",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Injects the currently configured ",(0,i.kt)("a",{parentName:"p",href:"#version"},"Node.js version")," as an ",(0,i.kt)("inlineCode",{parentName:"p"},"engines")," constraint to the root\n",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," field. Defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"node:\n  addEnginesConstraint: true\n")),(0,i.kt)("p",null,'For example, say our Node.js version is "16.15.0", and when we execute a run process through the\n',(0,i.kt)("inlineCode",{parentName:"p"},"moon")," binary, it will update the root ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," with the below. We pin a fixed version to\nensure other Node.js processes outside of our toolchain are utilizing the same version."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="package.json"',title:'"package.json"'},'{\n  // ...\n  "engines": {\n    "node": "16.15.0"\n  }\n}\n')),(0,i.kt)("h3",{id:"aliaspackagenames"},(0,i.kt)("inlineCode",{parentName:"h3"},"aliasPackageNames"),(0,i.kt)(p.Z,{version:"0.10",mdxType:"VersionLabel"})),(0,i.kt)(l.Z,{to:"/api/types/interface/NodeConfig#aliasPackageNames",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"When enabled, will assign ",(0,i.kt)("a",{parentName:"p",href:"../concepts/project#aliases"},"aliases")," to configured ",(0,i.kt)("a",{parentName:"p",href:"#projects"},"projects"),"\nbased on the ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," field in the project's ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json"),". Aliases can be used as a substitute for\nproject names, allowing for the familiar package name to be used within\n",(0,i.kt)("a",{parentName:"p",href:"../concepts/target"},"targets")," or configuration."),(0,i.kt)("p",null,"This setting accepts one of the following values, which determines how to parse and assign the\nalias."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"name-and-scope")," - Will use the package name as-is, including any scope. For example,\n",(0,i.kt)("inlineCode",{parentName:"li"},"@scope/example")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"example"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"name-only")," - Will only use the name and disregard any scope. For example, ",(0,i.kt)("inlineCode",{parentName:"li"},"@scope/example")," will\nbecome ",(0,i.kt)("inlineCode",{parentName:"li"},"example"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/workspace.yml" {2}',title:'".moon/workspace.yml"',"{2}":!0},"node:\n  aliasPackageNames: 'name-only'\n")),(0,i.kt)("h3",{id:"dedupeonlockfilechange"},(0,i.kt)("inlineCode",{parentName:"h3"},"dedupeOnLockfileChange")),(0,i.kt)(l.Z,{to:"/api/types/interface/NodeConfig#dedupeOnLockfileChange",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Will dedupe dependencies after they have been installed, added, removing, or changed in any way, in\nan effort to keep the workspace tree as clean and lean as possible. Defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/workspace.yml" {2}',title:'".moon/workspace.yml"',"{2}":!0},"node:\n  dedupeOnLockfileChange: true\n")),(0,i.kt)("h3",{id:"dependencyversionformat"},(0,i.kt)("inlineCode",{parentName:"h3"},"dependencyVersionFormat"),(0,i.kt)(p.Z,{version:"0.9",mdxType:"VersionLabel"})),(0,i.kt)(l.Z,{to:"/api/types/interface/NodeConfig#dependencyVersionFormat",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"When ",(0,i.kt)("a",{parentName:"p",href:"#syncprojectworkspacedependencies"},"syncing project dependencies"),", customize the format that\nwill be used for the dependency version range. The following formats are supported (but use the one\nmost applicable to your chosen package manager):"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"file")," - Uses ",(0,i.kt)("inlineCode",{parentName:"li"},"file:../relative/path")," and copies package contents."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"link")," - Uses ",(0,i.kt)("inlineCode",{parentName:"li"},"link:../relative/path")," and symlinks package contents."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"star")," - Uses an explicit ",(0,i.kt)("inlineCode",{parentName:"li"},"*"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"version")," - Uses the explicit version from the dependent project's ",(0,i.kt)("inlineCode",{parentName:"li"},"package.json"),', e.g., "1.2.3".'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"version-caret")," - Uses the version from the dependent project's ",(0,i.kt)("inlineCode",{parentName:"li"},"package.json"),' as a caret range,\ne.g., "^1.2.3".'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"version-tilde")," - Uses the version from the dependent project's ",(0,i.kt)("inlineCode",{parentName:"li"},"package.json"),' as a tilde range,\ne.g., "~1.2.3".'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"workspace")," (default) - Uses ",(0,i.kt)("inlineCode",{parentName:"li"},"workspace:*"),', which resolves to "1.2.3". Requires package\nworkspaces.'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"workspace-caret")," - Uses ",(0,i.kt)("inlineCode",{parentName:"li"},"workspace:^"),', which resolves to "^1.2.3". Requires package workspaces.'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"workspace-tilde")," - Uses ",(0,i.kt)("inlineCode",{parentName:"li"},"workspace:~"),', which resolves to "~1.2.3". Requires package workspaces.')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/workspace.yml" {2}',title:'".moon/workspace.yml"',"{2}":!0},"node:\n  dependencyVersionFormat: 'link'\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"This setting does not apply to peer dependencies, as they will always use a format of\n",(0,i.kt)("inlineCode",{parentName:"p"},"^<major>.0.0"),".")),(0,i.kt)("h3",{id:"infertasksfromscripts"},(0,i.kt)("inlineCode",{parentName:"h3"},"inferTasksFromScripts"),(0,i.kt)(p.Z,{version:"0.8",mdxType:"VersionLabel"})),(0,i.kt)(l.Z,{to:"/api/types/interface/NodeConfig#inferTasksFromScripts",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Will infer and automatically create ",(0,i.kt)("a",{parentName:"p",href:"../concepts/task"},"tasks")," from ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," scripts. Defaults\nto ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("p",null,"This requires the ",(0,i.kt)("a",{parentName:"p",href:"./project#language"},"project's language"),' to be "javascript" or "typescript", a\n',(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," to exist in the project, and will take the following into account:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Script names will be converted to kebab-case, and will become the task ID."),(0,i.kt)("li",{parentName:"ul"},"Pre, post, and life cycle hooks are ignored."),(0,i.kt)("li",{parentName:"ul"},"Tasks defined in ",(0,i.kt)("inlineCode",{parentName:"li"},".moon/project.yml")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"moon.yml")," take precedence over scripts of the same name.")),(0,i.kt)("p",null,"To verify inferred tasks, run ",(0,i.kt)("a",{parentName:"p",href:"../commands/project"},(0,i.kt)("inlineCode",{parentName:"a"},"moon project <id>"))," (pass ",(0,i.kt)("inlineCode",{parentName:"p"},"--json")," to view raw\nconfig and options). Tasks that are inferred will have their command and args set to\n",(0,i.kt)("inlineCode",{parentName:"p"},"moon node run-script"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/workspace.yml" {2}',title:'".moon/workspace.yml"',"{2}":!0},"node:\n  inferTasksFromScripts: true\n")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"This implementation shares functionality with\n",(0,i.kt)("a",{parentName:"p",href:"../commands/migrate/from-package-json"},(0,i.kt)("inlineCode",{parentName:"a"},"moon migrate from-package-json")),", and will attempt to\ndetermine environment variables, outputs, CI options, and more! Be aware of these when utilizing\nthis feature, especially in regards to ",(0,i.kt)("inlineCode",{parentName:"p"},"runInCI"),", as it may be inaccurate!")),(0,i.kt)("h3",{id:"syncprojectworkspacedependencies"},(0,i.kt)("inlineCode",{parentName:"h3"},"syncProjectWorkspaceDependencies")),(0,i.kt)(l.Z,{to:"/api/types/interface/NodeConfig#syncProjectWorkspaceDependencies",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Will sync a project's ",(0,i.kt)("a",{parentName:"p",href:"./project#dependson"},(0,i.kt)("inlineCode",{parentName:"a"},"dependsOn"))," setting as normal dependencies within the\nproject's ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json"),". If a dependent project does not have a ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json"),", or if a dependency\nof the same name has an explicit version already defined, the sync will be skipped. Defaults to\n",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/workspace.yml" {2}',title:'".moon/workspace.yml"',"{2}":!0},"node:\n  syncProjectWorkspaceDependencies: true\n")),(0,i.kt)("p",null,"A quick example on how this works. Given the following ",(0,i.kt)("inlineCode",{parentName:"p"},"dependsOn"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml"',title:'"moon.yml"'},"dependsOn:\n  - 'designSystem'\n  - 'reactHooks'\n")),(0,i.kt)("p",null,"Would result in the following ",(0,i.kt)("inlineCode",{parentName:"p"},"dependencies")," within a project's ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json"),". The version format\ncan be customized with ",(0,i.kt)("a",{parentName:"p",href:"#dependencyversionformat"},(0,i.kt)("inlineCode",{parentName:"a"},"node.dependencyVersionFormat")),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="package.json"',title:'"package.json"'},'{\n  // ...\n  "dependencies": {\n    "@company/design-system": "workspace:*",\n    "@company/react-hooks": "workspace:*"\n    // ...\n  }\n}\n')),(0,i.kt)("h3",{id:"syncversionmanagerconfig"},(0,i.kt)("inlineCode",{parentName:"h3"},"syncVersionManagerConfig")),(0,i.kt)(l.Z,{to:"/api/types/interface/NodeConfig#syncVersionManagerConfig",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Will sync the currently configured ",(0,i.kt)("a",{parentName:"p",href:"#version"},"Node.js version"),' to a 3rd-party version manager\'s\nconfig/rc file. Supports "nodenv" (syncs to ',(0,i.kt)("inlineCode",{parentName:"p"},".node-version"),'), "nvm" (syncs to ',(0,i.kt)("inlineCode",{parentName:"p"},".nvmrc"),"), or none\n(default)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/workspace.yml" {2}',title:'".moon/workspace.yml"',"{2}":!0},"node:\n  syncVersionManagerConfig: 'nvm'\n")),(0,i.kt)("p",null,"This is a special setting that ensure other Node.js processes outside of our toolchain are utilizing\nthe same version, which is a very common practice when managing dependencies."),(0,i.kt)("h2",{id:"typescript"},(0,i.kt)("inlineCode",{parentName:"h2"},"typescript"),(0,i.kt)(p.Z,{updated:!0,version:"0.12",mdxType:"VersionLabel"})),(0,i.kt)(l.Z,{to:"/api/types/interface/WorkspaceConfig#typescript",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Dictates how moon interacts with and utilizes TypeScript within the workspace. This field is\noptional and is undefined by default. Define it to enable TypeScript support."),(0,i.kt)("h3",{id:"createmissingconfig"},(0,i.kt)("inlineCode",{parentName:"h3"},"createMissingConfig"),(0,i.kt)(p.Z,{version:"0.6",mdxType:"VersionLabel"})),(0,i.kt)(l.Z,{to:"/api/types/interface/TypeScriptConfig#createMissingConfig",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"When ",(0,i.kt)("a",{parentName:"p",href:"#syncprojectreferences"},"syncing project references")," and a depended on project ",(0,i.kt)("em",{parentName:"p"},"does not")," have\na ",(0,i.kt)("inlineCode",{parentName:"p"},"tsconfig.json"),", automatically create one. Defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/workspace.yml" {2}',title:'".moon/workspace.yml"',"{2}":!0},"typescript:\n  createMissingConfig: true\n")),(0,i.kt)("h3",{id:"projectconfigfilename"},(0,i.kt)("inlineCode",{parentName:"h3"},"projectConfigFileName")),(0,i.kt)(l.Z,{to:"/api/types/interface/TypeScriptConfig#projectConfigFileName",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Defines the file name of the ",(0,i.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," found in the project root. We utilize this setting when\nsyncing project references between projects. Defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"tsconfig.json"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/workspace.yml" {2}',title:'".moon/workspace.yml"',"{2}":!0},"typescript:\n  projectConfigFileName: 'tsconfig.build.json'\n")),(0,i.kt)("h3",{id:"rootconfigfilename"},(0,i.kt)("inlineCode",{parentName:"h3"},"rootConfigFileName")),(0,i.kt)(l.Z,{to:"/api/types/interface/TypeScriptConfig#rootConfigFileName",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Defines the file name of the ",(0,i.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," found in the workspace root. We utilize this setting\nwhen syncing projects as references. Defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"tsconfig.json"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/workspace.yml" {2}',title:'".moon/workspace.yml"',"{2}":!0},"typescript:\n  rootConfigFileName: 'tsconfig.projects.json'\n")),(0,i.kt)("h3",{id:"rootoptionsconfigfilename"},(0,i.kt)("inlineCode",{parentName:"h3"},"rootOptionsConfigFileName"),(0,i.kt)(p.Z,{version:"0.6",mdxType:"VersionLabel"})),(0,i.kt)(l.Z,{to:"/api/types/interface/TypeScriptConfig#rootOptionsConfigFileName",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Defines the file name of the config file found in the workspace root that houses shared compiler\noptions. Defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"tsconfig.options.json"),". This setting is used in the following scenarios:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"When ",(0,i.kt)("a",{parentName:"li",href:"#"},"creating a ",(0,i.kt)("inlineCode",{parentName:"a"},"tsconfig.json")," for a project"),", sets the ",(0,i.kt)("inlineCode",{parentName:"li"},"extends")," field to this value.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/workspace.yml" {2}',title:'".moon/workspace.yml"',"{2}":!0},"typescript:\n  rootOptionsConfigFileName: 'tsconfig.base.json'\n")),(0,i.kt)("h3",{id:"routeoutdirtocache"},(0,i.kt)("inlineCode",{parentName:"h3"},"routeOutDirToCache")),(0,i.kt)(l.Z,{to:"/api/types/interface/TypeScriptConfig#routeOutDirToCache",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Updates the ",(0,i.kt)("inlineCode",{parentName:"p"},"outDir")," compiler option in each project's ",(0,i.kt)("a",{parentName:"p",href:"#projectConfigFileName"},(0,i.kt)("inlineCode",{parentName:"a"},"tsconfig.json"))," to\nroute to moon's cache folder. This is useful when using project references and wanting to keep all\nthe compiled ",(0,i.kt)("inlineCode",{parentName:"p"},".d.ts")," files ",(0,i.kt)("em",{parentName:"p"},"out")," of the project folder. Defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/workspace.yml" {2}',title:'".moon/workspace.yml"',"{2}":!0},"typescript:\n  routeOutDirToCache: true\n")),(0,i.kt)("p",null,'As a demonstration, if we had an npm package located at "packages/components", the ',(0,i.kt)("inlineCode",{parentName:"p"},"outDir")," compiler\noption will be re-routed to the following when syncing."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="<project>/tsconfig.json"',title:'"<project>/tsconfig.json"'},'{\n  // ...\n  "compilerOptions": {\n    // ...\n    "outDir": "../../.moon/cache/types/packages/components"\n  }\n}\n')),(0,i.kt)("h3",{id:"syncprojectreferences"},(0,i.kt)("inlineCode",{parentName:"h3"},"syncProjectReferences")),(0,i.kt)(l.Z,{to:"/api/types/interface/TypeScriptConfig#syncProjectReferences",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Will sync a project's ",(0,i.kt)("a",{parentName:"p",href:"../concepts/project#dependencies"},"dependencies")," (when applicable) as project\nreferences within that project's ",(0,i.kt)("inlineCode",{parentName:"p"},"tsconfig.json"),", and the workspace root ",(0,i.kt)("inlineCode",{parentName:"p"},"tsconfig.json"),". Defaults\nto ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," when the parent ",(0,i.kt)("inlineCode",{parentName:"p"},"typescript")," setting is defined, otherwise ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/workspace.yml" {2}',title:'".moon/workspace.yml"',"{2}":!0},"typescript:\n  syncProjectReferences: true\n")),(0,i.kt)("p",null,"A quick example on how this works. Given the following ",(0,i.kt)("inlineCode",{parentName:"p"},"dependsOn"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml"',title:'"moon.yml"'},"dependsOn:\n  - 'designSystem'\n  - 'reactHooks'\n")),(0,i.kt)("p",null,"Would result in the following ",(0,i.kt)("inlineCode",{parentName:"p"},"references")," within both ",(0,i.kt)("inlineCode",{parentName:"p"},"tsconfig.json"),"s."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="tsconfig.json"',title:'"tsconfig.json"'},'{\n  // ...\n  "references": [\n    // ...\n    { "path": "../../design-system" },\n    { "path": "../../react-hooks" }\n  ]\n}\n')),(0,i.kt)("h3",{id:"syncprojectreferencestopaths"},(0,i.kt)("inlineCode",{parentName:"h3"},"syncProjectReferencesToPaths")),(0,i.kt)(l.Z,{to:"/api/types/interface/TypeScriptConfig#syncProjectReferencesToPaths",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Will sync a project's ",(0,i.kt)("a",{parentName:"p",href:"#projectConfigFileName"},(0,i.kt)("inlineCode",{parentName:"a"},"tsconfig.json"))," project references to the ",(0,i.kt)("inlineCode",{parentName:"p"},"paths"),"\ncompiler option, using the referenced project's ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," name. This is useful for mapping\nimport aliases to their source code. Defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/workspace.yml" {2}',title:'".moon/workspace.yml"',"{2}":!0},"typescript:\n  syncProjectReferencesToPaths: true\n")),(0,i.kt)("p",null,"As a demonstration, if we had a reference to a shared npm package with the name ",(0,i.kt)("inlineCode",{parentName:"p"},"@brand/components"),",\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"paths")," compiler option would be updated to the following when syncing. The index file may exist\nin a ",(0,i.kt)("inlineCode",{parentName:"p"},"src")," folder, or the root of the package."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="<project>/tsconfig.json"',title:'"<project>/tsconfig.json"'},'{\n  // ...\n  "compilerOptions": {\n    // ...\n    "paths": {\n      "@brand/components": ["../shared/components/src/index.ts"],\n      "@brand/components/*": ["../shared/components/src/*"]\n    }\n  },\n  "references": [\n    {\n      "path": "../shared/components"\n    }\n  ]\n}\n')),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"This setting runs ",(0,i.kt)("em",{parentName:"p"},"after")," ",(0,i.kt)("a",{parentName:"p",href:"#syncprojectreferences"},(0,i.kt)("inlineCode",{parentName:"a"},"syncProjectReferences"))," and will inherit any\nsynced references from that setting.")),(0,i.kt)("h2",{id:"features"},"Features"),(0,i.kt)("h2",{id:"generator"},(0,i.kt)("inlineCode",{parentName:"h2"},"generator"),(0,i.kt)(p.Z,{version:"0.14",mdxType:"VersionLabel"})),(0,i.kt)(l.Z,{to:"/api/types/interface/WorkspaceConfig#generator",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Configures aspects of the template generator."),(0,i.kt)("h3",{id:"templates"},(0,i.kt)("inlineCode",{parentName:"h3"},"templates")),(0,i.kt)(l.Z,{to:"/api/types/interface/GeneratorConfig#templates",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"A list of file system paths where templates can be located, relative from the workspace root.\nDefaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"./templates"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/workspace.yml" {2-4}',title:'".moon/workspace.yml"',"{2-4}":!0},"generator:\n  templates:\n    - './templates'\n    - './other/templates'\n")),(0,i.kt)("h2",{id:"hasher"},(0,i.kt)("inlineCode",{parentName:"h2"},"hasher"),(0,i.kt)(p.Z,{version:"0.13",mdxType:"VersionLabel"})),(0,i.kt)(l.Z,{to:"/api/types/interface/WorkspaceConfig#hasher",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Configures aspects of smart hashing layer."),(0,i.kt)("h3",{id:"optimization"},(0,i.kt)("inlineCode",{parentName:"h3"},"optimization")),(0,i.kt)(l.Z,{to:"/api/types/interface/HasherConfig#optimization",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Determines the optimization level to utilize when hashing content before running targets."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"accuracy")," (default) - When hashing dependency versions, utilize the resolved value in the\nlockfile. This requires parsing the lockfile, which may reduce performance."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"performance")," - When hashing dependency versions, utilize the value defined in the manifest. This\nis typically a version range or requirement.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/workspace.yml" {2}',title:'".moon/workspace.yml"',"{2}":!0},"hasher:\n  optimization: 'performance'\n")),(0,i.kt)("h2",{id:"notifier"},(0,i.kt)("inlineCode",{parentName:"h2"},"notifier"),(0,i.kt)(p.Z,{version:"0.17",mdxType:"VersionLabel"})),(0,i.kt)(l.Z,{to:"/api/types/interface/WorkspaceConfig#notifier",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Configures how moon notifies and interacts with a developer or an external system."),(0,i.kt)("h3",{id:"webhookurl"},(0,i.kt)("inlineCode",{parentName:"h3"},"webhookUrl")),(0,i.kt)(l.Z,{to:"/api/types/interface/NotifierConfig#webhookUrl",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Defines an HTTPS URL that all pipeline events will be posted to. View the\n",(0,i.kt)("a",{parentName:"p",href:"../guides/webhooks"},"webhooks guide for more information")," on available events."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/workspace.yml" {2}',title:'".moon/workspace.yml"',"{2}":!0},"notifier:\n  webhookUrl: 'https://api.company.com/some/endpoint'\n")),(0,i.kt)("h2",{id:"runner"},(0,i.kt)("inlineCode",{parentName:"h2"},"runner"),(0,i.kt)(p.Z,{updated:!0,version:"0.13",mdxType:"VersionLabel"})),(0,i.kt)(l.Z,{to:"/api/types/interface/WorkspaceConfig#runner",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Configures aspects of the action runner."),(0,i.kt)("h3",{id:"cachelifetime"},(0,i.kt)("inlineCode",{parentName:"h3"},"cacheLifetime"),(0,i.kt)(p.Z,{version:"0.11",mdxType:"VersionLabel"})),(0,i.kt)(l.Z,{to:"/api/types/interface/RunnerConfig#cacheLifetime",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,'The maximum lifetime of cached artifacts before they\'re marked as stale and automatically removed by\nthe action runner. Defaults to "7 days". This field requires an integer and a timeframe unit that\ncan be ',(0,i.kt)("a",{parentName:"p",href:"https://docs.rs/humantime/2.1.0/humantime/fn.parse_duration.html"},"parsed as a duration"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/workspace.yml" {2}',title:'".moon/workspace.yml"',"{2}":!0},"runner:\n  cacheLifetime: '24 hours'\n")),(0,i.kt)("h3",{id:"implicitdeps"},(0,i.kt)("inlineCode",{parentName:"h3"},"implicitDeps"),(0,i.kt)(p.Z,{version:"0.16",mdxType:"VersionLabel"})),(0,i.kt)(l.Z,{to:"/api/types/interface/RunnerConfig#implicitDeps",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Defines task ",(0,i.kt)("a",{parentName:"p",href:"./project#deps"},(0,i.kt)("inlineCode",{parentName:"a"},"deps"))," that are implicitly inherited by ",(0,i.kt)("em",{parentName:"p"},"all")," tasks within the\nworkspace. This is extremely useful for pre-building projects that are used extensively throughout\nthe repo, or always building project dependencies. Defaults to an empty list."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/workspace.yml" {2-5}',title:'".moon/workspace.yml"',"{2-5}":!0},"runner:\n  implicitDeps:\n    - '^:build'\n")),(0,i.kt)("h3",{id:"implicitinputs"},(0,i.kt)("inlineCode",{parentName:"h3"},"implicitInputs"),(0,i.kt)(p.Z,{version:"0.9",mdxType:"VersionLabel"})),(0,i.kt)(l.Z,{to:"/api/types/interface/RunnerConfig#implicitInputs",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Defines task ",(0,i.kt)("a",{parentName:"p",href:"./project#inputs"},(0,i.kt)("inlineCode",{parentName:"a"},"inputs"))," that are implicitly inherited by ",(0,i.kt)("em",{parentName:"p"},"all"),' tasks within the\nworkspace. This is extremely useful for the "changes to these files should always trigger a task"\nscenario.'),(0,i.kt)("p",null,"Like ",(0,i.kt)("inlineCode",{parentName:"p"},"inputs"),", file paths/globs defined here are relative from the inheriting project.\n",(0,i.kt)("a",{parentName:"p",href:"../concepts/file-pattern#project-relative"},"Project and workspace relative file patterns")," are\nsupported and encouraged."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/workspace.yml" {2-5}',title:'".moon/workspace.yml"',"{2-5}":!0},"runner:\n  implicitInputs:\n    - 'package.json'\n    - '/.moon/project.yml'\n    - '/.moon/workspace.yml'\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"When not defined, this setting defaults to the list in the example above. When this setting ",(0,i.kt)("em",{parentName:"p"},"is\ndefined"),", that list will be overwritten, so be sure to explicitly define them if you would like to\nretain that functionality.")),(0,i.kt)("h3",{id:"inheritcolorsforpipedtasks"},(0,i.kt)("inlineCode",{parentName:"h3"},"inheritColorsForPipedTasks"),(0,i.kt)(p.Z,{version:"0.3",mdxType:"VersionLabel"})),(0,i.kt)(l.Z,{to:"/api/types/interface/RunnerConfig#inheritColorsForPipedTasks",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Force colors to be inherited from the current terminal for all tasks that are ran as a child process\nand their output is piped to the action runner. Defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),".\n",(0,i.kt)("a",{parentName:"p",href:"../commands/overview#colors"},"View more about color handling in moon"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/workspace.yml" {2}',title:'".moon/workspace.yml"',"{2}":!0},"runner:\n  inheritColorsForPipedTasks: true\n")),(0,i.kt)("h3",{id:"logrunningcommand"},(0,i.kt)("inlineCode",{parentName:"h3"},"logRunningCommand"),(0,i.kt)(p.Z,{version:"0.4",mdxType:"VersionLabel"})),(0,i.kt)(l.Z,{to:"/api/types/interface/RunnerConfig#logRunningCommand",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"When enabled, will log the task's command, resolved arguments, and working directory when a target\nis ran. Defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/workspace.yml" {2}',title:'".moon/workspace.yml"',"{2}":!0},"runner:\n  logRunningCommand: true\n")),(0,i.kt)("h2",{id:"vcs"},(0,i.kt)("inlineCode",{parentName:"h2"},"vcs")),(0,i.kt)(l.Z,{to:"/api/types/interface/WorkspaceConfig#vcs",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,"Configures the version control system to utilize within the workspace (and repository). A VCS is\nrequired for determining touched (added, modified, etc) files, calculating file hashes, computing\naffected files, and much more."),(0,i.kt)("h3",{id:"manager"},(0,i.kt)("inlineCode",{parentName:"h3"},"manager")),(0,i.kt)(l.Z,{to:"/api/types/interface/VcsConfig#manager",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,'Defines the VCS tool/binary that is being used for managing the repository. Accepts "git" (default)\nor "svn" (experimental).'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/workspace.yml" {2}',title:'".moon/workspace.yml"',"{2}":!0},"vcs:\n  manager: 'git'\n")),(0,i.kt)("h3",{id:"defaultbranch"},(0,i.kt)("inlineCode",{parentName:"h3"},"defaultBranch")),(0,i.kt)(l.Z,{to:"/api/types/interface/VcsConfig#defaultBranch",mdxType:"HeadingApiLink"}),(0,i.kt)("p",null,'Defines the default upstream branch (master/main/trunk) in the repository for comparing differences\nagainst. For git, this is typically "master" (default) or "main", and must include the remote prefix\n(before /). For svn, this should always be "trunk".'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/workspace.yml" {2}',title:'".moon/workspace.yml"',"{2}":!0},"vcs:\n  defaultBranch: 'master'\n")))}h.isMDXComponent=!0}}]);