"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6720],{35318:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var o=n(27378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||a;return n?o.createElement(f,i(i({ref:t},c),{},{components:n})):o.createElement(f,i({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},16699:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var o=n(25773),r=(n(27378),n(35318));const a={slug:"proto-v0.8",title:"proto v0.8 - Version detection and installation improvements",authors:["milesj"],tags:["proto","detect"],image:"./img/proto/v0.8.png"},i=void 0,l={permalink:"/blog/proto-v0.8",editUrl:"https://github.com/moonrepo/moon/tree/master/website/blog/2023-04-28_proto-v0.8.mdx",source:"@site/blog/2023-04-28_proto-v0.8.mdx",title:"proto v0.8 - Version detection and installation improvements",description:"In this release, we're dropping some quality of life workflow improvements.",date:"2023-04-28T00:00:00.000Z",formattedDate:"April 28, 2023",tags:[{label:"proto",permalink:"/blog/tags/proto"},{label:"detect",permalink:"/blog/tags/detect"}],readingTime:1.295,hasTruncateMarker:!0,authors:[{name:"Miles Johnson",title:"Founder, developer",url:"https://github.com/milesj",imageURL:"/img/authors/miles.jpg",key:"milesj"}],frontMatter:{slug:"proto-v0.8",title:"proto v0.8 - Version detection and installation improvements",authors:["milesj"],tags:["proto","detect"],image:"./img/proto/v0.8.png"},prevItem:{title:"moon v1.4 - New tag target scope, MQL support for query commands, and more!",permalink:"/blog/moon-v1.4"},nextItem:{title:"moon v1.3 - Advanced run targeting and an official proto plugin",permalink:"/blog/moon-v1.3"}},s={image:n(62681).Z,authorsImageUrls:[void 0]},p=[{value:"Built-in detection for <code>proto use</code>",id:"built-in-detection-for-proto-use",level:2},{value:"Smarter version detection",id:"smarter-version-detection",level:2},{value:"Other changes",id:"other-changes",level:2}],c={toc:p};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In this release, we're dropping some quality of life workflow improvements."),(0,r.kt)("h2",{id:"built-in-detection-for-proto-use"},"Built-in detection for ",(0,r.kt)("inlineCode",{parentName:"h2"},"proto use")),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/docs/proto/commands/use"},(0,r.kt)("inlineCode",{parentName:"a"},"proto use"))," command is extremely useful for bootstrapping your\ndevelopment environment with all necessary tooling, but it had a hard requirement on the\n",(0,r.kt)("a",{parentName:"p",href:"/docs/proto/config"},(0,r.kt)("inlineCode",{parentName:"a"},".prototools"))," configuration file. But what if you're already using non-proto\nversion files, like ",(0,r.kt)("inlineCode",{parentName:"p"},".nvmrc")," or ",(0,r.kt)("inlineCode",{parentName:"p"},".dvmrc"),"? Or maybe manifest settings, like ",(0,r.kt)("inlineCode",{parentName:"p"},"packageManager")," or\n",(0,r.kt)("inlineCode",{parentName:"p"},"engines")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json"),"?"),(0,r.kt)("p",null,"Great questions, and we agree! As such, we've updated ",(0,r.kt)("inlineCode",{parentName:"p"},"proto use")," to ",(0,r.kt)("em",{parentName:"p"},"also")," detect a version from\nthe environment for the current working directory. We suggest using ",(0,r.kt)("inlineCode",{parentName:"p"},".prototools"),", but feel free to\nconfigure your environments as you so choose!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"# Install all the things!\n$ proto use\n")),(0,r.kt)("h2",{id:"smarter-version-detection"},"Smarter version detection"),(0,r.kt)("p",null,"One of proto's best features is its ",(0,r.kt)("a",{parentName:"p",href:"/docs/proto/detection"},"contextual version detection"),", but it\ndid have 1 shortcoming. When we detected a partial version, like ",(0,r.kt)("inlineCode",{parentName:"p"},"1.2"),", we'd resolve to a fully\nqualified version with the latest patch version (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"1.2.3"),"). While this worked in most cases,\neverytime a new patch was released upstream (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"1.2.4"),"), proto would error and require a manual\ninstall of this new version. This was pretty annoying as ",(0,r.kt)("inlineCode",{parentName:"p"},"1.2.3")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"1.2.4")," are likely to be\ncompatible, and both satisfy the ",(0,r.kt)("inlineCode",{parentName:"p"},"1.2")," version constraint."),(0,r.kt)("p",null,"To mitigate this scenario, we've updated the version detection to scan the locally installed\nversions ",(0,r.kt)("em",{parentName:"p"},"first")," when encountering a partial version. This solves the problem above by allowing\n",(0,r.kt)("inlineCode",{parentName:"p"},"1.2.3")," to satisfy the requirement, instead of forcing an install of ",(0,r.kt)("inlineCode",{parentName:"p"},"1.2.4"),"."),(0,r.kt)("h2",{id:"other-changes"},"Other changes"),(0,r.kt)("p",null,"View the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/moonrepo/proto/releases/tag/v0.8.0"},"official release")," for a full list\nof changes."))}m.isMDXComponent=!0},62681:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/v0.8-9fbf22972083ec9959ca9045d7ea8f95.png"}}]);