"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5950],{35318:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var o=n(27378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=p(n),d=a,g=c["".concat(s,".").concat(d)]||c[d]||u[d]||r;return n?o.createElement(g,l(l({ref:t},m),{},{components:n})):o.createElement(g,l({ref:t},m))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var p=2;p<r;p++)l[p]=n[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},3697:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var o=n(25773),a=(n(27378),n(35318));const r={slug:"proto-v0.7",title:"proto v0.7 - First step towards plugins",authors:["milesj"],tags:["proto","plugins"],image:"./img/proto/v0.7.png"},l=void 0,i={permalink:"/blog/proto-v0.7",editUrl:"https://github.com/moonrepo/moon/tree/master/website/blog/2023-04-21_proto-v0.7.mdx",source:"@site/blog/2023-04-21_proto-v0.7.mdx",title:"proto v0.7 - First step towards plugins",description:"With this release, we're very excited to announce our initial support for plugins in proto!",date:"2023-04-21T00:00:00.000Z",formattedDate:"April 21, 2023",tags:[{label:"proto",permalink:"/blog/tags/proto"},{label:"plugins",permalink:"/blog/tags/plugins"}],readingTime:2.375,hasTruncateMarker:!0,authors:[{name:"Miles Johnson",title:"Founder, developer",url:"https://github.com/milesj",imageURL:"/img/authors/miles.jpg",key:"milesj"}],frontMatter:{slug:"proto-v0.7",title:"proto v0.7 - First step towards plugins",authors:["milesj"],tags:["proto","plugins"],image:"./img/proto/v0.7.png"},nextItem:{title:"moon v1.2 - Tag based task inheritance",permalink:"/blog/moon-v1.2"}},s={image:n(78813).Z,authorsImageUrls:[void 0]},p=[{value:"Initial plugins architecture",id:"initial-plugins-architecture",level:2},{value:"TOML schema plugins",id:"toml-schema-plugins",level:2},{value:"Cleaning improvements",id:"cleaning-improvements",level:2}],m={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"With this release, we're very excited to announce our initial support for plugins in proto!"),(0,a.kt)("h2",{id:"initial-plugins-architecture"},"Initial plugins architecture"),(0,a.kt)("p",null,"Last week we posted an ",(0,a.kt)("a",{parentName:"p",href:"./proto-v0.6#rfc-plugins-system"},"RFC for a new plugins architecture")," for\nproto. We believe plugins will unlock an array of capabilities for proto, will enable the community\nto add their own custom integrations, and the ability for tools to be managed within proto's\ntoolchain."),(0,a.kt)("p",null,"We were very excited for this RFC, and couldn't wait, so we spent the last week prototyping\nimplementations. We got the basics of downloading, installing, and enabling a plugin at ",(0,a.kt)("em",{parentName:"p"},"runtime"),"\nworking incredibly fast. However, implementing the entire RFC in 1 release would have taken too\nlong, and we wanted to avoid dropping such a large feature in a single release. Because of this,\nwe've only implemented ",(0,a.kt)("a",{parentName:"p",href:"/docs/proto/plugins#toml-schema-plugin"},"TOML schema plugins")," in this\nrelease, and will implement WASM plugins in a future release."),(0,a.kt)("h2",{id:"toml-schema-plugins"},"TOML schema plugins"),(0,a.kt)("p",null,"You may be asking yourself, aren't plugins typically code? For the most part, yes, but after\nbuilding a \"version manager\" for multiple languages, we've come to the realization that many tools\ncan simply be supported through a basic configuration file."),(0,a.kt)("p",null,"At minimum, tools require the following pieces to be managed:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Where and how to download the tool"),(0,a.kt)("li",{parentName:"ul"},"How to install/unpack the tool"),(0,a.kt)("li",{parentName:"ul"},"How to resolve available versions to install"),(0,a.kt)("li",{parentName:"ul"},"How to execute the tool's binary")),(0,a.kt)("p",null,"All 4 of these pieces can be solved with a configuration file, and as such, we opted to support a\n",(0,a.kt)("a",{parentName:"p",href:"/docs/proto/plugins#toml-schema-plugin"},"TOML schema based plugin")," as an alternative to a code based\nplugin. The other benefits of a schema is that it's ",(0,a.kt)("em",{parentName:"p"},"easy to write, read, and maintain"),", doesn't\nrequire any code, and doesn't force you into a specific programming language."),(0,a.kt)("p",null,"To demonstate how this plugin works, here's an example of a ",(0,a.kt)("a",{parentName:"p",href:"/moon"},"moon")," TOML schema."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml",metastring:'title="moon-schema.toml"',title:'"moon-schema.toml"'},'name = "moon"\ntype = "cli"\n\n[platform.linux]\ndownload-file = "moon-{arch}-unknown-linux-{libc}"\n\n[platform.macos]\ndownload-file = "moon-{arch}-apple-darwin"\n\n[platform.windows]\ndownload-file = "moon-{arch}-pc-windows-msvc.exe"\n\n[install]\ndownload-url = "https://github.com/moonrepo/moon/releases/download/v{version}/{download_file}"\n\n[resolve]\ngit-url = "https://github.com/moonrepo/moon"\n')),(0,a.kt)("p",null,"Very simple right? With this, you can now configure moon as a plugin within proto."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml",metastring:'title=".prototools"',title:'".prototools"'},'moon = "1.2.0"\n\n[plugins]\nmoon = "schema:./path/to/moon-schema.toml"\n')),(0,a.kt)("p",null,"And ultimately manage every version of moon through proto! Because moon is now a plugin, every\ncommand in proto that accepts a ",(0,a.kt)("inlineCode",{parentName:"p"},"<tool>")," argument, will now accept ",(0,a.kt)("inlineCode",{parentName:"p"},"moon")," as a valid tool."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ proto install moon 1.2.0\n$ proto list-remote moon\n$ proto use\n")),(0,a.kt)("p",null,"Learn more about ",(0,a.kt)("a",{parentName:"p",href:"/docs/proto/plugins#toml-schema-plugin"},"TOML schema plugins in the official docs"),"!"),(0,a.kt)("h2",{id:"cleaning-improvements"},"Cleaning improvements"),(0,a.kt)("p",null,"Last week we introduced the ",(0,a.kt)("a",{parentName:"p",href:"/docs/proto/commands/clean"},(0,a.kt)("inlineCode",{parentName:"a"},"proto clean"))," command that will\nautomatically delete stale and unused tools from the toolchain. This week we've implemented a few\nimprovements to the cleaning process:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Added a ",(0,a.kt)("inlineCode",{parentName:"li"},"--yes")," option to ",(0,a.kt)("a",{parentName:"li",href:"/docs/proto/commands/clean"},(0,a.kt)("inlineCode",{parentName:"a"},"proto clean")),", allowing prompts to be\nbypassed."),(0,a.kt)("li",{parentName:"ul"},"Added a ",(0,a.kt)("inlineCode",{parentName:"li"},"auto-clean")," setting to ",(0,a.kt)("inlineCode",{parentName:"li"},"~/.proto/config.toml"),", enabling automatic cleaning when\n",(0,a.kt)("a",{parentName:"li",href:"/docs/proto/commands/use"},(0,a.kt)("inlineCode",{parentName:"a"},"proto use"))," is ran.")))}u.isMDXComponent=!0},78813:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/v0.7-a86209ab88fb0d3b882a64bedb0fe971.png"}}]);