"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[19902],{35318:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>c});var o=n(27378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),d=p(n),c=r,g=d["".concat(s,".").concat(c)]||d[c]||u[c]||a;return n?o.createElement(g,l(l({ref:t},m),{},{components:n})):o.createElement(g,l({ref:t},m))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var p=2;p<a;p++)l[p]=n[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},88109:(e,t,n)=>{n.d(t,{Z:()=>r});var o=n(27378);function r(e){let{src:t,width:n="90%",alt:r="",title:a,align:l="center",padding:i="1rem"}=e;return o.createElement("div",{style:{marginBottom:i,marginTop:i,textAlign:l}},o.createElement("img",{src:t.default,width:n,alt:r,title:a,className:"inline-block"}))}},28771:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>p,toc:()=>u});var o=n(25773),r=(n(27378),n(35318)),a=n(76911),l=n(88109);const i={slug:"proto-v0.6",title:"proto v0.6 - Unused cleaning and improved global binaries",authors:["milesj"],tags:["proto","globals","clean","errors"],image:"./img/proto/v0.6.png"},s=void 0,p={permalink:"/blog/proto-v0.6",editUrl:"https://github.com/moonrepo/moon/tree/master/website/blog/2023-04-13_proto-v0.6.mdx",source:"@site/blog/2023-04-13_proto-v0.6.mdx",title:"proto v0.6 - Unused cleaning and improved global binaries",description:"With this release, we're expanding on our global binary support and providing quality of life",date:"2023-04-13T00:00:00.000Z",formattedDate:"April 13, 2023",tags:[{label:"proto",permalink:"/blog/tags/proto"},{label:"globals",permalink:"/blog/tags/globals"},{label:"clean",permalink:"/blog/tags/clean"},{label:"errors",permalink:"/blog/tags/errors"}],readingTime:2.42,hasTruncateMarker:!0,authors:[{name:"Miles Johnson",title:"Founder, developer",url:"https://github.com/milesj",imageURL:"/img/authors/miles.jpg",key:"milesj"}],frontMatter:{slug:"proto-v0.6",title:"proto v0.6 - Unused cleaning and improved global binaries",authors:["milesj"],tags:["proto","globals","clean","errors"],image:"./img/proto/v0.6.png"},prevItem:{title:"moon v1.2 - Tag based task inheritance",permalink:"/blog/moon-v1.2"},nextItem:{title:"proto v0.5 - Version aliasing and global binaries",permalink:"/blog/proto-v0.5"}},m={image:n(32488).Z,authorsImageUrls:[void 0]},u=[{value:"RFC: Plugins system",id:"rfc-plugins-system",level:2},{value:"Cleaning stale and unused tools",id:"cleaning-stale-and-unused-tools",level:2},{value:"Global binary improvements",id:"global-binary-improvements",level:2},{value:"Better error messages",id:"better-error-messages",level:2}],d={toc:u};function c(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,o.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"With this release, we're expanding on our global binary support and providing quality of life\nimprovements."),(0,r.kt)("h2",{id:"rfc-plugins-system"},"RFC: Plugins system"),(0,r.kt)("p",null,"Since proto's inception, plugins have been top of mind, but runtime based plugins in Rust are\n",(0,r.kt)("em",{parentName:"p"},"difficult"),". The only viable solution to this problem is WASM, but most developers have never used\nWASM before, nor are they familiar with WASM tooling (myself included)."),(0,r.kt)("p",null,"However, we're at a point in proto's life-cycle where the core is rather stable, and it's time to\nstart investigating plugin support. To this end, we've introduced a small RFC outlining how plugins\nwill be used, enabled, and implemented. It's not very in-depth as we want to avoid implementation\ndetails, but from a consumers perspective, we want to ensure that it makes sense."),(0,r.kt)("p",null,"We'd very much appreciate it if you could take a look at the RFC and provide feedback. If you have\nany experience in Rust runtime plugins, we'd love to hear your thoughts as well."),(0,r.kt)("div",{class:"flex justify-center"},(0,r.kt)(a.Z,{label:"View RFC",href:"https://github.com/moonrepo/proto/issues/73",size:"lg",mdxType:"Button"})),(0,r.kt)("h2",{id:"cleaning-stale-and-unused-tools"},"Cleaning stale and unused tools"),(0,r.kt)("p",null,"Is your ",(0,r.kt)("inlineCode",{parentName:"p"},"~/.proto")," installation growing out of control? Are there old versions of tools that you\ndon't use anymore? Or versions you never used? Unsure if you're using a tool at all or still need\nit?"),(0,r.kt)("p",null,"To help avoid these questions and problems, we're introducing a new command that will uninstall\nstale and unused tools, ",(0,r.kt)("a",{parentName:"p",href:"/docs/proto/commands/clean"},(0,r.kt)("inlineCode",{parentName:"a"},"proto clean")),". When ran, the command will\nlaunch an interactive session and scan the file system for old tools, prompting you to remove them."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ proto clean\n")),(0,r.kt)("p",null,"By default the command will uninstall tools that haven't been used in over 30 days, but this can be\ncustomized with the ",(0,r.kt)("inlineCode",{parentName:"p"},"--days")," option."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Tools installed before v0.6 will most likely be considered stale, as we weren't tracking install and\nlast used timestamps. However, everything will work as intended after running a tool or simply\nmoving forward from this point.")),(0,r.kt)("h2",{id:"global-binary-improvements"},"Global binary improvements"),(0,r.kt)("p",null,"In our ",(0,r.kt)("a",{parentName:"p",href:"./proto-v0.5"},"previous release"),", we announced the\n",(0,r.kt)("a",{parentName:"p",href:"/docs/proto/commands/install-global"},(0,r.kt)("inlineCode",{parentName:"a"},"proto install-global"))," command for installing global\ndependencies that are unique per tool. Thanks to the community, this command has been updated to\nsupport installing multiple globals at once!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ proto install-global node typescript webpack-cli\n")),(0,r.kt)("p",null,"On top of this, we're also introducing another command that was requested by the community,\n",(0,r.kt)("a",{parentName:"p",href:"/docs/proto/commands/list-global"},(0,r.kt)("inlineCode",{parentName:"a"},"proto list-global")),", that can be used to list all currently\ninstalled globals."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ proto list-global node\ntsc - ~/.proto/tools/node/globals/lib/node_modules/typescript/bin/tsc\ntsserver - ~/.proto/tools/node/globals/lib/node_modules/typescript/bin/tsserver\n")),(0,r.kt)("h2",{id:"better-error-messages"},"Better error messages"),(0,r.kt)("p",null,"We've spent most of the past week working on a new internal architecture called\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/moonrepo/starbase"},"Starbase"),", which will be the new foundation for proto and\nmoon moving forward. One of the major benefits of this new architecture is a rewritten error system\nthat provides more context and better error messages."),(0,r.kt)("p",null,"Here's an example of this, albeit with a contrived situation:"),(0,r.kt)(l.Z,{src:n(99296),width:"90%",mdxType:"Image"}))}c.isMDXComponent=!0},99296:(e,t,n)=>{n.r(t),n.d(t,{default:()=>o});const o=n.p+"assets/images/v0.6-errors-429f778ecbebbe5bdab9fb9328490928.png"},32488:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/v0.6-54cd6a41ee17e956623325a956645c66.png"}}]);