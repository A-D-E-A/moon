"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7937],{5318:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(7378);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=o,h=u["".concat(l,".").concat(d)]||u[d]||m[d]||i;return n?a.createElement(h,r(r({ref:t},c),{},{components:n})):a.createElement(h,r({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var p=2;p<i;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9511:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(5773),o=(n(7378),n(5318));const i={title:"FAQ"},r=void 0,s={unversionedId:"faq",id:"faq",title:"FAQ",description:"General",source:"@site/docs/faq.mdx",sourceDirName:".",slug:"/faq",permalink:"/docs/faq",draft:!1,editUrl:"https://github.com/moonrepo/moon/tree/master/website/docs/faq.mdx",tags:[],version:"current",frontMatter:{title:"FAQ"},sidebar:"docs",previous:{title:"Terminology",permalink:"/docs/terminology"}},l={},p=[{value:"General",id:"general",level:2},{value:"Where did the name &quot;moon&quot; come from?",id:"where-did-the-name-moon-come-from",level:3},{value:"Will moon support other languages besides JavaScript?",id:"will-moon-support-other-languages-besides-javascript",level:3},{value:"Will moon support continuous deployment?",id:"will-moon-support-continuous-deployment",level:3},{value:"What should be considered the &quot;source of truth&quot;?",id:"what-should-be-considered-the-source-of-truth",level:3},{value:"Action runner",id:"action-runner",level:2},{value:"What is <code>SetupNodeTool</code>, <code>InstallNodeDeps</code>, <code>RunTarget</code>, etc?",id:"what-is-setupnodetool-installnodedeps-runtarget-etc",level:3},{value:"Projects &amp; tasks",id:"projects--tasks",level:2},{value:"How to pipe or redirect tasks?",id:"how-to-pipe-or-redirect-tasks",level:3},{value:"How to run multiple commands within a task?",id:"how-to-run-multiple-commands-within-a-task",level:3},{value:"How to run tasks in a shell?",id:"how-to-run-tasks-in-a-shell",level:3},{value:"Can we run other languages?",id:"can-we-run-other-languages",level:3},{value:"JavaScript ecosystem",id:"javascript-ecosystem",level:2},{value:"Can we use <code>package.json</code> scripts?",id:"can-we-use-packagejson-scripts",level:3},{value:"Can moon version/publish packages?",id:"can-moon-versionpublish-packages",level:3}],c={toc:p};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"general"},"General"),(0,o.kt)("h3",{id:"where-did-the-name-moon-come-from"},'Where did the name "moon" come from?'),(0,o.kt)("p",null,"The first incarnation of the name was a misspelling of monorepo (= moonrepo). This is where the\ndomain moonrepo.dev came from, and our official company, moonrepo LLC."),(0,o.kt)("p",null,"However, moonrepo is quite a long name with many syllables, and as someone who prefers short 1\nsyllable words, moon was perfect. The word moon also has great symmetry, as you can see in our logo!"),(0,o.kt)("p",null,"But that's not all... moon is also an acronym. It originally stood for ",(0,o.kt)("strong",{parentName:"p"},"m"),"onorepo,\n",(0,o.kt)("strong",{parentName:"p"},"o"),"rganization, ",(0,o.kt)("strong",{parentName:"p"},"o"),"rchestration, and ",(0,o.kt)("strong",{parentName:"p"},"n"),"otification tool. But since moon can also be used for\npolyrepos, we replaced monorepo with ",(0,o.kt)("strong",{parentName:"p"},"m"),"anagement (as shown on the homepage). This is a great\nacronym, as it embraces what moon is trying to solve:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"M"),"anage repos, projects, and tasks with ease."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"O"),"rganize projects and the repo to scale."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"O"),"rchestrate tasks as efficiently as possible."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"N"),"otify developers and systems about important events.")),(0,o.kt)("h3",{id:"will-moon-support-other-languages-besides-javascript"},"Will moon support other languages besides JavaScript?"),(0,o.kt)("p",null,"Yes! Although we're focusing right now on JavaScript (and TypeScript, Node.js), we've designed moon\nto be language agnostic and easily pluggable in the future. If we're to guess which language would\nbe next, it would most likely be Ruby to support React Native based applications."),(0,o.kt)("p",null,"With that being said, for languages not supported in our toolchain, you can still execute them\nwithin at task by setting the ",(0,o.kt)("a",{parentName:"p",href:"./config/project#platform"},(0,o.kt)("inlineCode",{parentName:"a"},"platform"),' to "system"'),"."),(0,o.kt)("h3",{id:"will-moon-support-continuous-deployment"},"Will moon support continuous deployment?"),(0,o.kt)("p",null,"Yes! We plan to integrate CD with the current build and CI system, but we are focusing on the latter\n2 for the time being. Why not start using moon today so that you can easily adopt CD when it's\nready?"),(0,o.kt)("h3",{id:"what-should-be-considered-the-source-of-truth"},'What should be considered the "source of truth"?'),(0,o.kt)("p",null,"If you're a frontend developer, you'll assume that a ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," is the source of truth for a\nproject, as it defines scripts, dependencies, and repo-local relations. While true, this breaks down\nwith additional tooling, like TypeScript project references, as now you must maintain\n",(0,o.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," as well as ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json"),". The risk of these falling out of sync is high."),(0,o.kt)("p",null,"This problem is further exacerbated by more tooling, or additional programming languages. What if\nyour frontend project is dependent on a backend project? This isn't easily modeled in\n",(0,o.kt)("inlineCode",{parentName:"p"},"package.json"),". What if the backend project needs to be built and ran before running the frontend\nproject? Again, while not impossible, it's quite cumbersome to model in ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," scripts. So\non and so forth."),(0,o.kt)("p",null,"moon aims to solve this with a different approach, by standardizing all projects in the workspace on\n",(0,o.kt)("a",{parentName:"p",href:"./config/project"},(0,o.kt)("inlineCode",{parentName:"a"},"moon.yml")),". With this, the ",(0,o.kt)("inlineCode",{parentName:"p"},"moon.yml")," is the source of truth for each project,\nand provides us with the following:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The configuration is language agnostic. All projects are configured in a similar manner."),(0,o.kt)("li",{parentName:"ul"},"Tasks can reference other tasks easily. For example, npm scripts referencing rake tasks, and vice\nverse, is a non-ideal experience."),(0,o.kt)("li",{parentName:"ul"},"Dependencies defined with ",(0,o.kt)("a",{parentName:"li",href:"./config/project#dependson"},(0,o.kt)("inlineCode",{parentName:"a"},"dependsOn"))," use moon project names, and\nnot language specific semantics. This field also easily populates the dependency/project graphs."),(0,o.kt)("li",{parentName:"ul"},"For JavaScript projects:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"package.json")," dependencies (via ",(0,o.kt)("inlineCode",{parentName:"li"},"dependsOn"),") are kept in sync when\n",(0,o.kt)("a",{parentName:"li",href:"./config/workspace#syncprojectworkspacedependencies"},(0,o.kt)("inlineCode",{parentName:"a"},"node.syncProjectWorkspaceDependencies")),"\nis enabled."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"tsconfig.json")," project references (via ",(0,o.kt)("inlineCode",{parentName:"li"},"dependsOn"),") are kept in sync when\n",(0,o.kt)("a",{parentName:"li",href:"./config/workspace#syncprojectreferences"},(0,o.kt)("inlineCode",{parentName:"a"},"typescript.syncProjectReferences"))," is enabled.")))),(0,o.kt)("p",null,"By using moon as the source of truth, we can ensure a healthy repository, by accurately keeping\neverything in sync, and modifying project/language configuration to operate effectively."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"With all that being said, moon supports\n",(0,o.kt)("a",{parentName:"p",href:"./concepts/project#dependencies"},"implicit dependency scanning"),", if you'd prefer to continue\nutilizing language specific functionality, instead of migrating entirely to moon.")),(0,o.kt)("h2",{id:"action-runner"},"Action runner"),(0,o.kt)("h3",{id:"what-is-setupnodetool-installnodedeps-runtarget-etc"},"What is ",(0,o.kt)("inlineCode",{parentName:"h3"},"SetupNodeTool"),", ",(0,o.kt)("inlineCode",{parentName:"h3"},"InstallNodeDeps"),", ",(0,o.kt)("inlineCode",{parentName:"h3"},"RunTarget"),", etc?"),(0,o.kt)("p",null,"When we run a ",(0,o.kt)("a",{parentName:"p",href:"./concepts/task"},"task"),", we generate a dependency graph of nodes, known as actions.\nThese labels are the actions in the graph, and break down as follows:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"SetupNodeTool")," - Sets up the Node.js ",(0,o.kt)("a",{parentName:"li",href:"./concepts/toolchain"},"toolchain"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"SetupSystemTool")," - Currently a no operation."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"InstallNodeDeps")," - Installs Node.js dependencies (",(0,o.kt)("inlineCode",{parentName:"li"},"node_modules"),") in the workspace root."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"InstallSystemDeps")," - Currently a no operation."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"SyncNodeProject")," - When a project's ",(0,o.kt)("a",{parentName:"li",href:"./config/project#language"},(0,o.kt)("inlineCode",{parentName:"a"},"language")),' is "javascript" or\n"typescript". Will sync ',(0,o.kt)("inlineCode",{parentName:"li"},"package.json")," dependencies and ",(0,o.kt)("inlineCode",{parentName:"li"},"tsconfig.json")," project references."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"SyncSystemProject")," - Currently a no operation. Is created when a project's\n",(0,o.kt)("a",{parentName:"li",href:"./config/project#language"},(0,o.kt)("inlineCode",{parentName:"a"},"language"))," does not require syncing."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"RunTarget")," - The common action. This runs the target task within a project.")),(0,o.kt)("h2",{id:"projects--tasks"},"Projects & tasks"),(0,o.kt)("h3",{id:"how-to-pipe-or-redirect-tasks"},"How to pipe or redirect tasks?"),(0,o.kt)("p",null,"Piping (",(0,o.kt)("inlineCode",{parentName:"p"},"|"),") or redirecting (",(0,o.kt)("inlineCode",{parentName:"p"},">"),") the output of a task (maybe to another task), whether via stdin or\nthrough ",(0,o.kt)("inlineCode",{parentName:"p"},"inputs"),", is currently not possible. However, you ",(0,o.kt)("em",{parentName:"p"},"could")," execute a custom bash script that\nhandles this for you, for example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="scripts/pipe.sh"',title:'"scripts/pipe.sh"'},"#!/usr/bin/env bash\nmoon project foo --json | jq ...\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml"',title:'"moon.yml"'},"tasks:\n    pipe:\n        command: 'bash ./scripts/pipe.sh'\n        platform: 'system'\n")),(0,o.kt)("h3",{id:"how-to-run-multiple-commands-within-a-task"},"How to run multiple commands within a task?"),(0,o.kt)("p",null,"A task in moon is a single command, representing its inputs and outputs, and as such, cannot run\nmultiple commands with ",(0,o.kt)("inlineCode",{parentName:"p"},"&&")," within a single task declaration. However, we do suggest the following\nalternatives:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Create a task for each command, and link them as dependencies with\n",(0,o.kt)("a",{parentName:"li",href:"./config/project#deps"},(0,o.kt)("inlineCode",{parentName:"a"},"deps")),". This allows for each command to be incrementally cached (when\nenabled)."),(0,o.kt)("li",{parentName:"ul"},"Create a task for each command, and run them concurrently with ",(0,o.kt)("a",{parentName:"li",href:"./commands/run"},(0,o.kt)("inlineCode",{parentName:"a"},"moon run")),"."),(0,o.kt)("li",{parentName:"ul"},"Wrap all commands in an external file, and execute that file instead. Refer to the\n",(0,o.kt)("a",{parentName:"li",href:"#how-to-pipe-or-redirect-tasks"},"piping question")," above for an example.")),(0,o.kt)("h3",{id:"how-to-run-tasks-in-a-shell"},"How to run tasks in a shell?"),(0,o.kt)("p",null,"By default, all tasks ",(0,o.kt)("em",{parentName:"p"},"do not")," run in a shell, as we interact with and execute a tool's binary\ndirectly within the toolchain. We also provide no built-in support for shells, but that doesn't mean\nyou can't use them. Since tasks can execute any commands available on your system, you can implement\nthe shell manually like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml"',title:'"moon.yml"'},"tasks:\n  bash:\n    command: 'bash -c some-command'\n    platform: 'system'\n  # Windows\n  cmd:\n    command: 'cmd.exe /d /s /c some-command'\n    platform: 'system'\n  pwsh:\n    command: 'pwsh.exe -c some-command'\n    platform: 'system'\n")),(0,o.kt)("h3",{id:"can-we-run-other-languages"},"Can we run other languages?"),(0,o.kt)("p",null,"Yes! Although our toolchain only supports JavaScript/Node.js at this time, you can still run other\nlanguages within tasks by setting their ",(0,o.kt)("a",{parentName:"p",href:"./config/project#platform"},(0,o.kt)("inlineCode",{parentName:"a"},"platform")),' to "system". System\ntasks are an escape hatch that will use any command available on the current machine.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml"',title:'"moon.yml"'},"tasks:\n  # Ruby\n  lint:\n    command: 'rubocop'\n    platform: 'system'\n  # PHP\n  test:\n    command: 'phpunit tests'\n    platform: 'system'\n")),(0,o.kt)("p",null,"However, because these languages are not supported directly within our toolchain, they will not\nreceive the benefits of the toolchain. Some of which are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Automatic installation of the language. System tasks expect the command to already exist in the\nenvironment, which requires the user to manually install."),(0,o.kt)("li",{parentName:"ul"},"Consistent language version across all machines."),(0,o.kt)("li",{parentName:"ul"},"Built-in cpu and heap profiling (language specific)."),(0,o.kt)("li",{parentName:"ul"},"Automatic dependency installs when the lockfile changes."),(0,o.kt)("li",{parentName:"ul"},"And many more.")),(0,o.kt)("h2",{id:"javascript-ecosystem"},"JavaScript ecosystem"),(0,o.kt)("h3",{id:"can-we-use-packagejson-scripts"},"Can we use ",(0,o.kt)("inlineCode",{parentName:"h3"},"package.json")," scripts?"),(0,o.kt)("p",null,"We encourage everyone to define tasks in a ",(0,o.kt)("a",{parentName:"p",href:"./config/project#tasks"},(0,o.kt)("inlineCode",{parentName:"a"},"moon.yml"))," file, as it allows\nfor additional metadata like ",(0,o.kt)("inlineCode",{parentName:"p"},"inputs"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"outputs"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"options"),", and more. However, if you'd like to\nkeep using ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," scripts, enable the\n",(0,o.kt)("a",{parentName:"p",href:"./config/workspace#infertasksfromscripts"},(0,o.kt)("inlineCode",{parentName:"a"},"node.inferTasksFromScripts"))," setting."),(0,o.kt)("p",null,"View the ",(0,o.kt)("a",{parentName:"p",href:"./migrate-to-moon"},"official documentation")," for more information on this approach,\nincluding risks, disadvantages, and caveats."),(0,o.kt)("h3",{id:"can-moon-versionpublish-packages"},"Can moon version/publish packages?"),(0,o.kt)("p",null,"At this time, no, as we're focusing on the build and test aspect of development. With that being\nsaid, this is something we'd like to support first-class in the future, but until then, we suggest\nthe following popular tools:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://yarnpkg.com/features/release-workflow"},"Yarn releases")," (requires >= v2)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/changesets/changesets"},"Changesets")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/lerna/lerna"},"Lerna"))))}m.isMDXComponent=!0}}]);