"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3615],{35318:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(27378);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,u=d["".concat(s,".").concat(m)]||d[m]||h[m]||r;return n?a.createElement(u,i(i({ref:t},c),{},{components:n})):a.createElement(u,i({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},19634:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(25773),o=(n(27378),n(35318));const r={slug:"moon-v1.11",title:"moon v1.11 - Next-generation project graph",authors:["milesj"],tags:["project-graph","project"],image:"./img/moon/v1.11.png"},i=void 0,l={permalink:"/blog/moon-v1.11",editUrl:"https://github.com/moonrepo/moon/tree/master/website/blog/2023-07-31_moon-v1.11.mdx",source:"@site/blog/2023-07-31_moon-v1.11.mdx",title:"moon v1.11 - Next-generation project graph",description:"With this release, we've focused heavily on rewriting our project graph for the next-generation of",date:"2023-07-31T00:00:00.000Z",formattedDate:"July 31, 2023",tags:[{label:"project-graph",permalink:"/blog/tags/project-graph"},{label:"project",permalink:"/blog/tags/project"}],readingTime:4.095,hasTruncateMarker:!0,authors:[{name:"Miles Johnson",title:"Founder, developer",url:"https://github.com/milesj",imageURL:"/img/authors/miles.jpg",key:"milesj"}],frontMatter:{slug:"moon-v1.11",title:"moon v1.11 - Next-generation project graph",authors:["milesj"],tags:["project-graph","project"],image:"./img/moon/v1.11.png"},prevItem:{title:"proto v0.14 - Node.js and Rust now powered by WASM plugins",permalink:"/blog/proto-v0.14"},nextItem:{title:"proto v0.13 - Bun, Deno, and Go now powered by WASM plugins",permalink:"/blog/proto-v0.13"}},s={image:n(21984).Z,authorsImageUrls:[void 0]},p=[{value:"New project graph",id:"new-project-graph",level:2},{value:"Old implementation",id:"old-implementation",level:3},{value:"New implementation",id:"new-implementation",level:3},{value:"Unlocked features",id:"unlocked-features",level:3},{value:"Other changes",id:"other-changes",level:2}],c={toc:p};function h(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"With this release, we've focused heavily on rewriting our project graph for the next-generation of\nmoon."),(0,o.kt)("h2",{id:"new-project-graph"},"New project graph"),(0,o.kt)("p",null,"One of the first features that was built for moon was the project graph, as this was required to\ndetermine relationships between tasks and projects. Its initial implementation was rather simple, as\nit was a basic directed acyclic graph (DAG). However, as moon grew in complexity, so did the project\ngraph, and overtime, it has accrued a lot of cruft and technical debt."),(0,o.kt)("p",null,"One of the biggest pain points has been the project graph cache, and correctly invalidating the\ncache for all necessary scenarios. If you've been using moon for a long time, you're probably aware\nof all the hot fixes and patches that have been released. Another problem with the cache, is that it\nincluded hard-coded ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/moonrepo/moon/issues/937"},"file system paths")," and\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/moonrepo/moon/issues/896"},"environment variables"),", both of which would not\ninvalidate the cache when changed."),(0,o.kt)("p",null,"We felt it was time to rebuild the project graph from the ground up. Some of this work has already\nlanded in ",(0,o.kt)("a",{parentName:"p",href:"./moon-v1.9#rewritten-task-inheritance"},"previous releases"),"."),(0,o.kt)("h3",{id:"old-implementation"},"Old implementation"),(0,o.kt)("p",null,"For those of you who are interested in the technical details, here's a quick overview of how the old\nproject graph worked. To start, the graph was composed around the following phases:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Build")," - Projects are loaded into the graph (nodes), relationships are linked (edges),\nconfigurations are read, tasks are inherited, and platform/language rules are applied."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Expand")," - In all tasks, token variables and functions are expanded/substituted, dependencies\nare expanded (",(0,o.kt)("inlineCode",{parentName:"li"},"^:deps"),", etc), ",(0,o.kt)("inlineCode",{parentName:"li"},".env")," files are read (when applicable), so on and so forth."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Validate")," - Enforces project and task boundaries and constraints.")),(0,o.kt)("p",null,"This is quite a lot of work, and it was all done in ",(0,o.kt)("em",{parentName:"p"},"a single pass"),". What this means is that for\neach project loaded into the graph, we would recursively build -> expand -> validate, until all\nprojects have been loaded, synchronously at once in the same thread. Because this is a rather\nexpensive operation, the project graph cache was introduced to avoid having to do this work on every\nrun."),(0,o.kt)("p",null,"Makes sense, right? For the most part yes, but there is a core problem with the solution above, and\nif you've noticed it already, amazing! The problem is that out of these 3 phases, only the build\nphase is truly cacheable, as the expand and validate phases are far too dynamic and dependent on the\nenvironment. This means that the cache is only partially effective, and in some cases, entirely\nbroken."),(0,o.kt)("p",null,"Another unrelated problem with this solution, is that because everything is built in a single pass,\nadvanced functionality that requires multiple passes is not possible and has been stuck on the\nbacklog."),(0,o.kt)("h3",{id:"new-implementation"},"New implementation"),(0,o.kt)("p",null,"For backwards compatibility, the new project graph works in a similar manner, but has none of the\nshortcomings of the old implementation (hopefully). To start, the new project graph still has the\nsame 3 phases, but they are ",(0,o.kt)("em",{parentName:"p"},"no longer processed in a single pass"),", instead..."),(0,o.kt)("p",null,"The build phase is now asynchronous, enabling deeper interoperability with the rest of the\nasync-aware codebase. However, the critical change is that the project graph cache is now written\n",(0,o.kt)("em",{parentName:"p"},"after")," the build phase (and read ",(0,o.kt)("em",{parentName:"p"},"before"),"), instead of after the entire graph being generated."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The new cache file is ",(0,o.kt)("inlineCode",{parentName:"p"},".moon/cache/states/partialProjectGraph.json"),", and is named partial because\ntasks have not been expanded. Use ",(0,o.kt)("inlineCode",{parentName:"p"},"moon project-graph --json")," for a fully expanded graph.")),(0,o.kt)("p",null,"The expand phase has changed quite a bit. Instead of expanding everything at once, projects and\ntasks are only expanded when they are needed. For example, if only running a single target, we'll\nnow only expand that project and task, instead of ",(0,o.kt)("em",{parentName:"p"},"everything")," in the graph. With this change, you\nshould potentially see performance increases, unless you're using ",(0,o.kt)("inlineCode",{parentName:"p"},"moon ci")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"moon check --all"),"."),(0,o.kt)("p",null,"And lastly, validation is still the same, but has been reworked so that we can easily extend it with\nmore validation rules in the future."),(0,o.kt)("h3",{id:"unlocked-features"},"Unlocked features"),(0,o.kt)("p",null,"With these changes to building and expanding, we've unlocked a few new features that were not\npossible before."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Task dependencies can now reference tag based targets. For example, say we want to build all React\nprojects before starting our application.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml"',title:'"moon.yml"'},"tasks:\n  dev:\n    command: 'next dev'\n    deps:\n      - '#react:build'\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Task commands and arguments will now substitute environment variables, by first checking ",(0,o.kt)("inlineCode",{parentName:"li"},"env"),",\nthen those from the system.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml"',title:'"moon.yml"'},"tasks:\n  build:\n    command: 'docker build --build-arg pkg=$PKG_NAME'\n  env:\n    PKG_NAME: 'foo-bar'\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Project dependencies can now mark relationships as ",(0,o.kt)("inlineCode",{parentName:"li"},"build"),". This is only applicable for languages\nthat support build dependencies, like Rust.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="moon.yml"',title:'"moon.yml"'},"dependsOn:\n  - id: 'foo'\n    scope: 'build'\n")),(0,o.kt)("h2",{id:"other-changes"},"Other changes"),(0,o.kt)("p",null,"View the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/moonrepo/moon/releases/tag/v1.11.0"},"official release")," for a full list\nof changes."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Identifiers (project names, file groups, etc) can now be prefixed with underscores (",(0,o.kt)("inlineCode",{parentName:"li"},"_"),")."),(0,o.kt)("li",{parentName:"ul"},"Added Poetry detection support for Python projects."),(0,o.kt)("li",{parentName:"ul"},"Added an ",(0,o.kt)("inlineCode",{parentName:"li"},"experiments")," setting to ",(0,o.kt)("inlineCode",{parentName:"li"},".moon/workspace.yml"),".")))}h.isMDXComponent=!0},21984:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/v1.11-8730d5c4531586c014cef4253f41baa2.png"}}]);