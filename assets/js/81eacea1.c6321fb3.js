"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[439],{5318:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var r=n(7378);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),u=o,f=d["".concat(l,".").concat(u)]||d[u]||m[u]||a;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2189:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(7378),o=n(3469),a=n(1792);function i(e){let{to:t}=e;return r.createElement("a",{href:t,target:"_blank",className:"float-right inline-block",style:{marginTop:"-3em"}},r.createElement(a.Z,{icon:o.dT$}))}},9022:(e,t,n)=>{n.d(t,{Z:()=>a});var r=n(7378),o=n(9619);function a(e){let{header:t,updated:n,version:a}=e;return r.createElement(o.Z,{text:`v${a}`,variant:n?"success":"info",className:t?"absolute right-0 top-1.5":"ml-2"})}},9619:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(7378),o=n(8944),a=n(1792);const i={failure:"bg-red-100 text-red-900",info:"bg-pink-100 text-pink-900",success:"bg-green-100 text-green-900",warning:"bg-orange-100 text-orange-900"};function s(e){let{className:t,icon:n,text:s,variant:l}=e;return r.createElement("span",{className:(0,o.Z)("inline-flex items-center px-1 py-0.5 rounded text-xs font-bold uppercase",l?i[l]:"bg-gray-100 text-gray-800",t)},n&&r.createElement(a.Z,{icon:n,className:"mr-1"}),s)}},9546:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>c,toc:()=>m});var r=n(5773),o=(n(7378),n(5318)),a=n(2189),i=n(9022);const s={title:".moon/project.yml"},l=void 0,c={unversionedId:"config/global-project",id:"config/global-project",title:".moon/project.yml",description:"The .moon/project.yml file configures file groups and tasks that are inherited by every project",source:"@site/docs/config/global-project.mdx",sourceDirName:"config",slug:"/config/global-project",permalink:"/docs/config/global-project",draft:!1,editUrl:"https://github.com/moonrepo/moon/tree/master/website/docs/config/global-project.mdx",tags:[],version:"current",frontMatter:{title:".moon/project.yml"},sidebar:"docs",previous:{title:".moon/workspace.yml",permalink:"/docs/config/workspace"},next:{title:"moon.yml",permalink:"/docs/config/project"}},p={},m=[{value:'<code>extends</code><VersionLabel version="0.4" />',id:"extends",level:2},{value:"<code>fileGroups</code>",id:"filegroups",level:2},{value:"<code>tasks</code>",id:"tasks",level:2}],d={toc:m};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},".moon/project.yml")," file configures file groups and tasks that are inherited by ",(0,o.kt)("em",{parentName:"p"},"every")," project\nin the workspace. Projects can override or merge with these settings within their respective\n",(0,o.kt)("a",{parentName:"p",href:"./project"},(0,o.kt)("inlineCode",{parentName:"a"},"moon.yml")),"."),(0,o.kt)("h2",{id:"extends"},(0,o.kt)("inlineCode",{parentName:"h2"},"extends"),(0,o.kt)(i.Z,{version:"0.4",mdxType:"VersionLabel"})),(0,o.kt)(a.Z,{to:"/api/types/interface/GlobalProjectConfig#extends",mdxType:"HeadingApiLink"}),(0,o.kt)("p",null,"Defines an external ",(0,o.kt)("inlineCode",{parentName:"p"},".moon/project.yml")," to extend and inherit settings from. Perfect for reusability\nand sharing configuration across repositories and projects. When defined, this setting must be an\nHTTPS URL ",(0,o.kt)("em",{parentName:"p"},"or")," relative file system path that points to a valid YAML document!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/workspace.yml" {1}',title:'".moon/workspace.yml"',"{1}":!0},"extends: 'https://raw.githubusercontent.com/organization/repository/master/.moon/project.yml'\n")),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"For map-based settings, ",(0,o.kt)("inlineCode",{parentName:"p"},"fileGroups")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"tasks"),", entries from both the extended configuration and\nlocal configuration are merged into a new map, with the values of the local taking precedence. Map\nvalues ",(0,o.kt)("em",{parentName:"p"},"are not")," deep merged!")),(0,o.kt)("h2",{id:"filegroups"},(0,o.kt)("inlineCode",{parentName:"h2"},"fileGroups")),(0,o.kt)(a.Z,{to:"/api/types/interface/GlobalProjectConfig#fileGroups",mdxType:"HeadingApiLink"}),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"For more information on file group configuration, refer to the\n",(0,o.kt)("a",{parentName:"p",href:"./project#filegroups"},(0,o.kt)("inlineCode",{parentName:"a"},"fileGroups"))," section in the ",(0,o.kt)("a",{parentName:"p",href:"./project"},(0,o.kt)("inlineCode",{parentName:"a"},"moon.yml"))," doc.")),(0,o.kt)("p",null,"Defines ",(0,o.kt)("a",{parentName:"p",href:"../concepts/file-group"},"file groups")," that will be inherited by all projects, and also\nenables enforcement of organizational patterns and file locations. For example, encourage all\nprojects to place source files in a ",(0,o.kt)("inlineCode",{parentName:"p"},"src")," folder, and all test files in ",(0,o.kt)("inlineCode",{parentName:"p"},"tests"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/project.yml"',title:'".moon/project.yml"'},"fileGroups:\n  configs:\n    - '*.config.{js,cjs,mjs}'\n    - '*.json'\n  sources:\n    - 'src/**/*'\n    - 'types/**/*'\n  tests:\n    - 'tests/**/*'\n    - '**/__tests__/**/*'\n  assets:\n    - 'assets/**/*'\n    - 'images/**/*'\n    - 'static/**/*'\n    - '**/*.{scss,css}'\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"File paths and globs used within a file group are relative from the inherited project's root, and\nnot the workspace.")),(0,o.kt)("h2",{id:"tasks"},(0,o.kt)("inlineCode",{parentName:"h2"},"tasks")),(0,o.kt)(a.Z,{to:"/api/types/interface/GlobalProjectConfig#tasks",mdxType:"HeadingApiLink"}),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"For more information on task configuration, refer to the ",(0,o.kt)("a",{parentName:"p",href:"./project#tasks"},(0,o.kt)("inlineCode",{parentName:"a"},"tasks"))," section in the\n",(0,o.kt)("a",{parentName:"p",href:"./project"},(0,o.kt)("inlineCode",{parentName:"a"},"moon.yml"))," doc.")),(0,o.kt)("p",null,"As mentioned in the link above, ",(0,o.kt)("a",{parentName:"p",href:"../concepts/task"},"tasks")," are actions that are ran within the\ncontext of a project, and commonly wrap an npm binary or system command. For most workspaces, every\nproject ",(0,o.kt)("em",{parentName:"p"},"should")," have linting, type-checking, testing, code formatting, so on and so forth. To\nreduce the amount of boilerplate that ",(0,o.kt)("em",{parentName:"p"},"every")," project would require, this setting offers the ability\nto define tasks that are inherited by all projects within the workspace, but can also be overridden\nper project."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/project.yml"',title:'".moon/project.yml"'},"tasks:\n  format:\n    command: 'prettier --check .'\n\n  lint:\n    command: 'eslint --no-error-on-unmatched-pattern .'\n\n  test:\n    command: 'jest --passWithNoTests'\n\n  typecheck:\n    command: 'tsc --build'\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Relative file paths and globs used within a task are relative from the inherited project's root,\nand not the workspace.")))}u.isMDXComponent=!0}}]);