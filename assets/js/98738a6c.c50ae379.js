"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[94734],{35318:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var o=n(27378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=o.createContext({}),s=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return o.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=s(n),u=a,g=m["".concat(p,".").concat(u)]||m[u]||d[u]||r;return n?o.createElement(g,l(l({ref:t},c),{},{components:n})):o.createElement(g,l({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var s=2;s<r;s++)l[s]=n[s];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},32369:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>s});var o=n(25773),a=(n(27378),n(35318));const r={slug:"proto-v0.19",title:"proto v0.19 - Version pinning and outdated checks",authors:["milesj"],tags:["proto","pin","global","local","outdated"],image:"./img/proto/v0.19.png"},l=void 0,i={permalink:"/blog/proto-v0.19",editUrl:"https://github.com/moonrepo/moon/tree/master/website/blog/2023-09-29_proto-v0.19.mdx",source:"@site/blog/2023-09-29_proto-v0.19.mdx",title:"proto v0.19 - Version pinning and outdated checks",description:"In this release, we're improving version pinning and introducing a new command to check for outdated",date:"2023-09-29T00:00:00.000Z",formattedDate:"September 29, 2023",tags:[{label:"proto",permalink:"/blog/tags/proto"},{label:"pin",permalink:"/blog/tags/pin"},{label:"global",permalink:"/blog/tags/global"},{label:"local",permalink:"/blog/tags/local"},{label:"outdated",permalink:"/blog/tags/outdated"}],readingTime:1.92,hasTruncateMarker:!0,authors:[{name:"Miles Johnson",title:"Founder, developer",url:"https://github.com/milesj",imageURL:"/img/authors/miles.jpg",key:"milesj"}],frontMatter:{slug:"proto-v0.19",title:"proto v0.19 - Version pinning and outdated checks",authors:["milesj"],tags:["proto","pin","global","local","outdated"],image:"./img/proto/v0.19.png"},prevItem:{title:"moon v1.15 - Next-generation action graph",permalink:"/blog/moon-v1.15"},nextItem:{title:"moon v1.14 - Improvements to running targets and toolchain versions",permalink:"/blog/moon-v1.14"}},p={image:n(36691).Z,authorsImageUrls:[void 0]},s=[{value:"New <code>proto pin</code> command (breaking)",id:"new-proto-pin-command-breaking",level:2},{value:"New <code>pin-latest</code> setting",id:"new-pin-latest-setting",level:2},{value:"New <code>proto outdated</code> command",id:"new-proto-outdated-command",level:2},{value:"Other changes",id:"other-changes",level:2}],c={toc:s};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In this release, we're improving version pinning and introducing a new command to check for outdated\nversions."),(0,a.kt)("h2",{id:"new-proto-pin-command-breaking"},"New ",(0,a.kt)("inlineCode",{parentName:"h2"},"proto pin")," command (breaking)"),(0,a.kt)("p",null,"Before our official v1 release, which is relatively soon, we'll be making some breaking changes with\nthe proto APIs. The first is the introduction of the new ",(0,a.kt)("a",{parentName:"p",href:"/docs/proto/commands/pin"},(0,a.kt)("inlineCode",{parentName:"a"},"proto pin")),"\ncommand, which replaces the previous ",(0,a.kt)("inlineCode",{parentName:"p"},"proto local")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"proto global")," commands. We felt this was a\nmuch cleaner change, and far easier to understand than the previous command names."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"# v0.18\n$ proto local go 1.20\n$ proto global node 20\n\n# v0.19+\n$ proto pin go 1.20\n$ proto pin node 20 --global\n")),(0,a.kt)("h2",{id:"new-pin-latest-setting"},"New ",(0,a.kt)("inlineCode",{parentName:"h2"},"pin-latest")," setting"),(0,a.kt)("p",null,"While we're on the subject of pinning versions, we've also introduced a new\n",(0,a.kt)("a",{parentName:"p",href:"/docs/proto/config#pin-latest"},(0,a.kt)("inlineCode",{parentName:"a"},"pin-latest"))," setting. Do you want the latest version to always be\npinned? Do you forgot to pass ",(0,a.kt)("inlineCode",{parentName:"p"},"--pin")," when installing? Do you forget to run the ",(0,a.kt)("inlineCode",{parentName:"p"},"proto global")," or\n",(0,a.kt)("inlineCode",{parentName:"p"},"proto local")," commands (now ",(0,a.kt)("inlineCode",{parentName:"p"},"proto pin"),")? If you answered yes to any of these questions, then this\nsetting is for you."),(0,a.kt)("p",null,'When enabled, and a tool is installed with the "latest" version, the resolved version will\nautomatically be pinned to the configuration of your choice. For example, say we have the following\nuser config:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml",metastring:'title="~/.proto/config.toml"',title:'"~/.proto/config.toml"'},'pin-latest = "local"\n')),(0,a.kt)("p",null,"And we run one of the following commands:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ proto install go\n$ proto install node latest\n")),(0,a.kt)("p",null,"Then the resolved version of the tool will automatically be set to the ",(0,a.kt)("inlineCode",{parentName:"p"},".prototools")," file in the\ncurrent directory. Handy right?"),(0,a.kt)("h2",{id:"new-proto-outdated-command"},"New ",(0,a.kt)("inlineCode",{parentName:"h2"},"proto outdated")," command"),(0,a.kt)("p",null,"By request of the community, we're introducing yet another new command,\n",(0,a.kt)("a",{parentName:"p",href:"/docs/proto/commands/outdated"},(0,a.kt)("inlineCode",{parentName:"a"},"proto outdated")),". If you're familiar with package managers, you can\nprobably guess what this command does! It'll check for newer available versions, for all tools\nconfigured in the closest ",(0,a.kt)("inlineCode",{parentName:"p"},".prototools")," file. Very handy for keeping your tools up to date."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ proto outdated\n\ngo - current version 1.20.2 (via ~1.20), newer version 1.20.8, update available!\nnode - current version 20.7.0 (via 20.7.0), latest version 20.8.0, update available!\n")),(0,a.kt)("h2",{id:"other-changes"},"Other changes"),(0,a.kt)("p",null,"View the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/moonrepo/proto/releases/tag/v0.19.0"},"official release")," for a full list\nof changes."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Added ",(0,a.kt)("inlineCode",{parentName:"li"},"PROTO_WASM_LOG")," environment variable to toggle the logging of messages from Extism and WASM\nplugins. Useful for debugging."),(0,a.kt)("li",{parentName:"ul"},"Updated ",(0,a.kt)("inlineCode",{parentName:"li"},"proto install")," to auto-clean stale plugins after a successful installation.")))}d.isMDXComponent=!0},36691:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/v0.19-8de1899b49d54ec36a7294e44f3880ca.png"}}]);