"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8450],{5318:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>d});var o=t(7378);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,i=function(e,n){if(null==e)return{};var t,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=o.createContext({}),s=function(e){var n=o.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=s(e.components);return o.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},c=o.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(t),d=i,g=c["".concat(p,".").concat(d)]||c[d]||m[d]||r;return t?o.createElement(g,a(a({ref:n},u),{},{components:t})):o.createElement(g,a({ref:n},u))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,a=new Array(r);a[0]=c;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var s=2;s<r;s++)a[s]=t[s];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}c.displayName="MDXCreateElement"},5702:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var o=t(5773),i=(t(7378),t(5318));const r={title:"Overview"},a=void 0,l={unversionedId:"commands/overview",id:"commands/overview",title:"Overview",description:"The following options are available for all moon commands.",source:"@site/docs/commands/overview.mdx",sourceDirName:"commands",slug:"/commands/overview",permalink:"/docs/commands/overview",draft:!1,editUrl:"https://github.com/moonrepo/moon/tree/master/website/docs/commands/overview.mdx",tags:[],version:"current",frontMatter:{title:"Overview"},sidebar:"docs",previous:{title:"Commands",permalink:"/docs/commands"},next:{title:"bin",permalink:"/docs/commands/bin"}},p={},s=[{value:"Caching",id:"caching",level:2},{value:"Colors",id:"colors",level:2},{value:"Piped output",id:"piped-output",level:3},{value:"Concurrency",id:"concurrency",level:2},{value:"Debugging",id:"debugging",level:2},{value:"Logging",id:"logging",level:2},{value:"Outputting logs to a file",id:"outputting-logs-to-a-file",level:3}],u={toc:s};function m(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The following options are available for ",(0,i.kt)("em",{parentName:"p"},"all")," moon commands."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--cache <mode>")," - The mode for ",(0,i.kt)("a",{parentName:"li",href:"#caching"},"cache operations"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--color")," - Force ",(0,i.kt)("a",{parentName:"li",href:"#colors"},"colored output")," for moon (not tasks)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--concurrency"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"-c")," - Maximum number of threads to utilize."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--help")," - Display the help menu for the current command."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--log <level>")," - The lowest ",(0,i.kt)("a",{parentName:"li",href:"#logging"},"log level to output"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--logFile <file>")," - Write logs to the defined file."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--version")," - Display the version of the CLI.")),(0,i.kt)("h2",{id:"caching"},"Caching"),(0,i.kt)("p",null,"We provide a powerful ",(0,i.kt)("a",{parentName:"p",href:"../concepts/cache"},"caching layer"),", but sometimes you need to debug failing or\nbroken tasks, and this cache may get in the way. To circumvent this, we support the ",(0,i.kt)("inlineCode",{parentName:"p"},"--cache")," global\noption, or the ",(0,i.kt)("inlineCode",{parentName:"p"},"MOON_CACHE")," environment variable, both of which accept one of the following values."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"off")," - Turn off caching entirely. Every task will run fresh, including dependency installs."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"read")," - Read existing items from the cache, but do not write to them."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"read-write")," (default) - Read and write items to the cache."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"write")," - Do not read existing cache items, but write new items to the cache.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"$ moon run app:build --cache off\n# Or\n$ MOON_CACHE=off moon run app:build\n")),(0,i.kt)("h2",{id:"colors"},"Colors"),(0,i.kt)("p",null,"Colored output is a complicated subject, with differing implementations and standards across tooling\nand operating systems. moon aims to normalize this as much as possible, by doing the following:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"By default, moon colors are inherited from your terminal settings (",(0,i.kt)("inlineCode",{parentName:"li"},"TERM")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"COLORTERM"),"\nenvironment variables)."),(0,i.kt)("li",{parentName:"ul"},"Colors can be force enabled by passing the ",(0,i.kt)("inlineCode",{parentName:"li"},"--color")," option (preferred), or ",(0,i.kt)("inlineCode",{parentName:"li"},"MOON_COLOR")," or\n",(0,i.kt)("inlineCode",{parentName:"li"},"FORCE_COLOR")," environment variables.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"$ moon app:build --color run\n# Or\n$ MOON_COLOR=2 moon run app:build\n")),(0,i.kt)("p",null,"When forcing colors with ",(0,i.kt)("inlineCode",{parentName:"p"},"MOON_COLOR")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"FORCE_COLOR"),", you may set it to one of the following\nnumerical values for the desired level of color support. This is automatically inferred if you use\n",(0,i.kt)("inlineCode",{parentName:"p"},"--color"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0")," - No colors"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1")," - 16 colors (standard terminal colors)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"2")," - 256 colors"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"3")," - 16 million colors (truecolor)")),(0,i.kt)("h3",{id:"piped-output"},"Piped output"),(0,i.kt)("p",null,"When tasks (child processes) are piped, colors and ANSI escape sequences are lost, since the target\nis not a TTY and we do not implement a PTY. This is a common pattern this is quite annoying.\nHowever, many tools and CLIs support a ",(0,i.kt)("inlineCode",{parentName:"p"},"--color")," option to work around this limitation and to always\nforce colors, even when not a TTY."),(0,i.kt)("p",null,"To mitigate this problem as a whole, and to avoid requiring ",(0,i.kt)("inlineCode",{parentName:"p"},"--color")," for every task, moon supports\nthe ",(0,i.kt)("a",{parentName:"p",href:"../config/workspace#inheritcolorsforpipedtasks"},(0,i.kt)("inlineCode",{parentName:"a"},"runner.inheritColorsForPipedTasks")),"\nconfiguration setting. When enabled, all piped child processes will inherit the color settings of\nthe currently running terminal."),(0,i.kt)("h2",{id:"concurrency"},"Concurrency"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"--concurrency")," option or ",(0,i.kt)("inlineCode",{parentName:"p"},"MOON_CONCURRENCY")," environment variable can be used to control the\nmaximum amount of threads to utilize in our thread pool. If not defined, defaults to the number of\noperating system cores."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"$ moon run app:build --concurrency 1\n# Or\n$ MOON_CONCURRENCY=1 moon run app:build\n")),(0,i.kt)("h2",{id:"debugging"},"Debugging"),(0,i.kt)("p",null,"At this point in time, moon provides no debugging utilities besides ",(0,i.kt)("a",{parentName:"p",href:"#logging"},"logging")," with the\n",(0,i.kt)("inlineCode",{parentName:"p"},"debug"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"trace")," levels."),(0,i.kt)("h2",{id:"logging"},"Logging"),(0,i.kt)("p",null,"By default, moon aims to output as little as possible, as we want to preserve the original output of\nthe command's being ran, excluding warnings and errors. This is managed through log levels, which\ncan be defined with the ",(0,i.kt)("inlineCode",{parentName:"p"},"--log")," global option, or the ",(0,i.kt)("inlineCode",{parentName:"p"},"MOON_LOG")," environment level. The following\nlevels are supported, in priority order."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"off")," - Turn off logging entirely."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"error")," - Only show error logs."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"warn")," - Only show warning logs and above."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"info")," (default) - Only show info logs and above."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"debug")," - Only show debug logs and above."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"trace")," - Show all logs, including network requests and child processes.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"$ moon run app:build --log trace\n# Or\n$ MOON_LOG=trace moon run app:build\n")),(0,i.kt)("h3",{id:"outputting-logs-to-a-file"},"Outputting logs to a file"),(0,i.kt)("p",null,"moon can dump the logs from a command to a file using the ",(0,i.kt)("inlineCode",{parentName:"p"},"--logFile")," option, or the ",(0,i.kt)("inlineCode",{parentName:"p"},"MOON_LOG_FILE"),"\nenvironment variable. The dumped logs will respect the ",(0,i.kt)("inlineCode",{parentName:"p"},"--log")," option and filter the logs piped to\nthe output file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"$ moon run app:build --logFile=output.log\n# Or\n$ MOON_LOG_FILE=output.log moon run app:build\n")))}m.isMDXComponent=!0}}]);