"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3363],{35318:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(27378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(f,l(l({ref:t},p),{},{components:n})):r.createElement(f,l({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},39798:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(27378),a=n(38944);const o="tabItem_wHwb";function l(e){let{children:t,hidden:n,className:l}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(o,l),hidden:n},t)}},33337:(e,t,n)=>{n.d(t,{Z:()=>f});var r=n(25773),a=n(27378),o=n(38944),l=n(83457),i=n(35595),s=n(76457);const c="tabList_J5MA",p="tabItem_l0OV";function u(e){let{className:t,block:n,selectedValue:i,selectValue:s,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.o5)(),m=e=>{const t=e.currentTarget,n=u.indexOf(t),r=c[n].value;r!==i&&(d(t),s(r))},f=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:l}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>u.push(e),onKeyDown:f,onClick:m},l,{className:(0,o.Z)("tabs__item",p,l?.className,{"tabs__item--active":i===t})}),n??t)})))}function d(e){let{lazy:t,children:n,selectedValue:r}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function m(e){const t=(0,i.Y)(e);return a.createElement("div",{className:(0,o.Z)("tabs-container",c)},a.createElement(u,(0,r.Z)({},e,t)),a.createElement(d,(0,r.Z)({},e,t)))}function f(e){const t=(0,s.Z)();return a.createElement(m,(0,r.Z)({key:String(t)},e))}},35595:(e,t,n)=>{n.d(t,{Y:()=>d});var r=n(27378),a=n(35331),o=n(30654),l=n(70784),i=n(71819);function s(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function c(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??s(n);return function(e){const t=(0,l.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function u(e){let{queryString:t=!1,groupId:n}=e;const l=(0,a.k6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,o._X)(i),(0,r.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(l.location.search);t.set(i,e),l.replace({...l.location,search:t.toString()})}),[i,l])]}function d(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=c(e),[l,s]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:o}))),[d,m]=u({queryString:n,groupId:a}),[f,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,i.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),h=(()=>{const e=d??f;return p({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{h&&s(h)}),[h]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);s(e),m(e),g(e)}),[m,g,o]),tabValues:o}}},36642:(e,t,n)=>{n.d(t,{Z:()=>c});var r=n(27378),a=n(30780),o=n(39798),l=n(33337);function i(e,t,n){let r=e.package?`yarn workspace ${e.package} add `:"yarn add ";return e.dev?r+="--dev ":e.peer&&(r+="--peer "),n&&t&&!e.package&&(r+="-W "),r+=e.dep,r}function s(e,t){let n="pnpm add ";return e.dev?n+="--save-dev ":e.peer&&(n+="--save-peer "),e.package?n+=`--filter ${e.package} `:t&&(n+="-w "),n+=e.dep,n}function c(e){let t=i(e,!1,!0),n=s(e,!1);return e.package||(t+="\n\n# If using workspaces\n",n+="\n\n# If using workspaces\n",t+=i(e,!0,!0),n+=s(e,!0)),r.createElement(l.Z,{groupId:"package-manager",defaultValue:"yarn",values:[{label:"Yarn",value:"yarn"},{label:"Yarn (classic)",value:"yarn1"},{label:"npm",value:"npm"},{label:"pnpm",value:"pnpm"}]},r.createElement(o.Z,{value:"yarn"},r.createElement(a.Z,{language:"shell"},i(e,!1,!1))),r.createElement(o.Z,{value:"yarn1"},r.createElement(a.Z,{language:"shell"},t)),r.createElement(o.Z,{value:"npm"},r.createElement(a.Z,{language:"shell"},function(e){let t="npm install ";return e.dev?t+="--save-dev ":e.peer&&(t+="--save-peer "),e.package&&(t+=`--workspace ${e.package} `),t+=e.dep,t}(e))),r.createElement(o.Z,{value:"pnpm"},r.createElement(a.Z,{language:"shell"},n)))}},32189:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(27378),a=n(83469),o=n(31792);function l(e){let{to:t}=e;return r.createElement("a",{href:t,target:"_blank",className:"float-right inline-block",style:{marginTop:"-3em"}},r.createElement(o.Z,{icon:a.dT$}))}},21311:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var r=n(25773),a=(n(27378),n(35318)),o=n(36642),l=n(32189);const i={title:"TypeScript example",sidebar_label:"TypeScript"},s=void 0,c={unversionedId:"guides/examples/typescript",id:"guides/examples/typescript",title:"TypeScript example",description:"In this guide, you'll learn how to integrate TypeScript into moon. We'll be",source:"@site/docs/guides/examples/typescript.mdx",sourceDirName:"guides/examples",slug:"/guides/examples/typescript",permalink:"/docs/guides/examples/typescript",draft:!1,editUrl:"https://github.com/moonrepo/moon/tree/master/website/docs/guides/examples/typescript.mdx",tags:[],version:"current",frontMatter:{title:"TypeScript example",sidebar_label:"TypeScript"},sidebar:"guides",previous:{title:"SvelteKit",permalink:"/docs/guides/examples/sveltekit"},next:{title:"Vite & Vitest",permalink:"/docs/guides/examples/vite"}},p={},u=[{value:"Setup",id:"setup",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Root-level",id:"root-level",level:3},{value:"Project-level",id:"project-level",level:3},{value:"Sharing",id:"sharing",level:3},{value:"FAQ",id:"faq",level:2},{value:"How to preserve pretty output?",id:"how-to-preserve-pretty-output",level:3}],d={toc:u};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)(l.Z,{to:"https://github.com/moonrepo/examples/blob/master/.moon/tasks/node.yml#L95",mdxType:"HeadingApiLink"}),(0,a.kt)("p",null,"In this guide, you'll learn how to integrate ",(0,a.kt)("a",{parentName:"p",href:"https://eslint.org/"},"TypeScript")," into moon. We'll be\nusing ",(0,a.kt)("a",{parentName:"p",href:"../javascript/typescript-project-refs"},"project references"),", as it ensures that only affected\nprojects are built, and not the entire repository."),(0,a.kt)("p",null,"Begin by installing ",(0,a.kt)("inlineCode",{parentName:"p"},"typescript")," and any pre-configured tsconfig packages in your root. We suggest\nusing the same version across the entire repository."),(0,a.kt)(o.Z,{dep:"typescript tsconfig-moon",dev:!0,mdxType:"AddDepsTabs"}),(0,a.kt)("h2",{id:"setup"},"Setup"),(0,a.kt)("p",null,"Since typechecking is a universal workflow, add a ",(0,a.kt)("inlineCode",{parentName:"p"},"typecheck")," task to\n",(0,a.kt)("a",{parentName:"p",href:"../../config/tasks"},(0,a.kt)("inlineCode",{parentName:"a"},".moon/tasks/node.yml"))," with the following parameters."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".moon/tasks/node.yml"',title:'".moon/tasks/node.yml"'},"tasks:\n    typecheck:\n        command:\n            - 'tsc'\n            # Use incremental builds with project references\n            - '--build'\n            # Always use pretty output\n            - '--pretty'\n            # Use verbose logging to see affected projects\n            - '--verbose'\n        inputs:\n            # Source and test files\n            - 'src/**/*'\n            - 'tests/**/*'\n            # Type declarations\n            - 'types/**/*'\n            # Project configs\n            - 'tsconfig.json'\n            - 'tsconfig.*.json'\n            # Root configs (extended from only)\n            - '/tsconfig.options.json'\n        outputs:\n            # Matches `compilerOptions.outDir`\n            - 'lib'\n")),(0,a.kt)("p",null,"Projects can extend this task and provide additional parameters if need be, for example."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="<project>/moon.yml"',title:'"<project>/moon.yml"'},"tasks:\n    typecheck:\n        args:\n            # Force build every time\n            - '--force'\n")),(0,a.kt)("h2",{id:"configuration"},"Configuration"),(0,a.kt)("h3",{id:"root-level"},"Root-level"),(0,a.kt)("p",null,"Multiple root-level TypeScript configs are ",(0,a.kt)("em",{parentName:"p"},"required"),", as we need to define compiler options that\nare shared across the repository, and we need to house a list of all project references."),(0,a.kt)("p",null,"To start, let's create a ",(0,a.kt)("inlineCode",{parentName:"p"},"tsconfig.options.json")," that will contain our compiler options. In our\nexample, we'll extend ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/tsconfig-moon"},"tsconfig-moon")," for convenience.\nSpecifically, the ",(0,a.kt)("inlineCode",{parentName:"p"},"tsconfig.workspaces.json")," config, which enables ECMAScript modules, composite\nmode, declaration emitting, and incremental builds."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="tsconfig.options.json"',title:'"tsconfig.options.json"'},'{\n  "extends": "tsconfig-moon/tsconfig.projects.json",\n  "compilerOptions": {\n    // Your custom options\n    "moduleResolution": "nodenext",\n    "target": "es2022"\n  }\n}\n')),(0,a.kt)("p",null,"We'll also need the standard ",(0,a.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," to house our project references. This is used by\neditors and tooling for deep integrations."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="tsconfig.json"',title:'"tsconfig.json"'},'{\n  "extends": "./tsconfig.options.json",\n  "files": [],\n  // All project references in the repo\n  "references": []\n}\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The ",(0,a.kt)("a",{parentName:"p",href:"../../config/toolchain#rootconfigfilename"},(0,a.kt)("inlineCode",{parentName:"a"},"typescript.rootConfigFileName"))," setting can be\nused to change the root-level config name and the\n",(0,a.kt)("a",{parentName:"p",href:"../../config/toolchain#syncprojectreferences"},(0,a.kt)("inlineCode",{parentName:"a"},"typescript.syncProjectReferences"))," setting will\nautomatically keep project references in sync!")),(0,a.kt)("h3",{id:"project-level"},"Project-level"),(0,a.kt)("p",null,"Every project will require a ",(0,a.kt)("inlineCode",{parentName:"p"},"tsconfig.json"),", as TypeScript itself requires it. The following\n",(0,a.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," will typecheck the entire project, including source and test files."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="<project>/tsconfig.json"',title:'"<project>/tsconfig.json"'},'{\n  // Extend the root compiler options\n  "extends": "../../tsconfig.options.json",\n  "compilerOptions": {\n    // Declarations are written here\n    "outDir": "lib"\n  },\n  // Include files in the project\n  "include": ["src/**/*", "tests/**/*"],\n  // Depends on other projects\n  "references": []\n}\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The ",(0,a.kt)("a",{parentName:"p",href:"../../config/toolchain#projectconfigfilename"},(0,a.kt)("inlineCode",{parentName:"a"},"typescript.projectConfigFileName"))," setting can\nbe used to change the project-level config name.")),(0,a.kt)("h3",{id:"sharing"},"Sharing"),(0,a.kt)("p",null,"To share configuration across projects, you have 3 options:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Define settings in a ",(0,a.kt)("a",{parentName:"li",href:"#root-level"},"root-level config"),". This only applies to the parent repository."),(0,a.kt)("li",{parentName:"ul"},"Create and publish an\n",(0,a.kt)("a",{parentName:"li",href:"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#tsconfig-bases"},(0,a.kt)("inlineCode",{parentName:"a"},"tsconfig base")),"\nnpm package. This can be used in any repository."),(0,a.kt)("li",{parentName:"ul"},"A combination of 1 and 2.")),(0,a.kt)("p",null,"For options 2 and 3, if you're utilizing package workspaces, create a local package with the\nfollowing content."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="packages/tsconfig-company/tsconfig.json"',title:'"packages/tsconfig-company/tsconfig.json"'},'{\n  "compilerOptions": {\n    // ...\n    "lib": ["esnext"]\n  }\n}\n')),(0,a.kt)("p",null,"Within another ",(0,a.kt)("inlineCode",{parentName:"p"},"tsconfig.json"),", you can extend this package to inherit the settings."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="tsconfig.json"',title:'"tsconfig.json"'},'{\n  "extends": "tsconfig-company/tsconfig.json"\n}\n')),(0,a.kt)("h2",{id:"faq"},"FAQ"),(0,a.kt)("h3",{id:"how-to-preserve-pretty-output"},"How to preserve pretty output?"),(0,a.kt)("p",null,"TypeScript supports a pretty format where it includes codeframes and color highlighting for\nfailures. However, when ",(0,a.kt)("inlineCode",{parentName:"p"},"tsc")," is piped or the terminal is not a TTY, the pretty format is lost. To\npreserve and always display the pretty format, be sure to pass the ",(0,a.kt)("inlineCode",{parentName:"p"},"--pretty")," argument!"))}m.isMDXComponent=!0}}]);